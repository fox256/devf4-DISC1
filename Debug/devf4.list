
devf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c098  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cbc  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010edc  08010edc  00030048  2**0
                  CONTENTS
  4 .ARM          00000008  08010edc  08010edc  00020edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ee4  08010ee4  00030048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee4  08010ee4  00020ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ee8  08010ee8  00020ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08010eec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030048  2**0
                  CONTENTS
 10 .bss          00008440  20000048  20000048  00030048  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008488  20008488  00030048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001146f  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033cb  00000000  00000000  000414e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000448b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  00045970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002991a  00000000  00000000  00046888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001575e  00000000  00000000  000701a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a32  00000000  00000000  00085900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0016e332  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004624  00000000  00000000  0016e3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c208 	.word	0x0800c208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800c208 	.word	0x0800c208

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b974 	b.w	8000c44 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	4604      	mov	r4, r0
 800097c:	468e      	mov	lr, r1
 800097e:	2b00      	cmp	r3, #0
 8000980:	d14d      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000982:	428a      	cmp	r2, r1
 8000984:	4694      	mov	ip, r2
 8000986:	d969      	bls.n	8000a5c <__udivmoddi4+0xe8>
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	b152      	cbz	r2, 80009a4 <__udivmoddi4+0x30>
 800098e:	fa01 f302 	lsl.w	r3, r1, r2
 8000992:	f1c2 0120 	rsb	r1, r2, #32
 8000996:	fa20 f101 	lsr.w	r1, r0, r1
 800099a:	fa0c fc02 	lsl.w	ip, ip, r2
 800099e:	ea41 0e03 	orr.w	lr, r1, r3
 80009a2:	4094      	lsls	r4, r2
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	0c21      	lsrs	r1, r4, #16
 80009aa:	fbbe f6f8 	udiv	r6, lr, r8
 80009ae:	fa1f f78c 	uxth.w	r7, ip
 80009b2:	fb08 e316 	mls	r3, r8, r6, lr
 80009b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ba:	fb06 f107 	mul.w	r1, r6, r7
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009ca:	f080 811f 	bcs.w	8000c0c <__udivmoddi4+0x298>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 811c 	bls.w	8000c0c <__udivmoddi4+0x298>
 80009d4:	3e02      	subs	r6, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3310 	mls	r3, r8, r0, r3
 80009e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009e8:	fb00 f707 	mul.w	r7, r0, r7
 80009ec:	42a7      	cmp	r7, r4
 80009ee:	d90a      	bls.n	8000a06 <__udivmoddi4+0x92>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009f8:	f080 810a 	bcs.w	8000c10 <__udivmoddi4+0x29c>
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	f240 8107 	bls.w	8000c10 <__udivmoddi4+0x29c>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	1be4      	subs	r4, r4, r7
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	b11d      	cbz	r5, 8000a18 <__udivmoddi4+0xa4>
 8000a10:	40d4      	lsrs	r4, r2
 8000a12:	2300      	movs	r3, #0
 8000a14:	e9c5 4300 	strd	r4, r3, [r5]
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0xc2>
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	f000 80ef 	beq.w	8000c06 <__udivmoddi4+0x292>
 8000a28:	2600      	movs	r6, #0
 8000a2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a2e:	4630      	mov	r0, r6
 8000a30:	4631      	mov	r1, r6
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	fab3 f683 	clz	r6, r3
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d14a      	bne.n	8000ad4 <__udivmoddi4+0x160>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d302      	bcc.n	8000a48 <__udivmoddi4+0xd4>
 8000a42:	4282      	cmp	r2, r0
 8000a44:	f200 80f9 	bhi.w	8000c3a <__udivmoddi4+0x2c6>
 8000a48:	1a84      	subs	r4, r0, r2
 8000a4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a4e:	2001      	movs	r0, #1
 8000a50:	469e      	mov	lr, r3
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d0e0      	beq.n	8000a18 <__udivmoddi4+0xa4>
 8000a56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a5a:	e7dd      	b.n	8000a18 <__udivmoddi4+0xa4>
 8000a5c:	b902      	cbnz	r2, 8000a60 <__udivmoddi4+0xec>
 8000a5e:	deff      	udf	#255	; 0xff
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	f040 8092 	bne.w	8000b8e <__udivmoddi4+0x21a>
 8000a6a:	eba1 010c 	sub.w	r1, r1, ip
 8000a6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a72:	fa1f fe8c 	uxth.w	lr, ip
 8000a76:	2601      	movs	r6, #1
 8000a78:	0c20      	lsrs	r0, r4, #16
 8000a7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a86:	fb0e f003 	mul.w	r0, lr, r3
 8000a8a:	4288      	cmp	r0, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x12c>
 8000a8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x12a>
 8000a98:	4288      	cmp	r0, r1
 8000a9a:	f200 80cb 	bhi.w	8000c34 <__udivmoddi4+0x2c0>
 8000a9e:	4643      	mov	r3, r8
 8000aa0:	1a09      	subs	r1, r1, r0
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa8:	fb07 1110 	mls	r1, r7, r0, r1
 8000aac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ab0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ab4:	45a6      	cmp	lr, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x156>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac0:	d202      	bcs.n	8000ac8 <__udivmoddi4+0x154>
 8000ac2:	45a6      	cmp	lr, r4
 8000ac4:	f200 80bb 	bhi.w	8000c3e <__udivmoddi4+0x2ca>
 8000ac8:	4608      	mov	r0, r1
 8000aca:	eba4 040e 	sub.w	r4, r4, lr
 8000ace:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ad2:	e79c      	b.n	8000a0e <__udivmoddi4+0x9a>
 8000ad4:	f1c6 0720 	rsb	r7, r6, #32
 8000ad8:	40b3      	lsls	r3, r6
 8000ada:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ade:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ae2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ae6:	fa01 f306 	lsl.w	r3, r1, r6
 8000aea:	431c      	orrs	r4, r3
 8000aec:	40f9      	lsrs	r1, r7
 8000aee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000af2:	fa00 f306 	lsl.w	r3, r0, r6
 8000af6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000afa:	0c20      	lsrs	r0, r4, #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fb09 1118 	mls	r1, r9, r8, r1
 8000b04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b08:	fb08 f00e 	mul.w	r0, r8, lr
 8000b0c:	4288      	cmp	r0, r1
 8000b0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b12:	d90b      	bls.n	8000b2c <__udivmoddi4+0x1b8>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b1c:	f080 8088 	bcs.w	8000c30 <__udivmoddi4+0x2bc>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f240 8085 	bls.w	8000c30 <__udivmoddi4+0x2bc>
 8000b26:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2a:	4461      	add	r1, ip
 8000b2c:	1a09      	subs	r1, r1, r0
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b34:	fb09 1110 	mls	r1, r9, r0, r1
 8000b38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	458e      	cmp	lr, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x1e2>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b4c:	d26c      	bcs.n	8000c28 <__udivmoddi4+0x2b4>
 8000b4e:	458e      	cmp	lr, r1
 8000b50:	d96a      	bls.n	8000c28 <__udivmoddi4+0x2b4>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b5e:	eba1 010e 	sub.w	r1, r1, lr
 8000b62:	42a1      	cmp	r1, r4
 8000b64:	46c8      	mov	r8, r9
 8000b66:	46a6      	mov	lr, r4
 8000b68:	d356      	bcc.n	8000c18 <__udivmoddi4+0x2a4>
 8000b6a:	d053      	beq.n	8000c14 <__udivmoddi4+0x2a0>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x212>
 8000b6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b72:	eb61 010e 	sbc.w	r1, r1, lr
 8000b76:	fa01 f707 	lsl.w	r7, r1, r7
 8000b7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b7e:	40f1      	lsrs	r1, r6
 8000b80:	431f      	orrs	r7, r3
 8000b82:	e9c5 7100 	strd	r7, r1, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	40d8      	lsrs	r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	fa21 f303 	lsr.w	r3, r1, r3
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	4301      	orrs	r1, r0
 8000ba0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bac:	fb07 3610 	mls	r6, r7, r0, r3
 8000bb0:	0c0b      	lsrs	r3, r1, #16
 8000bb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x260>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bca:	d22f      	bcs.n	8000c2c <__udivmoddi4+0x2b8>
 8000bcc:	429e      	cmp	r6, r3
 8000bce:	d92d      	bls.n	8000c2c <__udivmoddi4+0x2b8>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1b9b      	subs	r3, r3, r6
 8000bd6:	b289      	uxth	r1, r1
 8000bd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000be0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be4:	fb06 f30e 	mul.w	r3, r6, lr
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x28a>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bf4:	d216      	bcs.n	8000c24 <__udivmoddi4+0x2b0>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d914      	bls.n	8000c24 <__udivmoddi4+0x2b0>
 8000bfa:	3e02      	subs	r6, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c04:	e738      	b.n	8000a78 <__udivmoddi4+0x104>
 8000c06:	462e      	mov	r6, r5
 8000c08:	4628      	mov	r0, r5
 8000c0a:	e705      	b.n	8000a18 <__udivmoddi4+0xa4>
 8000c0c:	4606      	mov	r6, r0
 8000c0e:	e6e3      	b.n	80009d8 <__udivmoddi4+0x64>
 8000c10:	4618      	mov	r0, r3
 8000c12:	e6f8      	b.n	8000a06 <__udivmoddi4+0x92>
 8000c14:	454b      	cmp	r3, r9
 8000c16:	d2a9      	bcs.n	8000b6c <__udivmoddi4+0x1f8>
 8000c18:	ebb9 0802 	subs.w	r8, r9, r2
 8000c1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c20:	3801      	subs	r0, #1
 8000c22:	e7a3      	b.n	8000b6c <__udivmoddi4+0x1f8>
 8000c24:	4646      	mov	r6, r8
 8000c26:	e7ea      	b.n	8000bfe <__udivmoddi4+0x28a>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	e794      	b.n	8000b56 <__udivmoddi4+0x1e2>
 8000c2c:	4640      	mov	r0, r8
 8000c2e:	e7d1      	b.n	8000bd4 <__udivmoddi4+0x260>
 8000c30:	46d0      	mov	r8, sl
 8000c32:	e77b      	b.n	8000b2c <__udivmoddi4+0x1b8>
 8000c34:	3b02      	subs	r3, #2
 8000c36:	4461      	add	r1, ip
 8000c38:	e732      	b.n	8000aa0 <__udivmoddi4+0x12c>
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	e709      	b.n	8000a52 <__udivmoddi4+0xde>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	e742      	b.n	8000aca <__udivmoddi4+0x156>

08000c44 <__aeabi_idiv0>:
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_init>:
#include "i2c.h"
#include "stm32f407xx.h"


void i2c1_init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	//configure PB6 and PB9
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; 	//enable GPIOB CLOCK
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <i2c1_init+0xdc>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a34      	ldr	r2, [pc, #208]	; (8000d24 <i2c1_init+0xdc>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER9_1;	//10: Alternate function mode
 8000c58:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <i2c1_init+0xe0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <i2c1_init+0xe0>)
 8000c5e:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000c62:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT9;	//Output open-drain
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <i2c1_init+0xe0>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <i2c1_init+0xe0>)
 8000c6a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
 8000c6e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED9;	//Very high speed
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <i2c1_init+0xe0>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <i2c1_init+0xe0>)
 8000c76:	f443 2343 	orr.w	r3, r3, #798720	; 0xc3000
 8000c7a:	6093      	str	r3, [r2, #8]
//	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR9_0;	//Pull-up
	GPIOB->PUPDR &= ~(1<<12); //no-pull
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <i2c1_init+0xe0>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <i2c1_init+0xe0>)
 8000c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c86:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<18); //no-pull
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <i2c1_init+0xe0>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <i2c1_init+0xe0>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= 4 << 24;	//AF4 for pin PB6
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <i2c1_init+0xe0>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <i2c1_init+0xe0>)
 8000c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c9e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |= 4 << 4; 	//AF4 for pin PB9
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <i2c1_init+0xe0>)
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <i2c1_init+0xe0>)
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000caa:	6253      	str	r3, [r2, #36]	; 0x24

	//configure I2C
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;	//enable I2C CLOCK
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <i2c1_init+0xdc>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <i2c1_init+0xdc>)
 8000cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
	I2C1->CR1 |= I2C_CR1_SWRST; 		// reset the I2C
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <i2c1_init+0xe4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <i2c1_init+0xe4>)
 8000cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(I2C_CR1_SWRST);  	// normal operation
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <i2c1_init+0xe4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <i2c1_init+0xe4>)
 8000cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cce:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_ACK;			//Enable acknowledge
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <i2c1_init+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <i2c1_init+0xe4>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (42<<0); 				//set peripheral clock frequency to 42MHz
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <i2c1_init+0xe4>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <i2c1_init+0xe4>)
 8000ce2:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8000ce6:	6053      	str	r3, [r2, #4]

	I2C1->CCR |= I2C_CCR_FS; 			// 1: Fast Mode I2C
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <i2c1_init+0xe4>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <i2c1_init+0xe4>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	61d3      	str	r3, [r2, #28]
	I2C1->CCR &= ~(I2C_CCR_DUTY); 		//0: Fm mode tlow/thigh = 2
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <i2c1_init+0xe4>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <i2c1_init+0xe4>)
 8000cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cfe:	61d3      	str	r3, [r2, #28]
 Therefore, CCR = FPCLK1 / 3 x FSCL

 CCR = 42HMz / 3* 0.4MHz = 42/1.2 = 35
*/
	//I2C1->CCR = (50<<0); 	// Configure the clock control registers:measured 378kHz
	I2C1->CCR = (60<<0);
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <i2c1_init+0xe4>)
 8000d02:	223c      	movs	r2, #60	; 0x3c
 8000d04:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = (0<<0);
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <i2c1_init+0xe4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= (1<<0);  // Enable I2C
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <i2c1_init+0xe4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <i2c1_init+0xe4>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40005400 	.word	0x40005400

08000d30 <i2c1_start>:

void i2c1_start (void)

{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~(I2C_CR1_POS); // Disable POS
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <i2c1_start+0x38>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <i2c1_start+0x38>)
 8000d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d3e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_START;	//Generate START
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <i2c1_start+0x38>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <i2c1_start+0x38>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));	//wait for SB bite to set
 8000d4c:	bf00      	nop
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <i2c1_start+0x38>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f9      	beq.n	8000d4e <i2c1_start+0x1e>
	(void)I2C1->SR1; //read SR1 for clear SB bit
 8000d5a:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <i2c1_start+0x38>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40005400 	.word	0x40005400

08000d6c <i2c1_write>:

void i2c1_write (uint8_t data)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = data;
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <i2c1_write+0x2c>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (I2C_SR1_TXE)));
 8000d7c:	bf00      	nop
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <i2c1_write+0x2c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f9      	beq.n	8000d7e <i2c1_write+0x12>

}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40005400 	.word	0x40005400

08000d9c <i2c1_write_adress>:

void i2c1_write_adress (uint8_t address)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = address;
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <i2c1_write_adress+0x34>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (I2C_SR1_ADDR)));  // wait for ADDR bit to set  1: Received address matched.
 8000dac:	bf00      	nop
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <i2c1_write_adress+0x34>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <i2c1_write_adress+0x12>
	//read SR1 and SR2 to clear the ADDR bit
	(void)I2C1->SR1;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <i2c1_write_adress+0x34>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <i2c1_write_adress+0x34>)
 8000dc0:	699b      	ldr	r3, [r3, #24]

}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40005400 	.word	0x40005400

08000dd4 <i2c1_read>:

uint8_t i2c1_read(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

	while(!(I2C1->SR1 &= (I2C_SR1_RXNE)));
 8000dda:	bf00      	nop
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <i2c1_read+0x2c>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <i2c1_read+0x2c>)
 8000de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f7      	beq.n	8000ddc <i2c1_read+0x8>
	uint8_t rxdata = I2C1->DR;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <i2c1_read+0x2c>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	71fb      	strb	r3, [r7, #7]
	return rxdata;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40005400 	.word	0x40005400

08000e04 <i2c1_stop>:

 void i2c1_stop(void)
 {
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	 I2C1->CR1 &= ~(I2C_CR1_ACK);	//Disable ACK
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <i2c1_stop+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <i2c1_stop+0x28>)
 8000e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e12:	6013      	str	r3, [r2, #0]
	 I2C1->CR1 |= I2C_CR1_STOP;		//Stop generation
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <i2c1_stop+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <i2c1_stop+0x28>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
 }
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40005400 	.word	0x40005400

08000e30 <i2c_start>:

}
//-------------------- new implementation -----------------//

uint8_t i2c_start(I2C_TypeDef *I2Cx, uint32_t timeout)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint32_t tick_start = HAL_GetTick();
 8000e3a:	f002 fe49 	bl	8003ad0 <HAL_GetTick>
 8000e3e:	60f8      	str	r0, [r7, #12]
	I2Cx->CR1 |= I2C_CR1_ACK;		//Enable acknowledge
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
	I2Cx->CR1 &= ~(I2C_CR1_POS); 	// Disable POS
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
	I2Cx->CR1 |= I2C_CR1_START;		//Generate START
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & (1<<0)))	//wait for SB bite to set
 8000e64:	e00c      	b.n	8000e80 <i2c_start+0x50>
	{
	     if (((HAL_GetTick() - tick_start) > timeout) || (timeout == 0U))
 8000e66:	f002 fe33 	bl	8003ad0 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d302      	bcc.n	8000e7c <i2c_start+0x4c>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <i2c_start+0x50>
	     {
	    	 return ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e008      	b.n	8000e92 <i2c_start+0x62>
	while (!(I2Cx->SR1 & (1<<0)))	//wait for SB bite to set
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ec      	beq.n	8000e66 <i2c_start+0x36>
	     }
	}
	(void)I2Cx->SR1; 				//read SR1 for clear SB bit
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
	return SUCCESS;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <i2c_write_adress>:

uint8_t i2c_write_adress(I2C_TypeDef *I2Cx, uint8_t address, uint32_t timeout)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	72fb      	strb	r3, [r7, #11]

	uint32_t tick_start = HAL_GetTick();
 8000eaa:	f002 fe11 	bl	8003ad0 <HAL_GetTick>
 8000eae:	6178      	str	r0, [r7, #20]

	I2Cx->DR = address;
 8000eb0:	7afa      	ldrb	r2, [r7, #11]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

	while (!(I2C1->SR1 & (I2C_SR1_ADDR)))  // wait for ADDR bit to set  1: Received address matched.
 8000eb6:	e00c      	b.n	8000ed2 <i2c_write_adress+0x36>
	{
	     if (((HAL_GetTick() - tick_start) > timeout) || (timeout == 0U))
 8000eb8:	f002 fe0a 	bl	8003ad0 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <i2c_write_adress+0x32>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <i2c_write_adress+0x36>
	     {
	    	return ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00a      	b.n	8000ee8 <i2c_write_adress+0x4c>
	while (!(I2C1->SR1 & (I2C_SR1_ADDR)))  // wait for ADDR bit to set  1: Received address matched.
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <i2c_write_adress+0x54>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0ec      	beq.n	8000eb8 <i2c_write_adress+0x1c>
	     }
	}
	//read SR1 and SR2 to clear the ADDR bit
	(void)I2Cx->SR1;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	695b      	ldr	r3, [r3, #20]
	(void)I2Cx->SR2;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	699b      	ldr	r3, [r3, #24]
	return SUCCESS;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40005400 	.word	0x40005400

08000ef4 <i2c_write_data>:

uint8_t i2c_write_data(I2C_TypeDef *I2Cx, uint8_t data, uint32_t timeout)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	460b      	mov	r3, r1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	72fb      	strb	r3, [r7, #11]
	uint32_t tick_start = HAL_GetTick();
 8000f02:	f002 fde5 	bl	8003ad0 <HAL_GetTick>
 8000f06:	6178      	str	r0, [r7, #20]

	I2Cx->DR = data;
 8000f08:	7afa      	ldrb	r2, [r7, #11]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

	while(!(I2C1->SR1 & (I2C_SR1_TXE)))
 8000f0e:	e00c      	b.n	8000f2a <i2c_write_data+0x36>
	{
		if (((HAL_GetTick() - tick_start) > timeout) || (timeout == 0U))
 8000f10:	f002 fdde 	bl	8003ad0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d302      	bcc.n	8000f26 <i2c_write_data+0x32>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <i2c_write_data+0x36>
		{
			return ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e006      	b.n	8000f38 <i2c_write_data+0x44>
	while(!(I2C1->SR1 & (I2C_SR1_TXE)))
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <i2c_write_data+0x4c>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0ec      	beq.n	8000f10 <i2c_write_data+0x1c>
		}
	}
	return SUCCESS;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40005400 	.word	0x40005400

08000f44 <i2c_read_data>:

uint8_t i2c_read_data(I2C_TypeDef *I2Cx, uint32_t timeout)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint32_t tick_start = HAL_GetTick();
 8000f4e:	f002 fdbf 	bl	8003ad0 <HAL_GetTick>
 8000f52:	60f8      	str	r0, [r7, #12]

	while(!(I2Cx->SR1 &= (I2C_SR1_RXNE)))
 8000f54:	e00a      	b.n	8000f6c <i2c_read_data+0x28>
	{
		if (((HAL_GetTick() - tick_start) > timeout) || (timeout == 0U))
 8000f56:	f002 fdbb 	bl	8003ad0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d30a      	bcc.n	8000f7c <i2c_read_data+0x38>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <i2c_read_data+0x38>
	while(!(I2Cx->SR1 &= (I2C_SR1_RXNE)))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6153      	str	r3, [r2, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ec      	beq.n	8000f56 <i2c_read_data+0x12>
		{
			break;
		}
	}
	uint8_t rxdata = I2Cx->DR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	72fb      	strb	r3, [r7, #11]
	return rxdata;
 8000f82:	7afb      	ldrb	r3, [r7, #11]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <i2c_stop>:

void i2c_stop(I2C_TypeDef *I2Cx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	 I2Cx->CR1 &= ~(I2C_CR1_ACK);	//Disable ACK
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
	 I2Cx->CR1 |= I2C_CR1_STOP;		//Stop generation
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <i2c_dis_ack>:
{
	I2Cx->CR1 |= I2C_CR1_ACK;
}

void i2c_dis_ack(I2C_TypeDef *I2Cx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	I2C1->CR1 &= ~(I2C_CR1_ACK);
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <i2c_dis_ack+0x20>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <i2c_dis_ack+0x20>)
 8000fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40005400 	.word	0x40005400

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f023 0210 	bic.w	r2, r3, #16
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d01c      	beq.n	800117e <LL_TIM_OC_DisableFast+0x4a>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d017      	beq.n	800117a <LL_TIM_OC_DisableFast+0x46>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b10      	cmp	r3, #16
 800114e:	d012      	beq.n	8001176 <LL_TIM_OC_DisableFast+0x42>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b40      	cmp	r3, #64	; 0x40
 8001154:	d00d      	beq.n	8001172 <LL_TIM_OC_DisableFast+0x3e>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800115c:	d007      	beq.n	800116e <LL_TIM_OC_DisableFast+0x3a>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	d101      	bne.n	800116a <LL_TIM_OC_DisableFast+0x36>
 8001166:	2305      	movs	r3, #5
 8001168:	e00a      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 800116a:	2306      	movs	r3, #6
 800116c:	e008      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_TIM_OC_DisableFast+0x4c>
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3318      	adds	r3, #24
 8001186:	4619      	mov	r1, r3
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LL_TIM_OC_DisableFast+0x84>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	440b      	add	r3, r1
 8001190:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <LL_TIM_OC_DisableFast+0x88>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	4619      	mov	r1, r3
 800119e:	2304      	movs	r3, #4
 80011a0:	408b      	lsls	r3, r1
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	601a      	str	r2, [r3, #0]

}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	08010c4c 	.word	0x08010c4c
 80011bc:	08010c54 	.word	0x08010c54

080011c0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d01c      	beq.n	800120a <LL_TIM_OC_EnablePreload+0x4a>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d017      	beq.n	8001206 <LL_TIM_OC_EnablePreload+0x46>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d012      	beq.n	8001202 <LL_TIM_OC_EnablePreload+0x42>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b40      	cmp	r3, #64	; 0x40
 80011e0:	d00d      	beq.n	80011fe <LL_TIM_OC_EnablePreload+0x3e>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e8:	d007      	beq.n	80011fa <LL_TIM_OC_EnablePreload+0x3a>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d101      	bne.n	80011f6 <LL_TIM_OC_EnablePreload+0x36>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e00a      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e008      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_TIM_OC_EnablePreload+0x4c>
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3318      	adds	r3, #24
 8001212:	4619      	mov	r1, r3
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LL_TIM_OC_EnablePreload+0x80>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	440b      	add	r3, r1
 800121c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <LL_TIM_OC_EnablePreload+0x84>)
 8001226:	5ccb      	ldrb	r3, [r1, r3]
 8001228:	4619      	mov	r1, r3
 800122a:	2308      	movs	r3, #8
 800122c:	408b      	lsls	r3, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	08010c4c 	.word	0x08010c4c
 8001244:	08010c54 	.word	0x08010c54

08001248 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60da      	str	r2, [r3, #12]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	615a      	str	r2, [r3, #20]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b089      	sub	sp, #36	; 0x24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	330c      	adds	r3, #12
 80012e6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	e853 3f00 	ldrex	r3, [r3]
 80012ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	330c      	adds	r3, #12
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	61ba      	str	r2, [r7, #24]
 8001300:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	e841 2300 	strex	r3, r2, [r1]
 800130a:	613b      	str	r3, [r7, #16]
   return(result);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e7      	bne.n	80012e2 <LL_USART_EnableIT_RXNE+0x8>
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3724      	adds	r7, #36	; 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <LL_SYSCFG_SetEXTISource+0x58>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3302      	adds	r3, #2
 8001332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	43db      	mvns	r3, r3
 800133c:	ea02 0103 	and.w	r1, r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	60bb      	str	r3, [r7, #8]
  return result;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	fa03 f202 	lsl.w	r2, r3, r2
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <LL_SYSCFG_SetEXTISource+0x58>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	430a      	orrs	r2, r1
 8001366:	3302      	adds	r3, #2
 8001368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40013800 	.word	0x40013800

0800137c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	613b      	str	r3, [r7, #16]
  return result;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2103      	movs	r1, #3
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	61bb      	str	r3, [r7, #24]
  return result;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	431a      	orrs	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80013da:	b480      	push	{r7}
 80013dc:	b089      	sub	sp, #36	; 0x24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	613b      	str	r3, [r7, #16]
  return result;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2103      	movs	r1, #3
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	401a      	ands	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	61bb      	str	r3, [r7, #24]
  return result;
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	60da      	str	r2, [r3, #12]
}
 800142c:	bf00      	nop
 800142e:	3724      	adds	r7, #36	; 0x24
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	619a      	str	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800147e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800

080014a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800

080014d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40023800 	.word	0x40023800

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f002 fa7b 	bl	8003a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f8fb 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 fc41 	bl	8001d98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001516:	f000 f961 	bl	80017dc <MX_ADC1_Init>
  MX_SPI1_Init();
 800151a:	f000 f9e7 	bl	80018ec <MX_SPI1_Init>
  MX_SPI2_Init();
 800151e:	f000 fa3d 	bl	800199c <MX_SPI2_Init>
  MX_UART4_Init();
 8001522:	f000 fb73 	bl	8001c0c <MX_UART4_Init>
  MX_CRC_Init();
 8001526:	f000 f9ab 	bl	8001880 <MX_CRC_Init>
  MX_TIM4_Init();
 800152a:	f000 faf5 	bl	8001b18 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800152e:	f000 fbcf 	bl	8001cd0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001532:	f000 fa87 	bl	8001a44 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001536:	f000 f9ab 	bl	8001890 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  i2c1_init(); 		//init I2C1 module
 800153a:	f7ff fb85 	bl	8000c48 <i2c1_init>
  LIS3DSH_Init();	//init accel onboard sensor
 800153e:	f002 f87d 	bl	800363c <LIS3DSH_Init>
  SHT20_SoftReset();
 8001542:	f002 f901 	bl	8003748 <SHT20_SoftReset>
  SHT20_ReadUserRegister();
 8001546:	f002 f925 	bl	8003794 <SHT20_ReadUserRegister>

 /* HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);*/
  LCD_home_screen();
 800154a:	f000 fcc5 	bl	8001ed8 <LCD_home_screen>
  GUI_Init();
 800154e:	f005 fd25 	bl	8006f9c <GUI_Init>

 // (GUI_GRAY_C0);
  GUI_Clear();
 8001552:	f005 fcc9 	bl	8006ee8 <GUI_Clear>
  GUI_SetColor(GUI_ORANGE);
 8001556:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 800155a:	f005 fbf4 	bl	8006d46 <GUI_SetColor>
  GUI_SetBkColor(GUI_BLACK);
 800155e:	2000      	movs	r0, #0
 8001560:	f005 fbef 	bl	8006d42 <GUI_SetBkColor>
  //CreatemainW();
 // GUI_FillCircle(GUI_GetScreenSizeX() / 2, GUI_GetScreenSizeY() / 2, 114);

  GUI_SetFont(&GUI_Font20_1);
 8001564:	485f      	ldr	r0, [pc, #380]	; (80016e4 <main+0x1e0>)
 8001566:	f005 fbf1 	bl	8006d4c <GUI_SetFont>

  GUI_DispStringHCenterAt("- Home -",GUI_GetScreenSizeX() / 2, (GUI_GetScreenSizeY()/2 - 8));
 800156a:	f005 fbc9 	bl	8006d00 <GUI_GetScreenSizeX>
 800156e:	4603      	mov	r3, r0
 8001570:	0fda      	lsrs	r2, r3, #31
 8001572:	4413      	add	r3, r2
 8001574:	105b      	asrs	r3, r3, #1
 8001576:	461c      	mov	r4, r3
 8001578:	f005 fbce 	bl	8006d18 <GUI_GetScreenSizeY>
 800157c:	4603      	mov	r3, r0
 800157e:	0fda      	lsrs	r2, r3, #31
 8001580:	4413      	add	r3, r2
 8001582:	105b      	asrs	r3, r3, #1
 8001584:	3b08      	subs	r3, #8
 8001586:	461a      	mov	r2, r3
 8001588:	4621      	mov	r1, r4
 800158a:	4857      	ldr	r0, [pc, #348]	; (80016e8 <main+0x1e4>)
 800158c:	f005 ff1e 	bl	80073cc <GUI_DispStringHCenterAt>


  TIM4->CCER |= TIM_CCER_CC1E; //green
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <main+0x1e8>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a55      	ldr	r2, [pc, #340]	; (80016ec <main+0x1e8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
  TIM4->CCER |= TIM_CCER_CC2E; //orange
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <main+0x1e8>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <main+0x1e8>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6213      	str	r3, [r2, #32]
  TIM4->CCR1 = 50;
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <main+0x1e8>)
 80015aa:	2232      	movs	r2, #50	; 0x32
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CR1 |= TIM_CR1_CEN;	//CEN = 1 : Start Timer
 80015ae:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <main+0x1e8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <main+0x1e8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6013      	str	r3, [r2, #0]


  TIM3->CCER |= TIM_CCER_CC2E; //LCD Back light
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <main+0x1ec>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <main+0x1ec>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6213      	str	r3, [r2, #32]
  TIM3->CCR2 = 90;
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <main+0x1ec>)
 80015c8:	225a      	movs	r2, #90	; 0x5a
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CR1 |= TIM_CR1_CEN;	//CEN = 1 : Start Timer
 80015cc:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <main+0x1ec>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <main+0x1ec>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]


 // TFT_eSPI_setFreeFont();


  GUI_SetColor(GUI_WHITE);
 80015d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80015dc:	f005 fbb3 	bl	8006d46 <GUI_SetColor>
  GUI_SetFont(&GUI_FontD32);
 80015e0:	4844      	ldr	r0, [pc, #272]	; (80016f4 <main+0x1f0>)
 80015e2:	f005 fbb3 	bl	8006d4c <GUI_SetFont>
 // font_size_x = GUI_GetXSizeOfFont(&GUI_FontD32);

  GUI_DrawGradientH(0,280,120,280,GUI_BLACK,GUI_MAGENTA);
 80015e6:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80015f4:	2278      	movs	r2, #120	; 0x78
 80015f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80015fa:	2000      	movs	r0, #0
 80015fc:	f005 ffca 	bl	8007594 <GUI_DrawGradientH>
  GUI_DrawGradientH(120,280,240,280,GUI_MAGENTA,GUI_BLACK);
 8001600:	2300      	movs	r3, #0
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800160e:	22f0      	movs	r2, #240	; 0xf0
 8001610:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001614:	2078      	movs	r0, #120	; 0x78
 8001616:	f005 ffbd 	bl	8007594 <GUI_DrawGradientH>
  DS3231_Set_Hours(22);
 800161a:	2016      	movs	r0, #22
 800161c:	f001 f83c 	bl	8002698 <DS3231_Set_Hours>
  DS3231_Set_Min(59);
 8001620:	203b      	movs	r0, #59	; 0x3b
 8001622:	f001 f84b 	bl	80026bc <DS3231_Set_Min>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIS3DSH_Measure();
 8001626:	f002 f82d 	bl	8003684 <LIS3DSH_Measure>

	  h = DS3231_Get_Hours();
 800162a:	f001 f813 	bl	8002654 <DS3231_Get_Hours>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <main+0x1f4>)
 8001634:	701a      	strb	r2, [r3, #0]
	  GUI_SetColor(GUI_WHITE);
 8001636:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800163a:	f005 fb84 	bl	8006d46 <GUI_SetColor>
	  GUI_SetFont(&GUI_FontD32);
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <main+0x1f0>)
 8001640:	f005 fb84 	bl	8006d4c <GUI_SetFont>
	  GUI_DispCharAt('1',0,285);
 8001644:	f240 121d 	movw	r2, #285	; 0x11d
 8001648:	2100      	movs	r1, #0
 800164a:	2031      	movs	r0, #49	; 0x31
 800164c:	f005 fe22 	bl	8007294 <GUI_DispCharAt>
	  GUI_DispCharAt('6',30,285);
 8001650:	f240 121d 	movw	r2, #285	; 0x11d
 8001654:	211e      	movs	r1, #30
 8001656:	2036      	movs	r0, #54	; 0x36
 8001658:	f005 fe1c 	bl	8007294 <GUI_DispCharAt>


	  LCD_Print_Time( 1, DS3231_Get_Min(),DS3231_Get_Sec());
 800165c:	f000 ffe7 	bl	800262e <DS3231_Get_Min>
 8001660:	4603      	mov	r3, r0
 8001662:	461c      	mov	r4, r3
 8001664:	f000 ffd0 	bl	8002608 <DS3231_Get_Sec>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4621      	mov	r1, r4
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fc78 	bl	8001f64 <LCD_Print_Time>


	  //----------print temperature---------------------//
	  tempC =  SHT20_GetTemp();
 8001674:	f002 f8c0 	bl	80037f8 <SHT20_GetTemp>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <main+0x1f8>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
	  GUI_GotoXY(0,200);
 8001682:	21c8      	movs	r1, #200	; 0xc8
 8001684:	2000      	movs	r0, #0
 8001686:	f005 fb15 	bl	8006cb4 <GUI_GotoXY>
	  GUI_SetColor(GUI_YELLOW);
 800168a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800168e:	f005 fb5a 	bl	8006d46 <GUI_SetColor>
	  GUI_SetFont(&GUI_Font16_1);
 8001692:	481b      	ldr	r0, [pc, #108]	; (8001700 <main+0x1fc>)
 8001694:	f005 fb5a 	bl	8006d4c <GUI_SetFont>
	  GUI_DispFloat(tempC,6);
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <main+0x1f8>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	2006      	movs	r0, #6
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f006 f82a 	bl	80076fc <GUI_DispFloat>
	  //----------print humidity------------------------//
	  RH = SHT20_GetHum();
 80016a8:	f002 f92e 	bl	8003908 <SHT20_GetHum>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <main+0x200>)
 80016b2:	edc3 7a00 	vstr	s15, [r3]
	  GUI_GotoXY(0,220);
 80016b6:	21dc      	movs	r1, #220	; 0xdc
 80016b8:	2000      	movs	r0, #0
 80016ba:	f005 fafb 	bl	8006cb4 <GUI_GotoXY>
	  GUI_DispFloat(RH,6);
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <main+0x200>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	2006      	movs	r0, #6
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f006 f817 	bl	80076fc <GUI_DispFloat>
	  //------------------------------------------------//
	  LCD_Print_Weekday(DS3231_Get_Week());
 80016ce:	f000 ffd4 	bl	800267a <DS3231_Get_Week>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fcf5 	bl	80020c4 <LCD_Print_Weekday>
	  HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f002 fa04 	bl	8003ae8 <HAL_Delay>
	  LIS3DSH_Measure();
 80016e0:	e7a1      	b.n	8001626 <main+0x122>
 80016e2:	bf00      	nop
 80016e4:	0800dcc0 	.word	0x0800dcc0
 80016e8:	0800c220 	.word	0x0800c220
 80016ec:	40000800 	.word	0x40000800
 80016f0:	40000400 	.word	0x40000400
 80016f4:	08010458 	.word	0x08010458
 80016f8:	20000034 	.word	0x20000034
 80016fc:	200002a4 	.word	0x200002a4
 8001700:	0800c6e0 	.word	0x0800c6e0
 8001704:	200002a8 	.word	0x200002a8

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00a fc28 	bl	800bf6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <SystemClock_Config+0xcc>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <SystemClock_Config+0xcc>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <SystemClock_Config+0xd0>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <SystemClock_Config+0xd0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176e:	2302      	movs	r3, #2
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800177c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001786:	2304      	movs	r3, #4
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fff6 	bl	8004780 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800179a:	f000 fb97 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	230f      	movs	r3, #15
 80017a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a2:	2302      	movs	r3, #2
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2105      	movs	r1, #5
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fa57 	bl	8004c70 <HAL_RCC_ClockConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017c8:	f000 fb80 	bl	8001ecc <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3750      	adds	r7, #80	; 0x50
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000

080017dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e2:	463b      	mov	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <MX_ADC1_Init+0x98>)
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <MX_ADC1_Init+0x9c>)
 80017f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <MX_ADC1_Init+0x98>)
 80017f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_ADC1_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_ADC1_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_ADC1_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <MX_ADC1_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_ADC1_Init+0x98>)
 800181e:	4a17      	ldr	r2, [pc, #92]	; (800187c <MX_ADC1_Init+0xa0>)
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_ADC1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_ADC1_Init+0x98>)
 800182a:	2201      	movs	r2, #1
 800182c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_ADC1_Init+0x98>)
 8001838:	2201      	movs	r2, #1
 800183a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <MX_ADC1_Init+0x98>)
 800183e:	f002 f977 	bl	8003b30 <HAL_ADC_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001848:	f000 fb40 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184c:	2301      	movs	r3, #1
 800184e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_ADC1_Init+0x98>)
 800185e:	f002 f9ab 	bl	8003bb8 <HAL_ADC_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001868:	f000 fb30 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000208 	.word	0x20000208
 8001878:	40012000 	.word	0x40012000
 800187c:	0f000001 	.word	0x0f000001

08001880 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8001884:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001888:	f7ff fdf4 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END CRC_Init 1 */
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C3_Init+0x50>)
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <MX_I2C3_Init+0x54>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C3_Init+0x50>)
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_I2C3_Init+0x58>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_I2C3_Init+0x50>)
 80018ce:	f002 fe13 	bl	80044f8 <HAL_I2C_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018d8:	f000 faf8 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000250 	.word	0x20000250
 80018e4:	40005c00 	.word	0x40005c00
 80018e8:	000186a0 	.word	0x000186a0

080018ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b090      	sub	sp, #64	; 0x40
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018f2:	f107 0318 	add.w	r3, r7, #24
 80018f6:	2228      	movs	r2, #40	; 0x28
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00a fb36 	bl	800bf6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001910:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001914:	f7ff fdde 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fdab 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800191e:	23e0      	movs	r3, #224	; 0xe0
 8001920:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001922:	2302      	movs	r3, #2
 8001924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001932:	2305      	movs	r3, #5
 8001934:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4816      	ldr	r0, [pc, #88]	; (8001994 <MX_SPI1_Init+0xa8>)
 800193c:	f003 fdc2 	bl	80054c4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001944:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001948:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800195c:	2318      	movs	r3, #24
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001968:	230a      	movs	r3, #10
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <MX_SPI1_Init+0xac>)
 8001974:	f003 ff77 	bl	8005866 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001978:	2100      	movs	r1, #0
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_SPI1_Init+0xac>)
 800197c:	f7ff fbb7 	bl	80010ee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SPE; // enable spi1
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <MX_SPI1_Init+0xac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <MX_SPI1_Init+0xac>)
 8001986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198a:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3740      	adds	r7, #64	; 0x40
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40020000 	.word	0x40020000
 8001998:	40013000 	.word	0x40013000

0800199c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b090      	sub	sp, #64	; 0x40
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	2228      	movs	r2, #40	; 0x28
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00a fade 	bl	800bf6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	463b      	mov	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80019c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019c4:	f7ff fd6e 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff fd53 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80019ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019d4:	2302      	movs	r3, #2
 80019d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019e4:	2305      	movs	r3, #5
 80019e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_SPI2_Init+0xa0>)
 80019ee:	f003 fd69 	bl	80054c4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80019f6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019fa:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_SPI2_Init+0xa4>)
 8001a26:	f003 ff1e 	bl	8005866 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_SPI2_Init+0xa4>)
 8001a2e:	f7ff fb5e 	bl	80010ee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3740      	adds	r7, #64	; 0x40
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40003800 	.word	0x40003800

08001a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b094      	sub	sp, #80	; 0x50
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2220      	movs	r2, #32
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f00a fa82 	bl	800bf6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7ff fd13 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 84;
 8001a7e:	2354      	movs	r3, #84	; 0x54
 8001a80:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a82:	2300      	movs	r3, #0
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 100;
 8001a86:	2364      	movs	r3, #100	; 0x64
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001a8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a92:	4619      	mov	r1, r3
 8001a94:	481e      	ldr	r0, [pc, #120]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001a96:	f003 ffab 	bl	80059f0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001a9a:	481d      	ldr	r0, [pc, #116]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001a9c:	f7ff fb3a 	bl	8001114 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	481b      	ldr	r0, [pc, #108]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001aa4:	f7ff fb8c 	bl	80011c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	; 0x60
 8001aaa:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001ac6:	f004 f82d 	bl	8005b24 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8001aca:	2110      	movs	r1, #16
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001ace:	f7ff fb31 	bl	8001134 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	480e      	ldr	r0, [pc, #56]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001ad6:	f7ff fbb7 	bl	8001248 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_TIM3_Init+0xcc>)
 8001adc:	f7ff fbc7 	bl	800126e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f7ff fcc7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_TIM3_Init+0xd0>)
 8001b04:	f003 fcde 	bl	80054c4 <LL_GPIO_Init>

}
 8001b08:	bf00      	nop
 8001b0a:	3750      	adds	r7, #80	; 0x50
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40020400 	.word	0x40020400

08001b18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	2220      	movs	r2, #32
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00a fa18 	bl	800bf6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fca9 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 168;
 8001b52:	23a8      	movs	r3, #168	; 0xa8
 8001b54:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b56:	2300      	movs	r3, #0
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 100;
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001b62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b66:	4619      	mov	r1, r3
 8001b68:	4826      	ldr	r0, [pc, #152]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001b6a:	f003 ff41 	bl	80059f0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001b6e:	4825      	ldr	r0, [pc, #148]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001b70:	f7ff fad0 	bl	8001114 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8001b74:	2101      	movs	r1, #1
 8001b76:	4823      	ldr	r0, [pc, #140]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001b78:	f7ff fb22 	bl	80011c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001b7c:	2360      	movs	r3, #96	; 0x60
 8001b7e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	461a      	mov	r2, r3
 8001b96:	2101      	movs	r1, #1
 8001b98:	481a      	ldr	r0, [pc, #104]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001b9a:	f003 ffc3 	bl	8005b24 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001ba2:	f7ff fac7 	bl	8001134 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4816      	ldr	r0, [pc, #88]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001baa:	f7ff fb09 	bl	80011c0 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	4813      	ldr	r0, [pc, #76]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001bb8:	f003 ffb4 	bl	8005b24 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001bc0:	f7ff fab8 	bl	8001134 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480f      	ldr	r0, [pc, #60]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001bc8:	f7ff fb3e 	bl	8001248 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM4_Init+0xec>)
 8001bce:	f7ff fb4e 	bl	800126e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001bd2:	2008      	movs	r0, #8
 8001bd4:	f7ff fc4e 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD12   ------> TIM4_CH1
  PD13   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8001bd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bde:	2302      	movs	r3, #2
 8001be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_TIM4_Init+0xf0>)
 8001bf8:	f003 fc64 	bl	80054c4 <LL_GPIO_Init>

}
 8001bfc:	bf00      	nop
 8001bfe:	3750      	adds	r7, #80	; 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40020c00 	.word	0x40020c00

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	; 0x38
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8001c36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c3a:	f7ff fc33 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f7ff fc18 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001c44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_UART4_Init+0xbc>)
 8001c64:	f003 fc2e 	bl	80054c4 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c68:	f7ff f9b8 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa08 	bl	8001088 <NVIC_EncodePriority>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2034      	movs	r0, #52	; 0x34
 8001c7e:	f7ff f9d9 	bl	8001034 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001c82:	2034      	movs	r0, #52	; 0x34
 8001c84:	f7ff f9b8 	bl	8000ff8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <MX_UART4_Init+0xc0>)
 8001cae:	f004 fb85 	bl	80063bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <MX_UART4_Init+0xc0>)
 8001cb4:	f7ff fafb 	bl	80012ae <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_UART4_Init+0xc0>)
 8001cba:	f7ff fae8 	bl	800128e <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3738      	adds	r7, #56	; 0x38
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40004c00 	.word	0x40004c00

08001cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001cfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cfe:	f7ff fbd1 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fbb6 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	481a      	ldr	r0, [pc, #104]	; (8001d90 <MX_USART2_UART_Init+0xc0>)
 8001d26:	f003 fbcd 	bl	80054c4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d2a:	f7ff f957 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f9a7 	bl	8001088 <NVIC_EncodePriority>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2026      	movs	r0, #38	; 0x26
 8001d40:	f7ff f978 	bl	8001034 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001d44:	2026      	movs	r0, #38	; 0x26
 8001d46:	f7ff f957 	bl	8000ff8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001d4a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d4e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <MX_USART2_UART_Init+0xc4>)
 8001d70:	f004 fb24 	bl	80063bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_USART2_UART_Init+0xc4>)
 8001d76:	f7ff fa9a 	bl	80012ae <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <MX_USART2_UART_Init+0xc4>)
 8001d7c:	f7ff fa87 	bl	800128e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_USART2_UART_Init+0xc4>)
 8001d82:	f7ff faaa 	bl	80012da <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3738      	adds	r7, #56	; 0x38
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40004400 	.word	0x40004400

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001db8:	2010      	movs	r0, #16
 8001dba:	f7ff fb5b 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001dbe:	2080      	movs	r0, #128	; 0x80
 8001dc0:	f7ff fb58 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fb55 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f7ff fb52 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f7ff fb4f 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001dd6:	2004      	movs	r0, #4
 8001dd8:	f7ff fb4c 	bl	8001474 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_3);
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4837      	ldr	r0, [pc, #220]	; (8001ebc <MX_GPIO_Init+0x124>)
 8001de0:	f7ff fb38 	bl	8001454 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4);
 8001de4:	2112      	movs	r1, #18
 8001de6:	4836      	ldr	r0, [pc, #216]	; (8001ec0 <MX_GPIO_Init+0x128>)
 8001de8:	f7ff fb34 	bl	8001454 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8001dec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001df0:	4834      	ldr	r0, [pc, #208]	; (8001ec4 <MX_GPIO_Init+0x12c>)
 8001df2:	f7ff fb2f 	bl	8001454 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4831      	ldr	r0, [pc, #196]	; (8001ec0 <MX_GPIO_Init+0x128>)
 8001dfa:	f7ff fb1d 	bl	8001438 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e02:	2301      	movs	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e12:	463b      	mov	r3, r7
 8001e14:	4619      	mov	r1, r3
 8001e16:	4829      	ldr	r0, [pc, #164]	; (8001ebc <MX_GPIO_Init+0x124>)
 8001e18:	f003 fb54 	bl	80054c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4;
 8001e1c:	2313      	movs	r3, #19
 8001e1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e20:	2301      	movs	r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	463b      	mov	r3, r7
 8001e32:	4619      	mov	r1, r3
 8001e34:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <MX_GPIO_Init+0x128>)
 8001e36:	f003 fb45 	bl	80054c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001e3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e40:	2301      	movs	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e50:	463b      	mov	r3, r7
 8001e52:	4619      	mov	r1, r3
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <MX_GPIO_Init+0x12c>)
 8001e56:	f003 fb35 	bl	80054c4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001e5a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fa5e 	bl	8001320 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e70:	2302      	movs	r3, #2
 8001e72:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 f99d 	bl	80051b8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_0, LL_GPIO_PULL_NO);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <MX_GPIO_Init+0x130>)
 8001e84:	f7ff faa9 	bl	80013da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <MX_GPIO_Init+0x130>)
 8001e8e:	f7ff fa75 	bl	800137c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e92:	f7ff f8a3 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f8f3 	bl	8001088 <NVIC_EncodePriority>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f7ff f8c4 	bl	8001034 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001eac:	2006      	movs	r0, #6
 8001eae:	f7ff f8a3 	bl	8000ff8 <__NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40020000 	.word	0x40020000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <LCD_home_screen>:
const char weekdays[7][10] = {"Monday","Tuesday","Wednesday","Thursday", "Friday","Saturday","Sunday"};



void LCD_home_screen(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af02      	add	r7, sp, #8
	  ILI9341_Init();//initial driver setup to drive ili9341
 8001ede:	f000 fe79 	bl	8002bd4 <ILI9341_Init>
	  ILI9341_Fill_Screen(BLACK);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f001 f848 	bl	8002f78 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Hollow_Rectangle_Coord(0,0,110,60,YELLOW);
 8001ee8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	233c      	movs	r3, #60	; 0x3c
 8001ef0:	226e      	movs	r2, #110	; 0x6e
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f001 f9f9 	bl	80032ec <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Hollow_Rectangle_Coord(129,0,239,60,YELLOW);
 8001efa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	233c      	movs	r3, #60	; 0x3c
 8001f02:	22ef      	movs	r2, #239	; 0xef
 8001f04:	2100      	movs	r1, #0
 8001f06:	2081      	movs	r0, #129	; 0x81
 8001f08:	f001 f9f0 	bl	80032ec <ILI9341_Draw_Hollow_Rectangle_Coord>
	  ILI9341_Draw_Text("Temp data ( C ):", 10, 10, WHITE, 1, BLACK);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f18:	220a      	movs	r2, #10
 8001f1a:	210a      	movs	r1, #10
 8001f1c:	480e      	ldr	r0, [pc, #56]	; (8001f58 <LCD_home_screen+0x80>)
 8001f1e:	f001 fafb 	bl	8003518 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("25.11", 10, 30, WHITE, 3, BLACK);
 8001f22:	2300      	movs	r3, #0
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	2303      	movs	r3, #3
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2e:	221e      	movs	r2, #30
 8001f30:	210a      	movs	r1, #10
 8001f32:	480a      	ldr	r0, [pc, #40]	; (8001f5c <LCD_home_screen+0x84>)
 8001f34:	f001 faf0 	bl	8003518 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("10 11" ,2, 280, WHITE, 5, BLACK);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <LCD_home_screen+0x88>)
 8001f4c:	f001 fae4 	bl	8003518 <ILI9341_Draw_Text>

}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0800c22c 	.word	0x0800c22c
 8001f5c:	0800c240 	.word	0x0800c240
 8001f60:	0800c248 	.word	0x0800c248

08001f64 <LCD_Print_Time>:

void LCD_Print_Time(uint8_t data_h, uint8_t data_m, uint8_t data_s)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	71bb      	strb	r3, [r7, #6]
 8001f72:	4613      	mov	r3, r2
 8001f74:	717b      	strb	r3, [r7, #5]
	GUI_SetColor(GUI_WHITE);
 8001f76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001f7a:	f004 fee4 	bl	8006d46 <GUI_SetColor>
	GUI_SetFont(&GUI_FontD32);
 8001f7e:	484a      	ldr	r0, [pc, #296]	; (80020a8 <LCD_Print_Time+0x144>)
 8001f80:	f004 fee4 	bl	8006d4c <GUI_SetFont>

	if(data_s != temp_sec)
 8001f84:	797a      	ldrb	r2, [r7, #5]
 8001f86:	4b49      	ldr	r3, [pc, #292]	; (80020ac <LCD_Print_Time+0x148>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d041      	beq.n	8002012 <LCD_Print_Time+0xae>
	{
		temp_sec = data_s;
 8001f8e:	797b      	ldrb	r3, [r7, #5]
 8001f90:	4a46      	ldr	r2, [pc, #280]	; (80020ac <LCD_Print_Time+0x148>)
 8001f92:	6013      	str	r3, [r2, #0]
		itoa((int)data_s,s,10);
 8001f94:	797b      	ldrb	r3, [r7, #5]
 8001f96:	220a      	movs	r2, #10
 8001f98:	4945      	ldr	r1, [pc, #276]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f009 ffbc 	bl	800bf18 <itoa>
		if (data_s < 10)
 8001fa0:	797b      	ldrb	r3, [r7, #5]
 8001fa2:	2b09      	cmp	r3, #9
 8001fa4:	d80f      	bhi.n	8001fc6 <LCD_Print_Time+0x62>
		{
			GUI_DispCharAt('0',SEC0_X,CLOCK_Y);
 8001fa6:	f240 121d 	movw	r2, #285	; 0x11d
 8001faa:	21b9      	movs	r1, #185	; 0xb9
 8001fac:	2030      	movs	r0, #48	; 0x30
 8001fae:	f005 f971 	bl	8007294 <GUI_DispCharAt>
			GUI_DispCharAt(s[0],SEC1_X,CLOCK_Y);
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f240 121d 	movw	r2, #285	; 0x11d
 8001fbc:	21d7      	movs	r1, #215	; 0xd7
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 f968 	bl	8007294 <GUI_DispCharAt>
 8001fc4:	e025      	b.n	8002012 <LCD_Print_Time+0xae>
		}
		else
		{
			if (s[0] != temp_s[0])
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <LCD_Print_Time+0x150>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d00c      	beq.n	8001fec <LCD_Print_Time+0x88>
			{
			GUI_DispCharAt(s[0],SEC0_X,CLOCK_Y);
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f240 121d 	movw	r2, #285	; 0x11d
 8001fdc:	21b9      	movs	r1, #185	; 0xb9
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 f958 	bl	8007294 <GUI_DispCharAt>
			temp_s[0] = s[0];
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <LCD_Print_Time+0x150>)
 8001fea:	701a      	strb	r2, [r3, #0]
			}
			if (s[1] != temp_s[1])
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001fee:	785a      	ldrb	r2, [r3, #1]
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <LCD_Print_Time+0x150>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d00c      	beq.n	8002012 <LCD_Print_Time+0xae>
			{
				GUI_DispCharAt(s[1],SEC1_X,CLOCK_Y);
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <LCD_Print_Time+0x14c>)
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f240 121d 	movw	r2, #285	; 0x11d
 8002002:	21d7      	movs	r1, #215	; 0xd7
 8002004:	4618      	mov	r0, r3
 8002006:	f005 f945 	bl	8007294 <GUI_DispCharAt>
				temp_s[1] = s[1];
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <LCD_Print_Time+0x14c>)
 800200c:	785a      	ldrb	r2, [r3, #1]
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <LCD_Print_Time+0x150>)
 8002010:	705a      	strb	r2, [r3, #1]
			}

		}
	}
//-----------------------------------------------------//
	if(data_m != temp_min)
 8002012:	79ba      	ldrb	r2, [r7, #6]
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <LCD_Print_Time+0x154>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d041      	beq.n	80020a0 <LCD_Print_Time+0x13c>
	{
		temp_min = data_m;
 800201c:	79bb      	ldrb	r3, [r7, #6]
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <LCD_Print_Time+0x154>)
 8002020:	6013      	str	r3, [r2, #0]
		itoa((int)data_m, m , 10);
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	220a      	movs	r2, #10
 8002026:	4925      	ldr	r1, [pc, #148]	; (80020bc <LCD_Print_Time+0x158>)
 8002028:	4618      	mov	r0, r3
 800202a:	f009 ff75 	bl	800bf18 <itoa>
		if (data_m < 10)
 800202e:	79bb      	ldrb	r3, [r7, #6]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d80f      	bhi.n	8002054 <LCD_Print_Time+0xf0>
		{
			GUI_DispCharAt('0',MIN0_X,CLOCK_Y);
 8002034:	f240 121d 	movw	r2, #285	; 0x11d
 8002038:	215d      	movs	r1, #93	; 0x5d
 800203a:	2030      	movs	r0, #48	; 0x30
 800203c:	f005 f92a 	bl	8007294 <GUI_DispCharAt>
			GUI_DispCharAt(m[0],MIN1_X,CLOCK_Y);
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <LCD_Print_Time+0x158>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	f240 121d 	movw	r2, #285	; 0x11d
 800204a:	217b      	movs	r1, #123	; 0x7b
 800204c:	4618      	mov	r0, r3
 800204e:	f005 f921 	bl	8007294 <GUI_DispCharAt>
		}

	}
//-----------------------------------------------------//

}
 8002052:	e025      	b.n	80020a0 <LCD_Print_Time+0x13c>
			if (m[0] != temp_m[0])
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <LCD_Print_Time+0x158>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <LCD_Print_Time+0x15c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d00c      	beq.n	800207a <LCD_Print_Time+0x116>
				GUI_DispCharAt(m[0],MIN0_X,CLOCK_Y);
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <LCD_Print_Time+0x158>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f240 121d 	movw	r2, #285	; 0x11d
 800206a:	215d      	movs	r1, #93	; 0x5d
 800206c:	4618      	mov	r0, r3
 800206e:	f005 f911 	bl	8007294 <GUI_DispCharAt>
				temp_m[0] = m[0];
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <LCD_Print_Time+0x158>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <LCD_Print_Time+0x15c>)
 8002078:	701a      	strb	r2, [r3, #0]
			if (m[1] != temp_m[1])
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <LCD_Print_Time+0x158>)
 800207c:	785a      	ldrb	r2, [r3, #1]
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <LCD_Print_Time+0x15c>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	429a      	cmp	r2, r3
 8002084:	d00c      	beq.n	80020a0 <LCD_Print_Time+0x13c>
				GUI_DispCharAt(m[1],MIN1_X,CLOCK_Y);
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <LCD_Print_Time+0x158>)
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f240 121d 	movw	r2, #285	; 0x11d
 8002090:	217b      	movs	r1, #123	; 0x7b
 8002092:	4618      	mov	r0, r3
 8002094:	f005 f8fe 	bl	8007294 <GUI_DispCharAt>
				temp_m[1] = m[1];
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LCD_Print_Time+0x158>)
 800209a:	785a      	ldrb	r2, [r3, #1]
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <LCD_Print_Time+0x15c>)
 800209e:	705a      	strb	r2, [r3, #1]
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	08010458 	.word	0x08010458
 80020ac:	200002ac 	.word	0x200002ac
 80020b0:	200002b0 	.word	0x200002b0
 80020b4:	200002b4 	.word	0x200002b4
 80020b8:	200002b8 	.word	0x200002b8
 80020bc:	200002bc 	.word	0x200002bc
 80020c0:	200002c0 	.word	0x200002c0

080020c4 <LCD_Print_Weekday>:

void LCD_Print_Weekday (uint8_t week)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	GUI_SetColor(GUI_ORANGE);
 80020ce:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 80020d2:	f004 fe38 	bl	8006d46 <GUI_SetColor>
	GUI_SetFont(&GUI_Font20_1);
 80020d6:	481f      	ldr	r0, [pc, #124]	; (8002154 <LCD_Print_Weekday+0x90>)
 80020d8:	f004 fe38 	bl	8006d4c <GUI_SetFont>
	GUI_GotoXY(0,255);
 80020dc:	21ff      	movs	r1, #255	; 0xff
 80020de:	2000      	movs	r0, #0
 80020e0:	f004 fde8 	bl	8006cb4 <GUI_GotoXY>
	switch(week)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d82e      	bhi.n	8002148 <LCD_Print_Weekday+0x84>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <LCD_Print_Weekday+0x2c>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002149 	.word	0x08002149
 80020f4:	08002111 	.word	0x08002111
 80020f8:	08002119 	.word	0x08002119
 80020fc:	08002121 	.word	0x08002121
 8002100:	08002129 	.word	0x08002129
 8002104:	08002131 	.word	0x08002131
 8002108:	08002139 	.word	0x08002139
 800210c:	08002141 	.word	0x08002141
	{
	case 0 :						break;
	case 1 : GUI_DispString("MON");	break;
 8002110:	4811      	ldr	r0, [pc, #68]	; (8002158 <LCD_Print_Weekday+0x94>)
 8002112:	f005 f8c7 	bl	80072a4 <GUI_DispString>
 8002116:	e018      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 2 : GUI_DispString("TUE");	break;
 8002118:	4810      	ldr	r0, [pc, #64]	; (800215c <LCD_Print_Weekday+0x98>)
 800211a:	f005 f8c3 	bl	80072a4 <GUI_DispString>
 800211e:	e014      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 3 : GUI_DispString("WED");	break;
 8002120:	480f      	ldr	r0, [pc, #60]	; (8002160 <LCD_Print_Weekday+0x9c>)
 8002122:	f005 f8bf 	bl	80072a4 <GUI_DispString>
 8002126:	e010      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 4 : GUI_DispString("THU");	break;
 8002128:	480e      	ldr	r0, [pc, #56]	; (8002164 <LCD_Print_Weekday+0xa0>)
 800212a:	f005 f8bb 	bl	80072a4 <GUI_DispString>
 800212e:	e00c      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 5 : GUI_DispString("FRI");	break;
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <LCD_Print_Weekday+0xa4>)
 8002132:	f005 f8b7 	bl	80072a4 <GUI_DispString>
 8002136:	e008      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 6 : GUI_DispString("SAT");	break;
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <LCD_Print_Weekday+0xa8>)
 800213a:	f005 f8b3 	bl	80072a4 <GUI_DispString>
 800213e:	e004      	b.n	800214a <LCD_Print_Weekday+0x86>
	case 7 : GUI_DispString("SUN");	break;
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <LCD_Print_Weekday+0xac>)
 8002142:	f005 f8af 	bl	80072a4 <GUI_DispString>
 8002146:	e000      	b.n	800214a <LCD_Print_Weekday+0x86>
	default : 						break;
 8002148:	bf00      	nop
	}
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0800dcc0 	.word	0x0800dcc0
 8002158:	0800c250 	.word	0x0800c250
 800215c:	0800c254 	.word	0x0800c254
 8002160:	0800c258 	.word	0x0800c258
 8002164:	0800c25c 	.word	0x0800c25c
 8002168:	0800c260 	.word	0x0800c260
 800216c:	0800c264 	.word	0x0800c264
 8002170:	0800c268 	.word	0x0800c268

08002174 <spi1_tx_8b>:



/*SPI1 Tx*/
void spi1_tx_8b(uint8_t TxData)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	while(!((SPI1->SR)&(SPI_SR_TXE))); 		//Check Tx Buffer Empty Flag
 800217e:	bf00      	nop
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <spi1_tx_8b+0x54>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f9      	beq.n	8002180 <spi1_tx_8b+0xc>
	__IO uint8_t *spidr = ((__IO uint8_t *)&SPI1->DR);	//Put data to DR register
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <spi1_tx_8b+0x58>)
 800218e:	60fb      	str	r3, [r7, #12]
	*spidr = TxData;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	701a      	strb	r2, [r3, #0]
	while(!((SPI1->SR)&(SPI_SR_TXE)));		//Check Tx Buffer Empty Flag
 8002196:	bf00      	nop
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <spi1_tx_8b+0x54>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f9      	beq.n	8002198 <spi1_tx_8b+0x24>
	while (((SPI1->SR)&(SPI_SR_BSY)));		//Check SPI Not Busy Flag
 80021a4:	bf00      	nop
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <spi1_tx_8b+0x54>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f9      	bne.n	80021a6 <spi1_tx_8b+0x32>
	//Clear the Overrun flag by reading DR and SR
	(void)SPI1->DR; //Dummy read
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <spi1_tx_8b+0x54>)
 80021b4:	68db      	ldr	r3, [r3, #12]
	(void)SPI1->SR;	//Dummy read
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <spi1_tx_8b+0x54>)
 80021b8:	689b      	ldr	r3, [r3, #8]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40013000 	.word	0x40013000
 80021cc:	4001300c 	.word	0x4001300c

080021d0 <spi1_rx_8b>:


/*SPI1 Rx*/
uint8_t spi1_rx_8b(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
	while (((SPI1->SR)&(SPI_SR_BSY)));//Check SPI Not Busy Flag
 80021d6:	bf00      	nop
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <spi1_rx_8b+0x40>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f9      	bne.n	80021d8 <spi1_rx_8b+0x8>

	__IO uint8_t *spirdr = ((__IO uint8_t *)&SPI1->DR);	//Put data to DR register
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <spi1_rx_8b+0x44>)
 80021e6:	607b      	str	r3, [r7, #4]
	*spirdr = 0xFF; // Dummy write
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	701a      	strb	r2, [r3, #0]

	while (!((SPI1->SR) &(SPI_SR_RXNE)));//Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 80021ee:	bf00      	nop
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <spi1_rx_8b+0x40>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f9      	beq.n	80021f0 <spi1_rx_8b+0x20>
	uint8_t data =  (uint8_t)(SPI1->DR);
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <spi1_rx_8b+0x40>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	70fb      	strb	r3, [r7, #3]
	return data;
 8002202:	78fb      	ldrb	r3, [r7, #3]
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40013000 	.word	0x40013000
 8002214:	4001300c 	.word	0x4001300c

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <HAL_MspInit+0x4c>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_MspInit+0x4c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_MspInit+0x4c>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_ADC_MspInit+0x7c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d127      	bne.n	80022da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_ADC_MspInit+0x80>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022c2:	2302      	movs	r3, #2
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c6:	2303      	movs	r3, #3
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_ADC_MspInit+0x84>)
 80022d6:	f001 ff73 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012000 	.word	0x40012000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000

080022f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_I2C_MspInit+0xc4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d14b      	bne.n	80023aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800234a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002350:	2312      	movs	r3, #18
 8002352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800235c:	2304      	movs	r3, #4
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	4815      	ldr	r0, [pc, #84]	; (80023bc <HAL_I2C_MspInit+0xcc>)
 8002368:	f001 ff2a 	bl	80041c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800236c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002372:	2312      	movs	r3, #18
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800237e:	2304      	movs	r3, #4
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <HAL_I2C_MspInit+0xd0>)
 800238a:	f001 ff19 	bl	80041c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002398:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40005c00 	.word	0x40005c00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020000 	.word	0x40020000

080023c4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <LL_EXTI_ClearFlag_0_31+0x1c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6153      	str	r3, [r2, #20]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40013c00 	.word	0x40013c00

08002410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <NMI_Handler+0x4>

08002416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <HardFault_Handler+0x4>

0800241c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <MemManage_Handler+0x4>

08002422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <BusFault_Handler+0x4>

08002428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <UsageFault_Handler+0x4>

0800242e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245c:	f001 fb24 	bl	8003aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <SysTick_Handler+0x24>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <SysTick_Handler+0x24>)
 8002468:	6013      	str	r3, [r2, #0]
  tick++;
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Handler+0x28>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b03      	ldr	r3, [pc, #12]	; (8002480 <SysTick_Handler+0x28>)
 8002474:	701a      	strb	r2, [r3, #0]
  }*/



  /* USER CODE END SysTick_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200082c4 	.word	0x200082c4
 8002480:	200002c2 	.word	0x200002c2

08002484 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
	//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
	 // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff ff9b 	bl	80023c4 <LL_EXTI_IsActiveFlag_0_31>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff ffab 	bl	80023f0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}

0800249e <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
	}*/

  /* USER CODE END USART2_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250a:	f7ff ffd7 	bl	80024bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f009 fcc7 	bl	800bea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe fff7 	bl	8001504 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002524:	08010eec 	.word	0x08010eec
  ldr r2, =_sbss
 8002528:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 800252c:	20008488 	.word	0x20008488

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>

08002532 <DS_I2C_start>:

rtc_time_t rtc;

/* SETUP CODE BEGIN	*/
void DS_I2C_start (void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
	//i2c_start(I2C1,10);
	i2c1_start();
 8002536:	f7fe fbfb 	bl	8000d30 <i2c1_start>
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}

0800253e <DS_I2C_stop>:

void DS_I2C_stop (void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
	//i2c_stop(I2C1);
	i2c1_stop();
 8002542:	f7fe fc5f 	bl	8000e04 <i2c1_stop>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}

0800254a <DS_I2C_write>:

void DS_I2C_write (uint8_t i2c_data)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
	i2c1_write (i2c_data);
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc08 	bl	8000d6c <i2c1_write>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <DS_I2C_read>:

uint8_t DS_I2C_read (void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	uint8_t dsdata = i2c1_read();
 800256a:	f7fe fc33 	bl	8000dd4 <i2c1_read>
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
	return dsdata;
 8002572:	79fb      	ldrb	r3, [r7, #7]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <DS_I2C_write_add>:

void DS_I2C_write_add (uint8_t addr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
	i2c1_write_adress (addr);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fc07 	bl	8000d9c <i2c1_write_adress>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <DS3231_Read>:

/* SETUP CODE END	*/

uint8_t DS3231_Read (uint8_t addr)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
	DS_I2C_start(); // start
 80025a0:	f7ff ffc7 	bl	8002532 <DS_I2C_start>

	DS_I2C_write_add(DS3231_ADDRESS);
 80025a4:	20d0      	movs	r0, #208	; 0xd0
 80025a6:	f7ff ffe9 	bl	800257c <DS_I2C_write_add>
	DS_I2C_write(addr);
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffcc 	bl	800254a <DS_I2C_write>

	DS_I2C_start(); //repeated start
 80025b2:	f7ff ffbe 	bl	8002532 <DS_I2C_start>

	DS_I2C_write_add(DS3231_ADDRESS | 0x01);
 80025b6:	20d1      	movs	r0, #209	; 0xd1
 80025b8:	f7ff ffe0 	bl	800257c <DS_I2C_write_add>
	uint8_t data = DS_I2C_read();
 80025bc:	f7ff ffd2 	bl	8002564 <DS_I2C_read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

	DS_I2C_stop();	//stop
 80025c4:	f7ff ffbb 	bl	800253e <DS_I2C_stop>
	return data;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <DS3231_Write>:

void DS3231_Write (uint8_t addr, uint8_t data)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	460a      	mov	r2, r1
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	4613      	mov	r3, r2
 80025e0:	71bb      	strb	r3, [r7, #6]
	DS_I2C_start(); // start
 80025e2:	f7ff ffa6 	bl	8002532 <DS_I2C_start>

	DS_I2C_write_add(DS3231_ADDRESS);
 80025e6:	20d0      	movs	r0, #208	; 0xd0
 80025e8:	f7ff ffc8 	bl	800257c <DS_I2C_write_add>
	DS_I2C_write(addr);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ffab 	bl	800254a <DS_I2C_write>
	DS_I2C_write(data);
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ffa7 	bl	800254a <DS_I2C_write>
	//DS_I2C_start(); //repeated start

	//DS_I2C_write_add(DS3231_ADDRESS | 0x01);
	//uint8_t data = DS_I2C_read();

	DS_I2C_stop();	//stop
 80025fc:	f7ff ff9f 	bl	800253e <DS_I2C_stop>
	//return data;
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <DS3231_Get_Sec>:


uint8_t DS3231_Get_Sec (void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	uint8_t sec = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	71fb      	strb	r3, [r7, #7]
	sec = B2D(DS3231_Read(DS3231_REG_SECOND));
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff ffbf 	bl	8002596 <DS3231_Read>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f860 	bl	80026e0 <B2D>
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
	return sec;
 8002624:	79fb      	ldrb	r3, [r7, #7]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <DS3231_Get_Min>:

uint8_t DS3231_Get_Min (void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
	uint8_t min = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	71fb      	strb	r3, [r7, #7]
	min = B2D(DS3231_Read(DS3231_REG_MINUTE));
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff ffac 	bl	8002596 <DS3231_Read>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f84d 	bl	80026e0 <B2D>
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
	return min;
 800264a:	79fb      	ldrb	r3, [r7, #7]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <DS3231_Get_Hours>:

uint8_t DS3231_Get_Hours (void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
	uint8_t hours = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	71fb      	strb	r3, [r7, #7]
	hours = B2D(DS3231_Read(DS3231_REG_HOUR));
 800265e:	2002      	movs	r0, #2
 8002660:	f7ff ff99 	bl	8002596 <DS3231_Read>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f83a 	bl	80026e0 <B2D>
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
	return hours;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <DS3231_Get_Week>:


uint8_t DS3231_Get_Week (void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
	uint8_t week = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	71fb      	strb	r3, [r7, #7]
	week = DS3231_Read(DS3231_REG_WEEK);
 8002684:	2003      	movs	r0, #3
 8002686:	f7ff ff86 	bl	8002596 <DS3231_Read>
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
	return week;
 800268e:	79fb      	ldrb	r3, [r7, #7]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <DS3231_Set_Hours>:

//----------set functions--------------------------//
void DS3231_Set_Hours (uint8_t h)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	DS3231_Write(DS3231_REG_HOUR,D2B(h));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f835 	bl	8002714 <D2B>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	2002      	movs	r0, #2
 80026b0:	f7ff ff8f 	bl	80025d2 <DS3231_Write>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <DS3231_Set_Min>:

void DS3231_Set_Min (uint8_t m)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]

	DS3231_Write(DS3231_REG_MINUTE,D2B(m));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f823 	bl	8002714 <D2B>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ff7d 	bl	80025d2 <DS3231_Write>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <B2D>:
}



static uint8_t B2D(uint8_t bcd)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4413      	add	r3, r2
 8002704:	b2db      	uxtb	r3, r3
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <D2B+0x44>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	b258      	sxtb	r0, r3
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <D2B+0x44>)
 8002732:	fba3 1302 	umull	r1, r3, r3, r2
 8002736:	08d9      	lsrs	r1, r3, #3
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	b25b      	sxtb	r3, r3
 8002746:	4303      	orrs	r3, r0
 8002748:	b25b      	sxtb	r3, r3
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	cccccccd 	.word	0xcccccccd

0800275c <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <GUI_X_Config+0x18>)
 8002766:	f004 f823 	bl	80067b0 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 800276a:	4803      	ldr	r0, [pc, #12]	; (8002778 <GUI_X_Config+0x1c>)
 800276c:	f004 fb84 	bl	8006e78 <GUI_SetDefaultFont>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200002c4 	.word	0x200002c4
 8002778:	0800fd40 	.word	0x0800fd40

0800277c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LcdWriteReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  // ... TBD by user
	ILI9341_Write_Command(Data);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f8e0 	bl	800295c <ILI9341_Write_Command>

}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <LcdWriteData>:
*       LcdWriteData
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  // ... TBD by user
	ILI9341_Write_Data(Data);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f8f5 	bl	80029a0 <ILI9341_Write_Data>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 80027c8:	e007      	b.n	80027da <LcdWriteDataMultiple+0x1c>
    // ... TBD by user
	  ILI9341_Write_Data(*pData);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8e6 	bl	80029a0 <ILI9341_Write_Data>
	  pData++;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3301      	adds	r3, #1
 80027d8:	607b      	str	r3, [r7, #4]
  while (NumItems--) {
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	603a      	str	r2, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f2      	bne.n	80027ca <LcdWriteDataMultiple+0xc>
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	while (NumItems--) {
 80027f8:	bf00      	nop
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	603a      	str	r2, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1fa      	bne.n	80027fa <LcdReadDataMultiple+0xc>
    // ... TBD by user
	 // pData++;
	}
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b0a0      	sub	sp, #128	; 0x80
 8002818:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800281a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800282a:	463b      	mov	r3, r7
 800282c:	2268      	movs	r2, #104	; 0x68
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f009 fb9b 	bl	800bf6c <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0); //default GUICC_565
 8002836:	2300      	movs	r3, #0
 8002838:	2200      	movs	r2, #0
 800283a:	4915      	ldr	r1, [pc, #84]	; (8002890 <LCD_X_Config+0x7c>)
 800283c:	4815      	ldr	r0, [pc, #84]	; (8002894 <LCD_X_Config+0x80>)
 800283e:	f004 fccf 	bl	80071e0 <GUI_DEVICE_CreateAndLink>
 8002842:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8002844:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002848:	21f0      	movs	r1, #240	; 0xf0
 800284a:	2000      	movs	r0, #0
 800284c:	f005 fd66 	bl	800831c <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8002850:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002854:	21f0      	movs	r1, #240	; 0xf0
 8002856:	2000      	movs	r0, #0
 8002858:	f005 fd78 	bl	800834c <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_MIRROR_X;
 800285c:	2301      	movs	r3, #1
 800285e:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8002860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002864:	4619      	mov	r1, r3
 8002866:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002868:	f006 f871 	bl	800894e <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <LCD_X_Config+0x84>)
 800286e:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <LCD_X_Config+0x88>)
 8002872:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1 = LcdWriteDataMultiple;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <LCD_X_Config+0x8c>)
 8002876:	60fb      	str	r3, [r7, #12]
  PortAPI.pfReadM8_A1  = LcdReadDataMultiple;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <LCD_X_Config+0x90>)
 800287a:	61fb      	str	r3, [r7, #28]
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);
 800287c:	4639      	mov	r1, r7
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <LCD_X_Config+0x94>)
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <LCD_X_Config+0x98>)
 8002882:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002884:	f006 f881 	bl	800898a <GUIDRV_FlexColor_SetFunc>
}
 8002888:	bf00      	nop
 800288a:	3780      	adds	r7, #128	; 0x80
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	0800c270 	.word	0x0800c270
 8002894:	0800c6a4 	.word	0x0800c6a4
 8002898:	0800278b 	.word	0x0800278b
 800289c:	080027a5 	.word	0x080027a5
 80028a0:	080027bf 	.word	0x080027bf
 80028a4:	080027ef 	.word	0x080027ef
 80028a8:	0800905d 	.word	0x0800905d
 80028ac:	080093f1 	.word	0x080093f1

080028b0 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d103      	bne.n	80028ca <LCD_X_DisplayDriver+0x1a>
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...

	ILI9341_Init();
 80028c2:	f000 f987 	bl	8002bd4 <ILI9341_Init>
    return 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e003      	b.n	80028d2 <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	617b      	str	r3, [r7, #20]
  }
  return r;
 80028d0:	697b      	ldr	r3, [r7, #20]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <ILI9341_SPI_Init>:

//void ILI9341_SPI_Send(unsigned char TxData);

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	  SPI2->CR2 |= SPI_CR2_SSOE;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <ILI9341_SPI_Init+0x34>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <ILI9341_SPI_Init+0x34>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6053      	str	r3, [r2, #4]
	  SPI2->CR1 |= SPI_CR1_SPE; // Enable SPI1
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <ILI9341_SPI_Init+0x34>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <ILI9341_SPI_Init+0x34>)
 80028f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f6:	6013      	str	r3, [r2, #0]
	  LCD_CS_Disable;			//CS OFF
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <ILI9341_SPI_Init+0x38>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a05      	ldr	r2, [pc, #20]	; (8002914 <ILI9341_SPI_Init+0x38>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6193      	str	r3, [r2, #24]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40003800 	.word	0x40003800
 8002914:	40020400 	.word	0x40020400

08002918 <ILI9341_SPI_Send>:

}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char TxData)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
	while(!((SPI2->SR)&(SPI_SR_TXE))); 		//Check Tx Buffer Empty Flag
 8002922:	bf00      	nop
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <ILI9341_SPI_Send+0x3c>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f9      	beq.n	8002924 <ILI9341_SPI_Send+0xc>
	//__IO uint8_t *spidr = ((__IO uint8_t *)&SPI2->DR);	//Put data to DR register
	//*spidr = TxData;
	*(uint8_t*)&(SPI2->DR) = TxData;
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <ILI9341_SPI_Send+0x40>)
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	7013      	strb	r3, [r2, #0]
	//*(uint8_t*)&(SPIx->DR) = TxData;

	while(!((SPI2->SR)&(SPI_SR_TXE)));		//Check Tx Buffer Empty Flag
 8002936:	bf00      	nop
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <ILI9341_SPI_Send+0x3c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f9      	beq.n	8002938 <ILI9341_SPI_Send+0x20>
	//while (((SPI2->SR)&(SPI_SR_BSY)));		//Check SPI Not Busy Flag
	//Clear the Overrun flag by reading DR and SR
	//(void)SPI2->DR; //Dummy read
	(void)SPI2->SR; //Dummy read
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <ILI9341_SPI_Send+0x3c>)
 8002946:	689b      	ldr	r3, [r3, #8]
	//while(!((SPI2->SR)&(SPI_SR_TXE)));		//Check Tx Buffer Empty Flag
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40003800 	.word	0x40003800
 8002958:	4000380c 	.word	0x4000380c

0800295c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	LCD_CS_Enable;
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <ILI9341_Write_Command+0x40>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <ILI9341_Write_Command+0x40>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6193      	str	r3, [r2, #24]
	LCD_DC_Com;
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <ILI9341_Write_Command+0x40>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <ILI9341_Write_Command+0x40>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(Command);
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffc9 	bl	8002918 <ILI9341_SPI_Send>
	LCD_CS_Disable;
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <ILI9341_Write_Command+0x40>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <ILI9341_Write_Command+0x40>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6193      	str	r3, [r2, #24]
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40020400 	.word	0x40020400

080029a0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_Enable;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6193      	str	r3, [r2, #24]
	LCD_DC_Data;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(Data);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ffa7 	bl	8002918 <ILI9341_SPI_Send>
	LCD_CS_Disable;
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <ILI9341_Write_Data+0x40>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6193      	str	r3, [r2, #24]
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020400 	.word	0x40020400

080029e4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4604      	mov	r4, r0
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	4603      	mov	r3, r0
 80029f8:	80bb      	strh	r3, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	807b      	strh	r3, [r7, #2]
 80029fe:	4613      	mov	r3, r2
 8002a00:	803b      	strh	r3, [r7, #0]
	LCD_CS_Enable;
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6193      	str	r3, [r2, #24]

	LCD_DC_Com;
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4a2f      	ldr	r2, [pc, #188]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2A);
 8002a1a:	202a      	movs	r0, #42	; 0x2a
 8002a1c:	f7ff ff7c 	bl	8002918 <ILI9341_SPI_Send>
	LCD_DC_Data;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6193      	str	r3, [r2, #24]
//	ILI9341_SPI_Send16(X1);
//	ILI9341_SPI_Send16(X2);
	ILI9341_SPI_Send(X1>>8);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff6f 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(X1);
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff6a 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(X2>>8);
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff63 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(X2);
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff5e 	bl	8002918 <ILI9341_SPI_Send>

	LCD_DC_Com;
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2B);
 8002a68:	202b      	movs	r0, #43	; 0x2b
 8002a6a:	f7ff ff55 	bl	8002918 <ILI9341_SPI_Send>
	LCD_DC_Data;
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(Y1>>8);
 8002a7a:	88bb      	ldrh	r3, [r7, #4]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff48 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(Y1);
 8002a88:	88bb      	ldrh	r3, [r7, #4]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff43 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(Y2>>8);
 8002a92:	883b      	ldrh	r3, [r7, #0]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff3c 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(Y2);
 8002aa0:	883b      	ldrh	r3, [r7, #0]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff37 	bl	8002918 <ILI9341_SPI_Send>


	LCD_DC_Com;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2C);
 8002ab6:	202c      	movs	r0, #44	; 0x2c
 8002ab8:	f7ff ff2e 	bl	8002918 <ILI9341_SPI_Send>

	LCD_CS_Disable;
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <ILI9341_Set_Address+0xec>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6193      	str	r3, [r2, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	LCD_RESET_ON;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <ILI9341_Reset+0x38>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <ILI9341_Reset+0x38>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	6193      	str	r3, [r2, #24]
	HAL_Delay(200);
 8002ae4:	20c8      	movs	r0, #200	; 0xc8
 8002ae6:	f000 ffff 	bl	8003ae8 <HAL_Delay>
	LCD_CS_Enable;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <ILI9341_Reset+0x38>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <ILI9341_Reset+0x38>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6193      	str	r3, [r2, #24]
	HAL_Delay(200);
 8002af6:	20c8      	movs	r0, #200	; 0xc8
 8002af8:	f000 fff6 	bl	8003ae8 <HAL_Delay>
	LCD_RESET_OFF;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <ILI9341_Reset+0x38>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a02      	ldr	r2, [pc, #8]	; (8002b0c <ILI9341_Reset+0x38>)
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6193      	str	r3, [r2, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40020400 	.word	0x40020400

08002b10 <ILI9341_Set_Rotation>:

/*Set rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	uint8_t screen_rotation = Rotation;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 8002b1e:	2036      	movs	r0, #54	; 0x36
 8002b20:	f7ff ff1c 	bl	800295c <ILI9341_Write_Command>
	HAL_Delay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f000 ffdf 	bl	8003ae8 <HAL_Delay>

	switch(screen_rotation)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d837      	bhi.n	8002ba0 <ILI9341_Set_Rotation+0x90>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <ILI9341_Set_Rotation+0x28>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b5f 	.word	0x08002b5f
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002b8b 	.word	0x08002b8b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002b48:	2048      	movs	r0, #72	; 0x48
 8002b4a:	f7ff ff29 	bl	80029a0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b50:	22f0      	movs	r2, #240	; 0xf0
 8002b52:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b5a:	801a      	strh	r2, [r3, #0]
			break;
 8002b5c:	e021      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f7ff ff1e 	bl	80029a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b6e:	22f0      	movs	r2, #240	; 0xf0
 8002b70:	801a      	strh	r2, [r3, #0]
			break;
 8002b72:	e016      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002b74:	2088      	movs	r0, #136	; 0x88
 8002b76:	f7ff ff13 	bl	80029a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b7c:	22f0      	movs	r2, #240	; 0xf0
 8002b7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b86:	801a      	strh	r2, [r3, #0]
			break;
 8002b88:	e00b      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002b8a:	20e8      	movs	r0, #232	; 0xe8
 8002b8c:	f7ff ff08 	bl	80029a0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <ILI9341_Set_Rotation+0x9c>)
 8002b92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <ILI9341_Set_Rotation+0xa0>)
 8002b9a:	22f0      	movs	r2, #240	; 0xf0
 8002b9c:	801a      	strh	r2, [r3, #0]
			break;
 8002b9e:	e000      	b.n	8002ba2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002ba0:	bf00      	nop
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000003e 	.word	0x2000003e
 8002bb0:	2000003c 	.word	0x2000003c

08002bb4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
	LCD_RESET_OFF;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <ILI9341_Enable+0x1c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <ILI9341_Enable+0x1c>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6193      	str	r3, [r2, #24]
	//LCD_LED_ON;
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8002bd8:	f7ff ffec 	bl	8002bb4 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8002bdc:	f7ff fe7e 	bl	80028dc <ILI9341_SPI_Init>
	ILI9341_Reset();
 8002be0:	f7ff ff78 	bl	8002ad4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff feb9 	bl	800295c <ILI9341_Write_Command>
	HAL_Delay(10);
 8002bea:	200a      	movs	r0, #10
 8002bec:	f000 ff7c 	bl	8003ae8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8002bf0:	20cb      	movs	r0, #203	; 0xcb
 8002bf2:	f7ff feb3 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8002bf6:	2039      	movs	r0, #57	; 0x39
 8002bf8:	f7ff fed2 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8002bfc:	202c      	movs	r0, #44	; 0x2c
 8002bfe:	f7ff fecf 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff fecc 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8002c08:	2034      	movs	r0, #52	; 0x34
 8002c0a:	f7ff fec9 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7ff fec6 	bl	80029a0 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8002c14:	20cf      	movs	r0, #207	; 0xcf
 8002c16:	f7ff fea1 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7ff fec0 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002c20:	20c1      	movs	r0, #193	; 0xc1
 8002c22:	f7ff febd 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8002c26:	2030      	movs	r0, #48	; 0x30
 8002c28:	f7ff feba 	bl	80029a0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8002c2c:	20e8      	movs	r0, #232	; 0xe8
 8002c2e:	f7ff fe95 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8002c32:	2085      	movs	r0, #133	; 0x85
 8002c34:	f7ff feb4 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7ff feb1 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8002c3e:	2078      	movs	r0, #120	; 0x78
 8002c40:	f7ff feae 	bl	80029a0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8002c44:	20ea      	movs	r0, #234	; 0xea
 8002c46:	f7ff fe89 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7ff fea8 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7ff fea5 	bl	80029a0 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8002c56:	20ed      	movs	r0, #237	; 0xed
 8002c58:	f7ff fe80 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f7ff fe9f 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002c62:	2003      	movs	r0, #3
 8002c64:	f7ff fe9c 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8002c68:	2012      	movs	r0, #18
 8002c6a:	f7ff fe99 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8002c6e:	2081      	movs	r0, #129	; 0x81
 8002c70:	f7ff fe96 	bl	80029a0 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8002c74:	20f7      	movs	r0, #247	; 0xf7
 8002c76:	f7ff fe71 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8002c7a:	2020      	movs	r0, #32
 8002c7c:	f7ff fe90 	bl	80029a0 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8002c80:	20c0      	movs	r0, #192	; 0xc0
 8002c82:	f7ff fe6b 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8002c86:	2023      	movs	r0, #35	; 0x23
 8002c88:	f7ff fe8a 	bl	80029a0 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8002c8c:	20c1      	movs	r0, #193	; 0xc1
 8002c8e:	f7ff fe65 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8002c92:	2010      	movs	r0, #16
 8002c94:	f7ff fe84 	bl	80029a0 <ILI9341_Write_Data>
	//ILI9341_Write_Data(0x11);

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8002c98:	20c5      	movs	r0, #197	; 0xc5
 8002c9a:	f7ff fe5f 	bl	800295c <ILI9341_Write_Command>
	//ILI9341_Write_Data(0x3E);
	//ILI9341_Write_Data(0x28);
	ILI9341_Write_Data(0x30);
 8002c9e:	2030      	movs	r0, #48	; 0x30
 8002ca0:	f7ff fe7e 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8002ca4:	2030      	movs	r0, #48	; 0x30
 8002ca6:	f7ff fe7b 	bl	80029a0 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8002caa:	20c7      	movs	r0, #199	; 0xc7
 8002cac:	f7ff fe56 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x87);
 8002cb0:	2087      	movs	r0, #135	; 0x87
 8002cb2:	f7ff fe75 	bl	80029a0 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8002cb6:	2036      	movs	r0, #54	; 0x36
 8002cb8:	f7ff fe50 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8002cbc:	2048      	movs	r0, #72	; 0x48
 8002cbe:	f7ff fe6f 	bl	80029a0 <ILI9341_Write_Data>

	//Vertical Scrolling Start Address
	ILI9341_Write_Command(0x37);
 8002cc2:	2037      	movs	r0, #55	; 0x37
 8002cc4:	f7ff fe4a 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7ff fe69 	bl	80029a0 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8002cce:	203a      	movs	r0, #58	; 0x3a
 8002cd0:	f7ff fe44 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8002cd4:	2055      	movs	r0, #85	; 0x55
 8002cd6:	f7ff fe63 	bl	80029a0 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8002cda:	20b1      	movs	r0, #177	; 0xb1
 8002cdc:	f7ff fe3e 	bl	800295c <ILI9341_Write_Command>
	LCD_DC_Data;
 8002ce0:	4b4e      	ldr	r3, [pc, #312]	; (8002e1c <ILI9341_Init+0x248>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <ILI9341_Init+0x248>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	6193      	str	r3, [r2, #24]
	LCD_CS_Enable;
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <ILI9341_Init+0x248>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <ILI9341_Init+0x248>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff fe0d 	bl	8002918 <ILI9341_SPI_Send>
	//ILI9341_Write_Data(0x00);
	//ILI9341_Write_Data(0x1A);
	ILI9341_SPI_Send(0x18);
 8002cfe:	2018      	movs	r0, #24
 8002d00:	f7ff fe0a 	bl	8002918 <ILI9341_SPI_Send>
	LCD_CS_Disable;
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <ILI9341_Init+0x248>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <ILI9341_Init+0x248>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6193      	str	r3, [r2, #24]


	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8002d10:	20b6      	movs	r0, #182	; 0xb6
 8002d12:	f7ff fe23 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8002d16:	2008      	movs	r0, #8
 8002d18:	f7ff fe42 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8002d1c:	2082      	movs	r0, #130	; 0x82
 8002d1e:	f7ff fe3f 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8002d22:	2027      	movs	r0, #39	; 0x27
 8002d24:	f7ff fe3c 	bl	80029a0 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8002d28:	20f2      	movs	r0, #242	; 0xf2
 8002d2a:	f7ff fe17 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7ff fe36 	bl	80029a0 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8002d34:	2026      	movs	r0, #38	; 0x26
 8002d36:	f7ff fe11 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f7ff fe30 	bl	80029a0 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8002d40:	20e0      	movs	r0, #224	; 0xe0
 8002d42:	f7ff fe0b 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8002d46:	200f      	movs	r0, #15
 8002d48:	f7ff fe2a 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002d4c:	2031      	movs	r0, #49	; 0x31
 8002d4e:	f7ff fe27 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8002d52:	202b      	movs	r0, #43	; 0x2b
 8002d54:	f7ff fe24 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002d58:	200c      	movs	r0, #12
 8002d5a:	f7ff fe21 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002d5e:	200e      	movs	r0, #14
 8002d60:	f7ff fe1e 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002d64:	2008      	movs	r0, #8
 8002d66:	f7ff fe1b 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8002d6a:	204e      	movs	r0, #78	; 0x4e
 8002d6c:	f7ff fe18 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8002d70:	20f1      	movs	r0, #241	; 0xf1
 8002d72:	f7ff fe15 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8002d76:	2037      	movs	r0, #55	; 0x37
 8002d78:	f7ff fe12 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002d7c:	2007      	movs	r0, #7
 8002d7e:	f7ff fe0f 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8002d82:	2010      	movs	r0, #16
 8002d84:	f7ff fe0c 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f7ff fe09 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002d8e:	200e      	movs	r0, #14
 8002d90:	f7ff fe06 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8002d94:	2009      	movs	r0, #9
 8002d96:	f7ff fe03 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff fe00 	bl	80029a0 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8002da0:	20e1      	movs	r0, #225	; 0xe1
 8002da2:	f7ff fddb 	bl	800295c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff fdfa 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002dac:	200e      	movs	r0, #14
 8002dae:	f7ff fdf7 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8002db2:	2014      	movs	r0, #20
 8002db4:	f7ff fdf4 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002db8:	2003      	movs	r0, #3
 8002dba:	f7ff fdf1 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8002dbe:	2011      	movs	r0, #17
 8002dc0:	f7ff fdee 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002dc4:	2007      	movs	r0, #7
 8002dc6:	f7ff fdeb 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002dca:	2031      	movs	r0, #49	; 0x31
 8002dcc:	f7ff fde8 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002dd0:	20c1      	movs	r0, #193	; 0xc1
 8002dd2:	f7ff fde5 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8002dd6:	2048      	movs	r0, #72	; 0x48
 8002dd8:	f7ff fde2 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002ddc:	2008      	movs	r0, #8
 8002dde:	f7ff fddf 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002de2:	200f      	movs	r0, #15
 8002de4:	f7ff fddc 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002de8:	200c      	movs	r0, #12
 8002dea:	f7ff fdd9 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002dee:	2031      	movs	r0, #49	; 0x31
 8002df0:	f7ff fdd6 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8002df4:	2036      	movs	r0, #54	; 0x36
 8002df6:	f7ff fdd3 	bl	80029a0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002dfa:	200f      	movs	r0, #15
 8002dfc:	f7ff fdd0 	bl	80029a0 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8002e00:	2011      	movs	r0, #17
 8002e02:	f7ff fdab 	bl	800295c <ILI9341_Write_Command>
	HAL_Delay(120);
 8002e06:	2078      	movs	r0, #120	; 0x78
 8002e08:	f000 fe6e 	bl	8003ae8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8002e0c:	2029      	movs	r0, #41	; 0x29
 8002e0e:	f7ff fda5 	bl	800295c <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7ff fe7c 	bl	8002b10 <ILI9341_Set_Rotation>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020400 	.word	0x40020400

08002e20 <ILI9341_Draw_Colour_Burst>:
}*/

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e24:	b08d      	sub	sp, #52	; 0x34
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	6039      	str	r1, [r7, #0]
 8002e2c:	80fb      	strh	r3, [r7, #6]
 8002e2e:	466b      	mov	r3, sp
 8002e30:	461e      	mov	r6, r3
	//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
	if((Size*2) < BURST_MAX_SIZE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e3e:	d202      	bcs.n	8002e46 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e002      	b.n	8002e4c <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8002e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_DC_Data;//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	6193      	str	r3, [r2, #24]
	LCD_CS_Enable;//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	6193      	str	r3, [r2, #24]

	unsigned char chifted = Colour>>8;;
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[Buffer_Size];
 8002e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6e:	460b      	mov	r3, r1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	2300      	movs	r3, #0
 8002e76:	4688      	mov	r8, r1
 8002e78:	4699      	mov	r9, r3
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	460c      	mov	r4, r1
 8002e92:	461d      	mov	r5, r3
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	1dcb      	adds	r3, r1, #7
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	ebad 0d03 	sub.w	sp, sp, r3
 8002eae:	466b      	mov	r3, sp
 8002eb0:	3300      	adds	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb8:	e00d      	b.n	8002ed6 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	4413      	add	r3, r2
 8002ec0:	7ffa      	ldrb	r2, [r7, #31]
 8002ec2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	b2d1      	uxtb	r1, r2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3ed      	bcc.n	8002eba <ILI9341_Draw_Colour_Burst+0x9a>
	}

	uint32_t Sending_Size = Size * 2;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef8:	fb01 f202 	mul.w	r2, r1, r2
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]

	if(Sending_in_Block != 0)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d019      	beq.n	8002f3a <ILI9341_Draw_Colour_Burst+0x11a>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f0a:	e012      	b.n	8002f32 <ILI9341_Draw_Colour_Burst+0x112>
		{
		//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
			for (uint16_t i = 0; i < Buffer_Size; i++ )
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f10:	e008      	b.n	8002f24 <ILI9341_Draw_Colour_Burst+0x104>
			{
				ILI9341_SPI_Send(burst_buffer[i]);
 8002f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fcfd 	bl	8002918 <ILI9341_SPI_Send>
			for (uint16_t i = 0; i < Buffer_Size; i++ )
 8002f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f20:	3301      	adds	r3, #1
 8002f22:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d8f2      	bhi.n	8002f12 <ILI9341_Draw_Colour_Burst+0xf2>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	3301      	adds	r3, #1
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3e8      	bcc.n	8002f0c <ILI9341_Draw_Colour_Burst+0xec>
			}
		}
	}
	//REMAINDER!
	//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
	for (uint16_t r = 0; r < Remainder_from_block; r++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	843b      	strh	r3, [r7, #32]
 8002f3e:	e008      	b.n	8002f52 <ILI9341_Draw_Colour_Burst+0x132>
	{
		ILI9341_SPI_Send(burst_buffer[r]);
 8002f40:	8c3b      	ldrh	r3, [r7, #32]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fce6 	bl	8002918 <ILI9341_SPI_Send>
	for (uint16_t r = 0; r < Remainder_from_block; r++)
 8002f4c:	8c3b      	ldrh	r3, [r7, #32]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	843b      	strh	r3, [r7, #32]
 8002f52:	8c3b      	ldrh	r3, [r7, #32]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d8f2      	bhi.n	8002f40 <ILI9341_Draw_Colour_Burst+0x120>
	}
	LCD_CS_Disable;//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <ILI9341_Draw_Colour_Burst+0x154>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6193      	str	r3, [r2, #24]
 8002f66:	46b5      	mov	sp, r6
}
 8002f68:	bf00      	nop
 8002f6a:	3734      	adds	r7, #52	; 0x34
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f72:	bf00      	nop
 8002f74:	40020400 	.word	0x40020400

08002f78 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <ILI9341_Fill_Screen+0x44>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <ILI9341_Fill_Screen+0x48>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff fd27 	bl	80029e4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <ILI9341_Fill_Screen+0x44>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <ILI9341_Fill_Screen+0x48>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff36 	bl	8002e20 <ILI9341_Draw_Colour_Burst>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000003e 	.word	0x2000003e
 8002fc0:	2000003c 	.word	0x2000003c

08002fc4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	80bb      	strh	r3, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002fd6:	4b50      	ldr	r3, [pc, #320]	; (8003118 <ILI9341_Draw_Pixel+0x154>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	f080 8095 	bcs.w	800310e <ILI9341_Draw_Pixel+0x14a>
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <ILI9341_Draw_Pixel+0x158>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	88ba      	ldrh	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f080 808e 	bcs.w	800310e <ILI9341_Draw_Pixel+0x14a>

	uint8_t bufferX[4] = {X>>8, X, (X+1)>>8, (X+1)};
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	753b      	strb	r3, [r7, #20]
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	757b      	strb	r3, [r7, #21]
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	3301      	adds	r3, #1
 8003006:	121b      	asrs	r3, r3, #8
 8003008:	b2db      	uxtb	r3, r3
 800300a:	75bb      	strb	r3, [r7, #22]
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {Y>>8, Y, (Y+1)>>8, (Y+1)};
 8003016:	88bb      	ldrh	r3, [r7, #4]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b29b      	uxth	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	743b      	strb	r3, [r7, #16]
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	747b      	strb	r3, [r7, #17]
 8003026:	88bb      	ldrh	r3, [r7, #4]
 8003028:	3301      	adds	r3, #1
 800302a:	121b      	asrs	r3, r3, #8
 800302c:	b2db      	uxtb	r3, r3
 800302e:	74bb      	strb	r3, [r7, #18]
 8003030:	88bb      	ldrh	r3, [r7, #4]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {Colour>>8, Colour};
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	b29b      	uxth	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	733b      	strb	r3, [r7, #12]
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	737b      	strb	r3, [r7, #13]

	//ADDRESS
	LCD_CS_Enable;
 800304a:	4b35      	ldr	r3, [pc, #212]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6193      	str	r3, [r2, #24]

	LCD_DC_Com;
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	4a31      	ldr	r2, [pc, #196]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2A);
 8003062:	202a      	movs	r0, #42	; 0x2a
 8003064:	f7ff fc58 	bl	8002918 <ILI9341_SPI_Send>

	LCD_DC_Data;
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(bufferX[0]);
 8003074:	7d3b      	ldrb	r3, [r7, #20]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fc4e 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferX[1]);
 800307c:	7d7b      	ldrb	r3, [r7, #21]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fc4a 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferX[2]);
 8003084:	7dbb      	ldrb	r3, [r7, #22]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fc46 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferX[3]);
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fc42 	bl	8002918 <ILI9341_SPI_Send>

	//ADDRESS
	LCD_DC_Com;
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a21      	ldr	r2, [pc, #132]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2B);
 80030a0:	202b      	movs	r0, #43	; 0x2b
 80030a2:	f7ff fc39 	bl	8002918 <ILI9341_SPI_Send>

	LCD_DC_Data;
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(bufferY[0]);
 80030b2:	7c3b      	ldrb	r3, [r7, #16]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fc2f 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferY[1]);
 80030ba:	7c7b      	ldrb	r3, [r7, #17]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fc2b 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferY[2]);
 80030c2:	7cbb      	ldrb	r3, [r7, #18]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fc27 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferY[3]);
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fc23 	bl	8002918 <ILI9341_SPI_Send>


	//ADDRESS
	LCD_DC_Com;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	6193      	str	r3, [r2, #24]
	ILI9341_SPI_Send(0x2C);
 80030de:	202c      	movs	r0, #44	; 0x2c
 80030e0:	f7ff fc1a 	bl	8002918 <ILI9341_SPI_Send>

	//COLOUR
	LCD_DC_Data;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	6193      	str	r3, [r2, #24]

	ILI9341_SPI_Send(bufferC[0]);
 80030f0:	7b3b      	ldrb	r3, [r7, #12]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fc10 	bl	8002918 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(bufferC[1]);
 80030f8:	7b7b      	ldrb	r3, [r7, #13]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fc0c 	bl	8002918 <ILI9341_SPI_Send>
	//ILI9341_SPI_Send16(Colour);
	//ILI9341_SPI_Send16( (uint16_t)(bufferC[0]<<8) | (uint16_t)bufferC[1] );
	LCD_CS_Disable;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <ILI9341_Draw_Pixel+0x15c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6193      	str	r3, [r2, #24]
 800310c:	e000      	b.n	8003110 <ILI9341_Draw_Pixel+0x14c>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800310e:	bf00      	nop

}
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000003e 	.word	0x2000003e
 800311c:	2000003c 	.word	0x2000003c
 8003120:	40020400 	.word	0x40020400

08003124 <ILI9341_Draw_Rectangle>:
//
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//
void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4603      	mov	r3, r0
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]
 800313e:	4613      	mov	r3, r2
 8003140:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <ILI9341_Draw_Rectangle+0xb0>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	429a      	cmp	r2, r3
 800314c:	d23d      	bcs.n	80031ca <ILI9341_Draw_Rectangle+0xa6>
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <ILI9341_Draw_Rectangle+0xb4>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	88ba      	ldrh	r2, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d237      	bcs.n	80031ca <ILI9341_Draw_Rectangle+0xa6>
	if((X+Width-1)>=LCD_WIDTH)
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	4413      	add	r3, r2
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <ILI9341_Draw_Rectangle+0xb0>)
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	b292      	uxth	r2, r2
 8003166:	4293      	cmp	r3, r2
 8003168:	dd05      	ble.n	8003176 <ILI9341_Draw_Rectangle+0x52>
		{
			Width=LCD_WIDTH-X;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <ILI9341_Draw_Rectangle+0xb0>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29a      	uxth	r2, r3
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	807b      	strh	r3, [r7, #2]
		}
	if((Y+Height-1)>=LCD_HEIGHT)
 8003176:	88ba      	ldrh	r2, [r7, #4]
 8003178:	883b      	ldrh	r3, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <ILI9341_Draw_Rectangle+0xb4>)
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	b292      	uxth	r2, r2
 8003182:	4293      	cmp	r3, r2
 8003184:	dd05      	ble.n	8003192 <ILI9341_Draw_Rectangle+0x6e>
		{
			Height=LCD_HEIGHT-Y;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <ILI9341_Draw_Rectangle+0xb4>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29a      	uxth	r2, r3
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	4413      	add	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29c      	uxth	r4, r3
 800319e:	88ba      	ldrh	r2, [r7, #4]
 80031a0:	883b      	ldrh	r3, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	88b9      	ldrh	r1, [r7, #4]
 80031ac:	88f8      	ldrh	r0, [r7, #6]
 80031ae:	4622      	mov	r2, r4
 80031b0:	f7ff fc18 	bl	80029e4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80031b4:	883b      	ldrh	r3, [r7, #0]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	8b3b      	ldrh	r3, [r7, #24]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe2c 	bl	8002e20 <ILI9341_Draw_Colour_Burst>
 80031c8:	e000      	b.n	80031cc <ILI9341_Draw_Rectangle+0xa8>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80031ca:	bf00      	nop
}
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000003e 	.word	0x2000003e
 80031d8:	2000003c 	.word	0x2000003c

080031dc <ILI9341_Draw_Horizontal_Line>:
//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	4603      	mov	r3, r0
 80031f0:	80bb      	strh	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
 80031f6:	4613      	mov	r3, r2
 80031f8:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <ILI9341_Draw_Horizontal_Line+0x80>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	429a      	cmp	r2, r3
 8003204:	d225      	bcs.n	8003252 <ILI9341_Draw_Horizontal_Line+0x76>
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <ILI9341_Draw_Horizontal_Line+0x84>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	88ba      	ldrh	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d21f      	bcs.n	8003252 <ILI9341_Draw_Horizontal_Line+0x76>
	if((X+Width-1)>=LCD_WIDTH)
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4413      	add	r3, r2
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <ILI9341_Draw_Horizontal_Line+0x80>)
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	b292      	uxth	r2, r2
 800321e:	4293      	cmp	r3, r2
 8003220:	dd05      	ble.n	800322e <ILI9341_Draw_Horizontal_Line+0x52>
		{
			Width=LCD_WIDTH-X;
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <ILI9341_Draw_Horizontal_Line+0x80>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29a      	uxth	r2, r3
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4413      	add	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	88b9      	ldrh	r1, [r7, #4]
 800323e:	88f8      	ldrh	r0, [r7, #6]
 8003240:	f7ff fbd0 	bl	80029e4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8003244:	887a      	ldrh	r2, [r7, #2]
 8003246:	883b      	ldrh	r3, [r7, #0]
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fde8 	bl	8002e20 <ILI9341_Draw_Colour_Burst>
 8003250:	e000      	b.n	8003254 <ILI9341_Draw_Horizontal_Line+0x78>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003252:	bf00      	nop
}
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	2000003e 	.word	0x2000003e
 8003260:	2000003c 	.word	0x2000003c

08003264 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4604      	mov	r4, r0
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4623      	mov	r3, r4
 8003274:	80fb      	strh	r3, [r7, #6]
 8003276:	4603      	mov	r3, r0
 8003278:	80bb      	strh	r3, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	807b      	strh	r3, [r7, #2]
 800327e:	4613      	mov	r3, r2
 8003280:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <ILI9341_Draw_Vertical_Line+0x80>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	429a      	cmp	r2, r3
 800328c:	d225      	bcs.n	80032da <ILI9341_Draw_Vertical_Line+0x76>
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <ILI9341_Draw_Vertical_Line+0x84>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	88ba      	ldrh	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d21f      	bcs.n	80032da <ILI9341_Draw_Vertical_Line+0x76>
	if((Y+Height-1)>=LCD_HEIGHT)
 800329a:	88ba      	ldrh	r2, [r7, #4]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4413      	add	r3, r2
 80032a0:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80032a2:	8812      	ldrh	r2, [r2, #0]
 80032a4:	b292      	uxth	r2, r2
 80032a6:	4293      	cmp	r3, r2
 80032a8:	dd05      	ble.n	80032b6 <ILI9341_Draw_Vertical_Line+0x52>
		{
			Height=LCD_HEIGHT-Y;
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	88bb      	ldrh	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80032b6:	88ba      	ldrh	r2, [r7, #4]
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	4413      	add	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	88fa      	ldrh	r2, [r7, #6]
 80032c4:	88b9      	ldrh	r1, [r7, #4]
 80032c6:	88f8      	ldrh	r0, [r7, #6]
 80032c8:	f7ff fb8c 	bl	80029e4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 80032cc:	887a      	ldrh	r2, [r7, #2]
 80032ce:	883b      	ldrh	r3, [r7, #0]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fda4 	bl	8002e20 <ILI9341_Draw_Colour_Burst>
 80032d8:	e000      	b.n	80032dc <ILI9341_Draw_Vertical_Line+0x78>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80032da:	bf00      	nop
}
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000003e 	.word	0x2000003e
 80032e8:	2000003c 	.word	0x2000003c

080032ec <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	80fb      	strh	r3, [r7, #6]
 80032fe:	4603      	mov	r3, r0
 8003300:	80bb      	strh	r3, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	807b      	strh	r3, [r7, #2]
 8003306:	4613      	mov	r3, r2
 8003308:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

	Calc_Negative = X1 - X0;
 8003320:	887a      	ldrh	r2, [r7, #2]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800332e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8003332:	edd7 7a03 	vldr	s15, [r7, #12]
 8003336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	d501      	bpl.n	8003344 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8003340:	2301      	movs	r3, #1
 8003342:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]

	Calc_Negative = Y1 - Y0;
 800334a:	883a      	ldrh	r2, [r7, #0]
 800334c:	88bb      	ldrh	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003358:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800335c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d501      	bpl.n	800336e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 800336a:	2301      	movs	r3, #1
 800336c:	74bb      	strb	r3, [r7, #18]


	//DRAW HORIZONTAL!
	if(!Negative_X)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	82fb      	strh	r3, [r7, #22]
 800337c:	e003      	b.n	8003386 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8003386:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003388:	8afa      	ldrh	r2, [r7, #22]
 800338a:	88b9      	ldrh	r1, [r7, #4]
 800338c:	88f8      	ldrh	r0, [r7, #6]
 800338e:	f7ff ff25 	bl	80031dc <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8003392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003394:	8afa      	ldrh	r2, [r7, #22]
 8003396:	8839      	ldrh	r1, [r7, #0]
 8003398:	88f8      	ldrh	r0, [r7, #6]
 800339a:	f7ff ff1f 	bl	80031dc <ILI9341_Draw_Horizontal_Line>



	//DRAW VERTICAL!
	if(!Negative_Y)
 800339e:	7cbb      	ldrb	r3, [r7, #18]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;
 80033a4:	883a      	ldrh	r2, [r7, #0]
 80033a6:	88bb      	ldrh	r3, [r7, #4]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	82bb      	strh	r3, [r7, #20]
 80033ac:	e003      	b.n	80033b6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;
 80033ae:	88ba      	ldrh	r2, [r7, #4]
 80033b0:	883b      	ldrh	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80033b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033b8:	8aba      	ldrh	r2, [r7, #20]
 80033ba:	88b9      	ldrh	r1, [r7, #4]
 80033bc:	88f8      	ldrh	r0, [r7, #6]
 80033be:	f7ff ff51 	bl	8003264 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 80033c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033c4:	8aba      	ldrh	r2, [r7, #20]
 80033c6:	88b9      	ldrh	r1, [r7, #4]
 80033c8:	8878      	ldrh	r0, [r7, #2]
 80033ca:	f7ff ff4b 	bl	8003264 <ILI9341_Draw_Vertical_Line>

	if((X_length > 0)||(Y_length > 0))
 80033ce:	8afb      	ldrh	r3, [r7, #22]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 80033d4:	8abb      	ldrh	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80033da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033dc:	8839      	ldrh	r1, [r7, #0]
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fdef 	bl	8002fc4 <ILI9341_Draw_Pixel>
	}

}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
	...

080033f0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	71fb      	strb	r3, [r7, #7]
 8003402:	4603      	mov	r3, r0
 8003404:	80bb      	strh	r3, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	807b      	strh	r3, [r7, #2]
 800340a:	4613      	mov	r3, r2
 800340c:	803b      	strh	r3, [r7, #0]
	uint8_t 	function_char;
	uint8_t 	i,j;

	function_char = Character;
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	75fb      	strb	r3, [r7, #23]

    if (function_char < ' ')
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b1f      	cmp	r3, #31
 8003416:	d802      	bhi.n	800341e <ILI9341_Draw_Char+0x2e>
    {
        Character = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	e002      	b.n	8003424 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	3b20      	subs	r3, #32
 8003422:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8003424:	2300      	movs	r3, #0
 8003426:	753b      	strb	r3, [r7, #20]
 8003428:	e012      	b.n	8003450 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800342a:	7dfa      	ldrb	r2, [r7, #23]
 800342c:	7d38      	ldrb	r0, [r7, #20]
 800342e:	7d39      	ldrb	r1, [r7, #20]
 8003430:	4c38      	ldr	r4, [pc, #224]	; (8003514 <ILI9341_Draw_Char+0x124>)
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4423      	add	r3, r4
 800343c:	4403      	add	r3, r0
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	f101 0318 	add.w	r3, r1, #24
 8003444:	443b      	add	r3, r7
 8003446:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800344a:	7d3b      	ldrb	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	753b      	strb	r3, [r7, #20]
 8003450:	7d3b      	ldrb	r3, [r7, #20]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d9e9      	bls.n	800342a <ILI9341_Draw_Char+0x3a>
	}

    // Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8003456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003458:	461a      	mov	r2, r3
 800345a:	0052      	lsls	r2, r2, #1
 800345c:	4413      	add	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	b29c      	uxth	r4, r3
 8003468:	8879      	ldrh	r1, [r7, #2]
 800346a:	88b8      	ldrh	r0, [r7, #4]
 800346c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4623      	mov	r3, r4
 8003472:	f7ff fe57 	bl	8003124 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8003476:	2300      	movs	r3, #0
 8003478:	757b      	strb	r3, [r7, #21]
 800347a:	e043      	b.n	8003504 <ILI9341_Draw_Char+0x114>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800347c:	2300      	movs	r3, #0
 800347e:	75bb      	strb	r3, [r7, #22]
 8003480:	e03a      	b.n	80034f8 <ILI9341_Draw_Char+0x108>
            if (temp[j] & (1<<i)) {
 8003482:	7d7b      	ldrb	r3, [r7, #21]
 8003484:	3318      	adds	r3, #24
 8003486:	443b      	add	r3, r7
 8003488:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800348c:	461a      	mov	r2, r3
 800348e:	7dbb      	ldrb	r3, [r7, #22]
 8003490:	fa42 f303 	asr.w	r3, r2, r3
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02a      	beq.n	80034f2 <ILI9341_Draw_Char+0x102>
							if(Size == 1)
 800349c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <ILI9341_Draw_Char+0xd0>
							{
								ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80034a2:	7d7b      	ldrb	r3, [r7, #21]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	88bb      	ldrh	r3, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	b298      	uxth	r0, r3
 80034ac:	7dbb      	ldrb	r3, [r7, #22]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	4413      	add	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	883a      	ldrh	r2, [r7, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7ff fd83 	bl	8002fc4 <ILI9341_Draw_Pixel>
 80034be:	e018      	b.n	80034f2 <ILI9341_Draw_Char+0x102>
							}
							else
							{
								ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80034c0:	7d7b      	ldrb	r3, [r7, #21]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034c6:	fb12 f303 	smulbb	r3, r2, r3
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	88bb      	ldrh	r3, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	b298      	uxth	r0, r3
 80034d2:	7dbb      	ldrb	r3, [r7, #22]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034d8:	fb12 f303 	smulbb	r3, r2, r3
 80034dc:	b29a      	uxth	r2, r3
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	4413      	add	r3, r2
 80034e2:	b299      	uxth	r1, r3
 80034e4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80034e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034e8:	883b      	ldrh	r3, [r7, #0]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4623      	mov	r3, r4
 80034ee:	f7ff fe19 	bl	8003124 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80034f2:	7dbb      	ldrb	r3, [r7, #22]
 80034f4:	3301      	adds	r3, #1
 80034f6:	75bb      	strb	r3, [r7, #22]
 80034f8:	7dbb      	ldrb	r3, [r7, #22]
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	d9c1      	bls.n	8003482 <ILI9341_Draw_Char+0x92>
    for (j=0; j<CHAR_WIDTH; j++) {
 80034fe:	7d7b      	ldrb	r3, [r7, #21]
 8003500:	3301      	adds	r3, #1
 8003502:	757b      	strb	r3, [r7, #21]
 8003504:	7d7b      	ldrb	r3, [r7, #21]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d9b8      	bls.n	800347c <ILI9341_Draw_Char+0x8c>
							}
            }
        }
    }
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd90      	pop	{r4, r7, pc}
 8003514:	08010c74 	.word	0x08010c74

08003518 <ILI9341_Draw_Text>:


/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b087      	sub	sp, #28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8003532:	e016      	b.n	8003562 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	60fa      	str	r2, [r7, #12]
 800353a:	7818      	ldrb	r0, [r3, #0]
 800353c:	88fc      	ldrh	r4, [r7, #6]
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	8c3b      	ldrh	r3, [r7, #32]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4623      	mov	r3, r4
 800354c:	f7ff ff50 	bl	80033f0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8003550:	8c3b      	ldrh	r3, [r7, #32]
 8003552:	461a      	mov	r2, r3
 8003554:	0052      	lsls	r2, r2, #1
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	4413      	add	r3, r2
 8003560:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e4      	bne.n	8003534 <ILI9341_Draw_Text+0x1c>
    }
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <lis_tx_8b>:

#define NSS_DISABLE() 	(GPIOE->ODR |= 0x0008)
#define NSS_ENABLE()	(GPIOE->ODR &= 0xFFF7)

void lis_tx_8b(uint8_t tx_data)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
	spi1_tx_8b(tx_data);
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fdf7 	bl	8002174 <spi1_tx_8b>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <lis_rx_8b>:

uint8_t lis_rx_8b(void)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
	uint8_t rx_data;
	rx_data = spi1_rx_8b();
 8003594:	f7fe fe1c 	bl	80021d0 <spi1_rx_8b>
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
	return	rx_data;
 800359c:	79fb      	ldrb	r3, [r7, #7]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <LIS3DSH_Read>:
// variables
uint8_t outx_l, outx_h, outy_l, outy_h, outz_l, outz_h, outt_l, outt_h, outt;
int16_t outx, outy, outz;

uint8_t LIS3DSH_Read(uint8_t addr)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	addr |= 0x80;
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035b8:	71fb      	strb	r3, [r7, #7]

	NSS_ENABLE();
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <LIS3DSH_Read+0x48>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	490c      	ldr	r1, [pc, #48]	; (80035f0 <LIS3DSH_Read+0x48>)
 80035c0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80035c4:	4013      	ands	r3, r2
 80035c6:	614b      	str	r3, [r1, #20]
	lis_tx_8b(addr);
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ffd2 	bl	8003574 <lis_tx_8b>
	data = lis_rx_8b();
 80035d0:	f7ff ffdd 	bl	800358e <lis_rx_8b>
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
	NSS_DISABLE();
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <LIS3DSH_Read+0x48>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <LIS3DSH_Read+0x48>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6153      	str	r3, [r2, #20]
	return data;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000

080035f4 <LIS3DSH_Write>:

void LIS3DSH_Write(uint16_t waddr, uint8_t wdata)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	460a      	mov	r2, r1
 80035fe:	80fb      	strh	r3, [r7, #6]
 8003600:	4613      	mov	r3, r2
 8003602:	717b      	strb	r3, [r7, #5]
	NSS_ENABLE();
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <LIS3DSH_Write+0x44>)
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	490b      	ldr	r1, [pc, #44]	; (8003638 <LIS3DSH_Write+0x44>)
 800360a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800360e:	4013      	ands	r3, r2
 8003610:	614b      	str	r3, [r1, #20]
	lis_tx_8b(waddr);
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ffac 	bl	8003574 <lis_tx_8b>
	lis_tx_8b(wdata);
 800361c:	797b      	ldrb	r3, [r7, #5]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffa8 	bl	8003574 <lis_tx_8b>
	NSS_DISABLE();
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <LIS3DSH_Write+0x44>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <LIS3DSH_Write+0x44>)
 800362a:	f043 0308 	orr.w	r3, r3, #8
 800362e:	6153      	str	r3, [r2, #20]
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000

0800363c <LIS3DSH_Init>:


void LIS3DSH_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	//***NORMAL mode***
	NSS_DISABLE();
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <LIS3DSH_Init+0x44>)
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4a0e      	ldr	r2, [pc, #56]	; (8003680 <LIS3DSH_Init+0x44>)
 8003646:	f043 0308 	orr.w	r3, r3, #8
 800364a:	6153      	str	r3, [r2, #20]
	LIS3DSH_Write(CTRL_REG4_ADDR, 0b01101111); //ODR = 100Hz, BDU = 1, ZYX enabled
 800364c:	216f      	movs	r1, #111	; 0x6f
 800364e:	2020      	movs	r0, #32
 8003650:	f7ff ffd0 	bl	80035f4 <LIS3DSH_Write>
	LIS3DSH_Write(CTRL_REG1_ADDR, 0x00);
 8003654:	2100      	movs	r1, #0
 8003656:	2021      	movs	r0, #33	; 0x21
 8003658:	f7ff ffcc 	bl	80035f4 <LIS3DSH_Write>
	LIS3DSH_Write(CTRL_REG2_ADDR, 0x00);
 800365c:	2100      	movs	r1, #0
 800365e:	2022      	movs	r0, #34	; 0x22
 8003660:	f7ff ffc8 	bl	80035f4 <LIS3DSH_Write>
	LIS3DSH_Write(CTRL_REG3_ADDR, 0x00);
 8003664:	2100      	movs	r1, #0
 8003666:	2023      	movs	r0, #35	; 0x23
 8003668:	f7ff ffc4 	bl	80035f4 <LIS3DSH_Write>
	LIS3DSH_Write(CTRL_REG5_ADDR, 0b00000000); //BW = 00 anti aliasing 800Hz, Scale +- 2g, Self test disabled, SPI 4 wire
 800366c:	2100      	movs	r1, #0
 800366e:	2024      	movs	r0, #36	; 0x24
 8003670:	f7ff ffc0 	bl	80035f4 <LIS3DSH_Write>
	LIS3DSH_Write(CTRL_REG6_ADDR, 0x00);
 8003674:	2100      	movs	r1, #0
 8003676:	2025      	movs	r0, #37	; 0x25
 8003678:	f7ff ffbc 	bl	80035f4 <LIS3DSH_Write>
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000

08003684 <LIS3DSH_Measure>:

void LIS3DSH_Measure(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0

	//if(wszystko_ok == 1){
	outx_l	= 	LIS3DSH_Read(OUT_X_L_ADDR);
 8003688:	2028      	movs	r0, #40	; 0x28
 800368a:	f7ff ff8d 	bl	80035a8 <LIS3DSH_Read>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <LIS3DSH_Measure+0xa0>)
 8003694:	701a      	strb	r2, [r3, #0]
	outx_h	= 	LIS3DSH_Read(OUT_X_H_ADDR); //XDA=0 after reading
 8003696:	2029      	movs	r0, #41	; 0x29
 8003698:	f7ff ff86 	bl	80035a8 <LIS3DSH_Read>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	4b21      	ldr	r3, [pc, #132]	; (8003728 <LIS3DSH_Measure+0xa4>)
 80036a2:	701a      	strb	r2, [r3, #0]
	outx = ( outx_h << 8 ) | outx_l;
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <LIS3DSH_Measure+0xa4>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	b21a      	sxth	r2, r3
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <LIS3DSH_Measure+0xa0>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <LIS3DSH_Measure+0xa8>)
 80036b8:	801a      	strh	r2, [r3, #0]
	//x = (float) outx * sensitivity; //FS=00 + Normal mode, SENSITIVITY = 0.06 mg // mg

	outy_l	= 	LIS3DSH_Read(OUT_Y_L_ADDR);
 80036ba:	202a      	movs	r0, #42	; 0x2a
 80036bc:	f7ff ff74 	bl	80035a8 <LIS3DSH_Read>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <LIS3DSH_Measure+0xac>)
 80036c6:	701a      	strb	r2, [r3, #0]
	outy_h	= 	LIS3DSH_Read(OUT_Y_H_ADDR);
 80036c8:	202b      	movs	r0, #43	; 0x2b
 80036ca:	f7ff ff6d 	bl	80035a8 <LIS3DSH_Read>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <LIS3DSH_Measure+0xb0>)
 80036d4:	701a      	strb	r2, [r3, #0]
	outy = ( outy_h << 8 ) | outy_l;
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <LIS3DSH_Measure+0xb0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	b21a      	sxth	r2, r3
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <LIS3DSH_Measure+0xac>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b21b      	sxth	r3, r3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	b21a      	sxth	r2, r3
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <LIS3DSH_Measure+0xb4>)
 80036ea:	801a      	strh	r2, [r3, #0]
	//y = (float) outy * sensitivity; //FS=00 + Normal mode, SENSITIVITY = 0.06 mg // mg

	outz_l	= 	LIS3DSH_Read(OUT_Z_L_ADDR);
 80036ec:	202c      	movs	r0, #44	; 0x2c
 80036ee:	f7ff ff5b 	bl	80035a8 <LIS3DSH_Read>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <LIS3DSH_Measure+0xb8>)
 80036f8:	701a      	strb	r2, [r3, #0]
	outz_h	=	LIS3DSH_Read(OUT_Z_H_ADDR);
 80036fa:	202d      	movs	r0, #45	; 0x2d
 80036fc:	f7ff ff54 	bl	80035a8 <LIS3DSH_Read>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <LIS3DSH_Measure+0xbc>)
 8003706:	701a      	strb	r2, [r3, #0]
	outz = ( outz_h << 8 ) | outz_l;
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <LIS3DSH_Measure+0xbc>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	b21a      	sxth	r2, r3
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <LIS3DSH_Measure+0xb8>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b21b      	sxth	r3, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	b21a      	sxth	r2, r3
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <LIS3DSH_Measure+0xc0>)
 800371c:	801a      	strh	r2, [r3, #0]
	//z = (float) outz * sensitivity; //FS=00 + Normal mode, SENSITIVITY = 0.06 mg // mg

}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200082c8 	.word	0x200082c8
 8003728:	200082c9 	.word	0x200082c9
 800372c:	200082ce 	.word	0x200082ce
 8003730:	200082ca 	.word	0x200082ca
 8003734:	200082cb 	.word	0x200082cb
 8003738:	200082d0 	.word	0x200082d0
 800373c:	200082cc 	.word	0x200082cc
 8003740:	200082cd 	.word	0x200082cd
 8003744:	200082d2 	.word	0x200082d2

08003748 <SHT20_SoftReset>:
#include "i2c.h"



uint8_t SHT20_SoftReset(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	uint8_t err = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	71fb      	strb	r3, [r7, #7]

	err = i2c_start(I2C1,10);
 8003752:	210a      	movs	r1, #10
 8003754:	480e      	ldr	r0, [pc, #56]	; (8003790 <SHT20_SoftReset+0x48>)
 8003756:	f7fd fb6b 	bl	8000e30 <i2c_start>
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
	err = i2c_write_adress(I2C1,SHT20_ADDR_W,10);
 800375e:	220a      	movs	r2, #10
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	480b      	ldr	r0, [pc, #44]	; (8003790 <SHT20_SoftReset+0x48>)
 8003764:	f7fd fb9a 	bl	8000e9c <i2c_write_adress>
 8003768:	4603      	mov	r3, r0
 800376a:	71fb      	strb	r3, [r7, #7]
	err = i2c_write_data(I2C1,SHT20_SOFT_RESET,10);
 800376c:	220a      	movs	r2, #10
 800376e:	21fe      	movs	r1, #254	; 0xfe
 8003770:	4807      	ldr	r0, [pc, #28]	; (8003790 <SHT20_SoftReset+0x48>)
 8003772:	f7fd fbbf 	bl	8000ef4 <i2c_write_data>
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
	i2c_stop(I2C1);
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <SHT20_SoftReset+0x48>)
 800377c:	f7fd fc06 	bl	8000f8c <i2c_stop>
	HAL_Delay(15);
 8003780:	200f      	movs	r0, #15
 8003782:	f000 f9b1 	bl	8003ae8 <HAL_Delay>
	return err;
 8003786:	79fb      	ldrb	r3, [r7, #7]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40005400 	.word	0x40005400

08003794 <SHT20_ReadUserRegister>:

uint8_t SHT20_ReadUserRegister(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	71fb      	strb	r3, [r7, #7]

	i2c_start(I2C1,10);
 800379e:	210a      	movs	r1, #10
 80037a0:	4814      	ldr	r0, [pc, #80]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037a2:	f7fd fb45 	bl	8000e30 <i2c_start>
	i2c_write_adress(I2C1,SHT20_ADDR_W,10);
 80037a6:	220a      	movs	r2, #10
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037ac:	f7fd fb76 	bl	8000e9c <i2c_write_adress>
	i2c_write_data(I2C1,SHT20_READ_REG,10);
 80037b0:	220a      	movs	r2, #10
 80037b2:	21e7      	movs	r1, #231	; 0xe7
 80037b4:	480f      	ldr	r0, [pc, #60]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037b6:	f7fd fb9d 	bl	8000ef4 <i2c_write_data>

	//read
	i2c_start(I2C1,10);
 80037ba:	210a      	movs	r1, #10
 80037bc:	480d      	ldr	r0, [pc, #52]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037be:	f7fd fb37 	bl	8000e30 <i2c_start>
	I2C1->CR1 &= ~(I2C_CR1_ACK);
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	6013      	str	r3, [r2, #0]
	i2c_write_adress(I2C1,SHT20_ADDR_R,10);
 80037ce:	220a      	movs	r2, #10
 80037d0:	2181      	movs	r1, #129	; 0x81
 80037d2:	4808      	ldr	r0, [pc, #32]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037d4:	f7fd fb62 	bl	8000e9c <i2c_write_adress>
	data = i2c_read_data(I2C1,10);
 80037d8:	210a      	movs	r1, #10
 80037da:	4806      	ldr	r0, [pc, #24]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037dc:	f7fd fbb2 	bl	8000f44 <i2c_read_data>
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]

	i2c_stop(I2C1);
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <SHT20_ReadUserRegister+0x60>)
 80037e6:	f7fd fbd1 	bl	8000f8c <i2c_stop>

	return data;
 80037ea:	79fb      	ldrb	r3, [r7, #7]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40005400 	.word	0x40005400

080037f8 <SHT20_GetTemp>:


float SHT20_GetTemp(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
    uint8_t data[3] = {0, 0, 0};
 80037fe:	4a3e      	ldr	r2, [pc, #248]	; (80038f8 <SHT20_GetTemp+0x100>)
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	4611      	mov	r1, r2
 8003806:	8019      	strh	r1, [r3, #0]
 8003808:	3302      	adds	r3, #2
 800380a:	0c12      	lsrs	r2, r2, #16
 800380c:	701a      	strb	r2, [r3, #0]
    uint16_t sT = 0;			//sensor Temperature raw data
 800380e:	2300      	movs	r3, #0
 8003810:	81fb      	strh	r3, [r7, #14]
    float temperatureC = 0;  	//variable for result
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]

	i2c_start(I2C1,10);
 8003818:	210a      	movs	r1, #10
 800381a:	4838      	ldr	r0, [pc, #224]	; (80038fc <SHT20_GetTemp+0x104>)
 800381c:	f7fd fb08 	bl	8000e30 <i2c_start>
	i2c_write_adress(I2C1,SHT20_ADDR_W,10);			//write address
 8003820:	220a      	movs	r2, #10
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	4835      	ldr	r0, [pc, #212]	; (80038fc <SHT20_GetTemp+0x104>)
 8003826:	f7fd fb39 	bl	8000e9c <i2c_write_adress>
	i2c_write_data(I2C1,TRIG_T_MEASUREMENT_HM,10);	//command
 800382a:	220a      	movs	r2, #10
 800382c:	21e3      	movs	r1, #227	; 0xe3
 800382e:	4833      	ldr	r0, [pc, #204]	; (80038fc <SHT20_GetTemp+0x104>)
 8003830:	f7fd fb60 	bl	8000ef4 <i2c_write_data>

	//read
	i2c_start(I2C1,10); //repeated start
 8003834:	210a      	movs	r1, #10
 8003836:	4831      	ldr	r0, [pc, #196]	; (80038fc <SHT20_GetTemp+0x104>)
 8003838:	f7fd fafa 	bl	8000e30 <i2c_start>
	i2c_write_adress(I2C1,SHT20_ADDR_R,10);	//read address
 800383c:	220a      	movs	r2, #10
 800383e:	2181      	movs	r1, #129	; 0x81
 8003840:	482e      	ldr	r0, [pc, #184]	; (80038fc <SHT20_GetTemp+0x104>)
 8003842:	f7fd fb2b 	bl	8000e9c <i2c_write_adress>
	data[0] = i2c_read_data(I2C1,100);		//timeout 100ms for temperature measuring
 8003846:	2164      	movs	r1, #100	; 0x64
 8003848:	482c      	ldr	r0, [pc, #176]	; (80038fc <SHT20_GetTemp+0x104>)
 800384a:	f7fd fb7b 	bl	8000f44 <i2c_read_data>
 800384e:	4603      	mov	r3, r0
 8003850:	713b      	strb	r3, [r7, #4]
	data[1] = i2c_read_data(I2C1,10);
 8003852:	210a      	movs	r1, #10
 8003854:	4829      	ldr	r0, [pc, #164]	; (80038fc <SHT20_GetTemp+0x104>)
 8003856:	f7fd fb75 	bl	8000f44 <i2c_read_data>
 800385a:	4603      	mov	r3, r0
 800385c:	717b      	strb	r3, [r7, #5]
	i2c_dis_ack(I2C1); 						//disable ACK for reading last byte with NACK
 800385e:	4827      	ldr	r0, [pc, #156]	; (80038fc <SHT20_GetTemp+0x104>)
 8003860:	f7fd fbaa 	bl	8000fb8 <i2c_dis_ack>
	data[2] = i2c_read_data(I2C1,10);
 8003864:	210a      	movs	r1, #10
 8003866:	4825      	ldr	r0, [pc, #148]	; (80038fc <SHT20_GetTemp+0x104>)
 8003868:	f7fd fb6c 	bl	8000f44 <i2c_read_data>
 800386c:	4603      	mov	r3, r0
 800386e:	71bb      	strb	r3, [r7, #6]
	i2c_stop(I2C1);
 8003870:	4822      	ldr	r0, [pc, #136]	; (80038fc <SHT20_GetTemp+0x104>)
 8003872:	f7fd fb8b 	bl	8000f8c <i2c_stop>

	sT = ((uint16_t)data[0] << 8) | data[1];
 8003876:	793b      	ldrb	r3, [r7, #4]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	b21a      	sxth	r2, r3
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	b21b      	sxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b21b      	sxth	r3, r3
 8003884:	81fb      	strh	r3, [r7, #14]
	sT &= ~0x0003; 							//clear bits [1..0] (status bits)
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	f023 0303 	bic.w	r3, r3, #3
 800388c:	81fb      	strh	r3, [r7, #14]
	temperatureC = -46.85 + (((float)sT/65536)* 175.72);
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003898:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003900 <SHT20_GetTemp+0x108>
 800389c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038a0:	ee16 0a90 	vmov	r0, s13
 80038a4:	f7fc ff1e 	bl	80006e4 <__aeabi_f2d>
 80038a8:	a30f      	add	r3, pc, #60	; (adr r3, 80038e8 <SHT20_GetTemp+0xf0>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fc8b 	bl	80001c8 <__aeabi_dmul>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	a30d      	add	r3, pc, #52	; (adr r3, 80038f0 <SHT20_GetTemp+0xf8>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc fdb0 	bl	8000424 <__aeabi_dsub>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fc ffea 	bl	80008a4 <__aeabi_d2f>
 80038d0:	4603      	mov	r3, r0
 80038d2:	60bb      	str	r3, [r7, #8]

	return temperatureC;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	ee07 3a90 	vmov	s15, r3
}
 80038da:	eeb0 0a67 	vmov.f32	s0, s15
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	f3af 8000 	nop.w
 80038e8:	3d70a3d7 	.word	0x3d70a3d7
 80038ec:	4065f70a 	.word	0x4065f70a
 80038f0:	cccccccd 	.word	0xcccccccd
 80038f4:	40476ccc 	.word	0x40476ccc
 80038f8:	0800c26c 	.word	0x0800c26c
 80038fc:	40005400 	.word	0x40005400
 8003900:	47800000 	.word	0x47800000
 8003904:	00000000 	.word	0x00000000

08003908 <SHT20_GetHum>:


float SHT20_GetHum(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
	uint8_t read_data[3] = {0, 0, 0};
 800390e:	4a3a      	ldr	r2, [pc, #232]	; (80039f8 <SHT20_GetHum+0xf0>)
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	4611      	mov	r1, r2
 8003916:	8019      	strh	r1, [r3, #0]
 8003918:	3302      	adds	r3, #2
 800391a:	0c12      	lsrs	r2, r2, #16
 800391c:	701a      	strb	r2, [r3, #0]
	uint16_t rH = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	81fb      	strh	r3, [r7, #14]
	float humRh = 0;  	//variable for result
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]

	i2c_start(I2C1,10);
 8003928:	210a      	movs	r1, #10
 800392a:	4834      	ldr	r0, [pc, #208]	; (80039fc <SHT20_GetHum+0xf4>)
 800392c:	f7fd fa80 	bl	8000e30 <i2c_start>
	i2c_write_adress(I2C1,SHT20_ADDR_W,10);
 8003930:	220a      	movs	r2, #10
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	4831      	ldr	r0, [pc, #196]	; (80039fc <SHT20_GetHum+0xf4>)
 8003936:	f7fd fab1 	bl	8000e9c <i2c_write_adress>
	i2c_write_data(I2C1,TRIG_H_MEASUREMENT_HM,10); // Trigger RH measurement hold master
 800393a:	220a      	movs	r2, #10
 800393c:	21e5      	movs	r1, #229	; 0xe5
 800393e:	482f      	ldr	r0, [pc, #188]	; (80039fc <SHT20_GetHum+0xf4>)
 8003940:	f7fd fad8 	bl	8000ef4 <i2c_write_data>

	//read
	i2c_start(I2C1,10); //repeated start
 8003944:	210a      	movs	r1, #10
 8003946:	482d      	ldr	r0, [pc, #180]	; (80039fc <SHT20_GetHum+0xf4>)
 8003948:	f7fd fa72 	bl	8000e30 <i2c_start>
	i2c_write_adress(I2C1,SHT20_ADDR_R,10);
 800394c:	220a      	movs	r2, #10
 800394e:	2181      	movs	r1, #129	; 0x81
 8003950:	482a      	ldr	r0, [pc, #168]	; (80039fc <SHT20_GetHum+0xf4>)
 8003952:	f7fd faa3 	bl	8000e9c <i2c_write_adress>
	read_data[0] = i2c_read_data(I2C1,50);		//timeout 50ms for humidity measuring
 8003956:	2132      	movs	r1, #50	; 0x32
 8003958:	4828      	ldr	r0, [pc, #160]	; (80039fc <SHT20_GetHum+0xf4>)
 800395a:	f7fd faf3 	bl	8000f44 <i2c_read_data>
 800395e:	4603      	mov	r3, r0
 8003960:	713b      	strb	r3, [r7, #4]
	read_data[1] = i2c_read_data(I2C1,10);
 8003962:	210a      	movs	r1, #10
 8003964:	4825      	ldr	r0, [pc, #148]	; (80039fc <SHT20_GetHum+0xf4>)
 8003966:	f7fd faed 	bl	8000f44 <i2c_read_data>
 800396a:	4603      	mov	r3, r0
 800396c:	717b      	strb	r3, [r7, #5]
	i2c_dis_ack(I2C1); 							// disable ACK for reading last byte with NACK
 800396e:	4823      	ldr	r0, [pc, #140]	; (80039fc <SHT20_GetHum+0xf4>)
 8003970:	f7fd fb22 	bl	8000fb8 <i2c_dis_ack>
	read_data[2] = i2c_read_data(I2C1,10);
 8003974:	210a      	movs	r1, #10
 8003976:	4821      	ldr	r0, [pc, #132]	; (80039fc <SHT20_GetHum+0xf4>)
 8003978:	f7fd fae4 	bl	8000f44 <i2c_read_data>
 800397c:	4603      	mov	r3, r0
 800397e:	71bb      	strb	r3, [r7, #6]
	i2c_stop(I2C1);
 8003980:	481e      	ldr	r0, [pc, #120]	; (80039fc <SHT20_GetHum+0xf4>)
 8003982:	f7fd fb03 	bl	8000f8c <i2c_stop>

	rH = ((uint16_t)read_data[0] << 8) | read_data[1];
 8003986:	793b      	ldrb	r3, [r7, #4]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	b21a      	sxth	r2, r3
 800398c:	797b      	ldrb	r3, [r7, #5]
 800398e:	b21b      	sxth	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b21b      	sxth	r3, r3
 8003994:	81fb      	strh	r3, [r7, #14]
	rH &= ~0x0003; 							//clear bits [1..0] (status bits)
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	f023 0303 	bic.w	r3, r3, #3
 800399c:	81fb      	strh	r3, [r7, #14]

	humRh = ((float)rH * 0.00190735) - 6;
 800399e:	89fb      	ldrh	r3, [r7, #14]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	ee17 0a90 	vmov	r0, s15
 80039ac:	f7fc fe9a 	bl	80006e4 <__aeabi_f2d>
 80039b0:	a30f      	add	r3, pc, #60	; (adr r3, 80039f0 <SHT20_GetHum+0xe8>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f7fc fc07 	bl	80001c8 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <SHT20_GetHum+0xf8>)
 80039c8:	f7fc fd2c 	bl	8000424 <__aeabi_dsub>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fc ff66 	bl	80008a4 <__aeabi_d2f>
 80039d8:	4603      	mov	r3, r0
 80039da:	60bb      	str	r3, [r7, #8]

	return humRh;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	ee07 3a90 	vmov	s15, r3
}
 80039e2:	eeb0 0a67 	vmov.f32	s0, s15
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	f3af 8000 	nop.w
 80039f0:	77cf4476 	.word	0x77cf4476
 80039f4:	3f5f4001 	.word	0x3f5f4001
 80039f8:	0800c26c 	.word	0x0800c26c
 80039fc:	40005400 	.word	0x40005400
 8003a00:	40180000 	.word	0x40180000

08003a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_Init+0x40>)
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_Init+0x40>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_Init+0x40>)
 8003a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_Init+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <HAL_Init+0x40>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f000 fb93 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a32:	200f      	movs	r0, #15
 8003a34:	f000 f808 	bl	8003a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a38:	f7fe fbee 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_InitTick+0x54>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_InitTick+0x58>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fb9d 	bl	80041a6 <HAL_SYSTICK_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00e      	b.n	8003a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d80a      	bhi.n	8003a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f000 fb73 	bl	800416e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a88:	4a06      	ldr	r2, [pc, #24]	; (8003aa4 <HAL_InitTick+0x5c>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000038 	.word	0x20000038
 8003aa0:	20000044 	.word	0x20000044
 8003aa4:	20000040 	.word	0x20000040

08003aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_IncTick+0x20>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_IncTick+0x24>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <HAL_IncTick+0x24>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000044 	.word	0x20000044
 8003acc:	200082d4 	.word	0x200082d4

08003ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_GetTick+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	200082d4 	.word	0x200082d4

08003ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff ffee 	bl	8003ad0 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d005      	beq.n	8003b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_Delay+0x44>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b0e:	bf00      	nop
 8003b10:	f7ff ffde 	bl	8003ad0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8f7      	bhi.n	8003b10 <HAL_Delay+0x28>
  {
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000044 	.word	0x20000044

08003b30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e033      	b.n	8003bae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fe fb8a 	bl	8002268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b76:	f023 0302 	bic.w	r3, r3, #2
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f93a 	bl	8003dfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b9e:	e001      	b.n	8003ba4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x1c>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e105      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x228>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d925      	bls.n	8003c30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68d9      	ldr	r1, [r3, #12]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b1e      	subs	r3, #30
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43da      	mvns	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	400a      	ands	r2, r1
 8003c08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4403      	add	r3, r0
 8003c22:	3b1e      	subs	r3, #30
 8003c24:	409a      	lsls	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	e022      	b.n	8003c76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6919      	ldr	r1, [r3, #16]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	2207      	movs	r2, #7
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	400a      	ands	r2, r1
 8003c52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4618      	mov	r0, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4403      	add	r3, r0
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d824      	bhi.n	8003cc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3b05      	subs	r3, #5
 8003c90:	221f      	movs	r2, #31
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4618      	mov	r0, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3b05      	subs	r3, #5
 8003cba:	fa00 f203 	lsl.w	r2, r0, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc6:	e04c      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d824      	bhi.n	8003d1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	3b23      	subs	r3, #35	; 0x23
 8003ce2:	221f      	movs	r2, #31
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	400a      	ands	r2, r1
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	3b23      	subs	r3, #35	; 0x23
 8003d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
 8003d18:	e023      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	3b41      	subs	r3, #65	; 0x41
 8003d2c:	221f      	movs	r2, #31
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	400a      	ands	r2, r1
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	3b41      	subs	r3, #65	; 0x41
 8003d56:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_ADC_ConfigChannel+0x234>)
 8003d64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_ADC_ConfigChannel+0x238>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d109      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x1cc>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b12      	cmp	r3, #18
 8003d76:	d105      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_ADC_ConfigChannel+0x238>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d123      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x21e>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d003      	beq.n	8003d9e <HAL_ADC_ConfigChannel+0x1e6>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b11      	cmp	r3, #17
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d111      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_ADC_ConfigChannel+0x23c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_ADC_ConfigChannel+0x240>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	0c9a      	lsrs	r2, r3, #18
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dc8:	e002      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f9      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40012300 	.word	0x40012300
 8003df0:	40012000 	.word	0x40012000
 8003df4:	20000038 	.word	0x20000038
 8003df8:	431bde83 	.word	0x431bde83

08003dfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e04:	4b79      	ldr	r3, [pc, #484]	; (8003fec <ADC_Init+0x1f0>)
 8003e06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	021a      	lsls	r2, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <ADC_Init+0x1f4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6899      	ldr	r1, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e00f      	b.n	8003efa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ef8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0202 	bic.w	r2, r2, #2
 8003f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7e1b      	ldrb	r3, [r3, #24]
 8003f14:	005a      	lsls	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	3b01      	subs	r3, #1
 8003f54:	035a      	lsls	r2, r3, #13
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e007      	b.n	8003f70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	051a      	lsls	r2, r3, #20
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fb2:	025a      	lsls	r2, r3, #9
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6899      	ldr	r1, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	029a      	lsls	r2, r3, #10
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40012300 	.word	0x40012300
 8003ff0:	0f000001 	.word	0x0f000001

08003ff4 <__NVIC_SetPriorityGrouping>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <__NVIC_SetPriorityGrouping+0x44>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004010:	4013      	ands	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800401c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004026:	4a04      	ldr	r2, [pc, #16]	; (8004038 <__NVIC_SetPriorityGrouping+0x44>)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	60d3      	str	r3, [r2, #12]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <__NVIC_GetPriorityGrouping>:
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <__NVIC_GetPriorityGrouping+0x18>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 0307 	and.w	r3, r3, #7
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <__NVIC_SetPriority>:
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	; (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff47 	bl	8003ff4 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff5c 	bl	800403c <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff8e 	bl	80040ac <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5d 	bl	8004058 <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ffb0 	bl	8004114 <SysTick_Config>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e16b      	b.n	80044b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	f040 815a 	bne.w	80044ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d005      	beq.n	8004212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800420e:	2b02      	cmp	r3, #2
 8004210:	d130      	bne.n	8004274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004248:	2201      	movs	r2, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 0201 	and.w	r2, r3, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d017      	beq.n	80042b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	2203      	movs	r2, #3
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d123      	bne.n	8004304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3208      	adds	r2, #8
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	220f      	movs	r2, #15
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0203 	and.w	r2, r3, #3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80b4 	beq.w	80044ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	4b60      	ldr	r3, [pc, #384]	; (80044cc <HAL_GPIO_Init+0x30c>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	4a5f      	ldr	r2, [pc, #380]	; (80044cc <HAL_GPIO_Init+0x30c>)
 8004350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004354:	6453      	str	r3, [r2, #68]	; 0x44
 8004356:	4b5d      	ldr	r3, [pc, #372]	; (80044cc <HAL_GPIO_Init+0x30c>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004362:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <HAL_GPIO_Init+0x310>)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a52      	ldr	r2, [pc, #328]	; (80044d4 <HAL_GPIO_Init+0x314>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02b      	beq.n	80043e6 <HAL_GPIO_Init+0x226>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a51      	ldr	r2, [pc, #324]	; (80044d8 <HAL_GPIO_Init+0x318>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d025      	beq.n	80043e2 <HAL_GPIO_Init+0x222>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a50      	ldr	r2, [pc, #320]	; (80044dc <HAL_GPIO_Init+0x31c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01f      	beq.n	80043de <HAL_GPIO_Init+0x21e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4f      	ldr	r2, [pc, #316]	; (80044e0 <HAL_GPIO_Init+0x320>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d019      	beq.n	80043da <HAL_GPIO_Init+0x21a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <HAL_GPIO_Init+0x324>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_GPIO_Init+0x216>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_GPIO_Init+0x328>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00d      	beq.n	80043d2 <HAL_GPIO_Init+0x212>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4c      	ldr	r2, [pc, #304]	; (80044ec <HAL_GPIO_Init+0x32c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d007      	beq.n	80043ce <HAL_GPIO_Init+0x20e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4b      	ldr	r2, [pc, #300]	; (80044f0 <HAL_GPIO_Init+0x330>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <HAL_GPIO_Init+0x20a>
 80043c6:	2307      	movs	r3, #7
 80043c8:	e00e      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043ca:	2308      	movs	r3, #8
 80043cc:	e00c      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043ce:	2306      	movs	r3, #6
 80043d0:	e00a      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043d2:	2305      	movs	r3, #5
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043d6:	2304      	movs	r3, #4
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x228>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_GPIO_Init+0x310>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004406:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442a:	4a32      	ldr	r2, [pc, #200]	; (80044f4 <HAL_GPIO_Init+0x334>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004430:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_GPIO_Init+0x334>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_GPIO_Init+0x334>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044a8:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <HAL_GPIO_Init+0x334>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f ae90 	bls.w	80041dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40021400 	.word	0x40021400
 80044ec:	40021800 	.word	0x40021800
 80044f0:	40021c00 	.word	0x40021c00
 80044f4:	40013c00 	.word	0x40013c00

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e12b      	b.n	8004762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fee6 	bl	80022f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800455c:	f000 fd80 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a81      	ldr	r2, [pc, #516]	; (800476c <HAL_I2C_Init+0x274>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d807      	bhi.n	800457c <HAL_I2C_Init+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_I2C_Init+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e006      	b.n	800458a <HAL_I2C_Init+0x92>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a7d      	ldr	r2, [pc, #500]	; (8004774 <HAL_I2C_Init+0x27c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0e7      	b.n	8004762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a78      	ldr	r2, [pc, #480]	; (8004778 <HAL_I2C_Init+0x280>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	; (800476c <HAL_I2C_Init+0x274>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <HAL_I2C_Init+0xd4>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_I2C_Init+0xe8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a69      	ldr	r2, [pc, #420]	; (800477c <HAL_I2C_Init+0x284>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	3301      	adds	r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	495c      	ldr	r1, [pc, #368]	; (800476c <HAL_I2C_Init+0x274>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d819      	bhi.n	8004634 <HAL_I2C_Init+0x13c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e59      	subs	r1, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fbb1 f3f3 	udiv	r3, r1, r3
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004614:	400b      	ands	r3, r1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_I2C_Init+0x138>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e59      	subs	r1, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fbb1 f3f3 	udiv	r3, r1, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	e051      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004630:	2304      	movs	r3, #4
 8004632:	e04f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <HAL_I2C_Init+0x168>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e58      	subs	r0, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e012      	b.n	8004686 <HAL_I2C_Init+0x18e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x196>
 800468a:	2301      	movs	r3, #1
 800468c:	e022      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <HAL_I2C_Init+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1e58      	subs	r0, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	440b      	add	r3, r1
 80046a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b2:	e00f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	0099      	lsls	r1, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	6809      	ldr	r1, [r1, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6911      	ldr	r1, [r2, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	000186a0 	.word	0x000186a0
 8004770:	001e847f 	.word	0x001e847f
 8004774:	003d08ff 	.word	0x003d08ff
 8004778:	431bde83 	.word	0x431bde83
 800477c:	10624dd3 	.word	0x10624dd3

08004780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e267      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4b85      	ldr	r3, [pc, #532]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d112      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c2:	d10b      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05b      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d157      	bne.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e242      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x74>
 80047e6:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a75      	ldr	r2, [pc, #468]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x98>
 80047fe:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6f      	ldr	r2, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 8004818:	4b69      	ldr	r3, [pc, #420]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b66      	ldr	r3, [pc, #408]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7ff f94a 	bl	8003ad0 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7ff f946 	bl	8003ad0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e207      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xc0>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7ff f936 	bl	8003ad0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7ff f932 	bl	8003ad0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1f3      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004896:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1c7      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4937      	ldr	r1, [pc, #220]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7ff f8eb 	bl	8003ad0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fe:	f7ff f8e7 	bl	8003ad0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1a8      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4925      	ldr	r1, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7ff f8ca 	bl	8003ad0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004940:	f7ff f8c6 	bl	8003ad0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e187      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7ff f8aa 	bl	8003ad0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7ff f8a6 	bl	8003ad0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e167      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x200>
 800499e:	e01b      	b.n	80049d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7ff f893 	bl	8003ad0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e00e      	b.n	80049cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ae:	f7ff f88f 	bl	8003ad0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d907      	bls.n	80049cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e150      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470000 	.word	0x42470000
 80049c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8097 	beq.w	8004b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b81      	ldr	r3, [pc, #516]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	4b7d      	ldr	r3, [pc, #500]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b7a      	ldr	r3, [pc, #488]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b74      	ldr	r3, [pc, #464]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7ff f84f 	bl	8003ad0 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7ff f84b 	bl	8003ad0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e10c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2ea>
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a63      	ldr	r2, [pc, #396]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x30c>
 8004a72:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a5e      	ldr	r2, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	4b5c      	ldr	r3, [pc, #368]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a8c:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	4b55      	ldr	r3, [pc, #340]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7ff f810 	bl	8003ad0 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7ff f80c 	bl	8003ad0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0cb      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ee      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x334>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fffa 	bl	8003ad0 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fff6 	bl	8003ad0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0b5      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a1 	beq.w	8004c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1e:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d05c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d141      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fe ffca 	bl	8003ad0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fe ffc6 	bl	8003ad0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e087      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	491b      	ldr	r1, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fe ff9f 	bl	8003ad0 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fe ff9b 	bl	8003ad0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e05c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x416>
 8004bb4:	e054      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe ff88 	bl	8003ad0 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fe ff84 	bl	8003ad0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e045      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x444>
 8004be2:	e03d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e038      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x4ec>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d028      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d121      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d11a      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d111      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0cc      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90c      	bls.n	8004cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d044      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d003      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e067      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4934      	ldr	r1, [pc, #208]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fe feb6 	bl	8003ad0 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fe feb2 	bl	8003ad0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e04f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20c      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f821 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fe16 	bl	8003a48 <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	08010c5c 	.word	0x08010c5c
 8004e34:	20000038 	.word	0x20000038
 8004e38:	20000040 	.word	0x20000040

08004e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b094      	sub	sp, #80	; 0x50
 8004e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	647b      	str	r3, [r7, #68]	; 0x44
 8004e48:	2300      	movs	r3, #0
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e54:	4b79      	ldr	r3, [pc, #484]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d00d      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0x40>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	f200 80e1 	bhi.w	8005028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x34>
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e6e:	e0db      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e74:	e0db      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e76:	4b73      	ldr	r3, [pc, #460]	; (8005044 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e7a:	e0d8      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e7c:	4b6f      	ldr	r3, [pc, #444]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e86:	4b6d      	ldr	r3, [pc, #436]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d063      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e92:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	2200      	movs	r2, #0
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	0159      	lsls	r1, r3, #5
 8004ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec0:	0150      	lsls	r0, r2, #5
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	1a51      	subs	r1, r2, r1
 8004eca:	6139      	str	r1, [r7, #16]
 8004ecc:	4629      	mov	r1, r5
 8004ece:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	018b      	lsls	r3, r1, #6
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eea:	4651      	mov	r1, sl
 8004eec:	018a      	lsls	r2, r1, #6
 8004eee:	4651      	mov	r1, sl
 8004ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f0e:	4690      	mov	r8, r2
 8004f10:	4699      	mov	r9, r3
 8004f12:	4623      	mov	r3, r4
 8004f14:	eb18 0303 	adds.w	r3, r8, r3
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	eb49 0303 	adc.w	r3, r9, r3
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	024b      	lsls	r3, r1, #9
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f38:	4621      	mov	r1, r4
 8004f3a:	024a      	lsls	r2, r1, #9
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f42:	2200      	movs	r2, #0
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4c:	f7fb fcfa 	bl	8000944 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	e058      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5a:	4b38      	ldr	r3, [pc, #224]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	2200      	movs	r2, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	4611      	mov	r1, r2
 8004f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	f04f 0000 	mov.w	r0, #0
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	0159      	lsls	r1, r3, #5
 8004f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f86:	0150      	lsls	r0, r2, #5
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f92:	4649      	mov	r1, r9
 8004f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fac:	ebb2 040a 	subs.w	r4, r2, sl
 8004fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	00eb      	lsls	r3, r5, #3
 8004fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc2:	00e2      	lsls	r2, r4, #3
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4643      	mov	r3, r8
 8004fca:	18e3      	adds	r3, r4, r3
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	464b      	mov	r3, r9
 8004fd0:	eb45 0303 	adc.w	r3, r5, r3
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	028b      	lsls	r3, r1, #10
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fec:	4621      	mov	r1, r4
 8004fee:	028a      	lsls	r2, r1, #10
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	61fa      	str	r2, [r7, #28]
 8004ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005000:	f7fb fca0 	bl	8000944 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4613      	mov	r3, r2
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_GetSysClockFreq+0x200>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800501c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800501e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005026:	e002      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetSysClockFreq+0x204>)
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800502c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005030:	4618      	mov	r0, r3
 8005032:	3750      	adds	r7, #80	; 0x50
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800
 8005040:	00f42400 	.word	0x00f42400
 8005044:	007a1200 	.word	0x007a1200

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RCC_GetHCLKFreq+0x14>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000038 	.word	0x20000038

08005060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005064:	f7ff fff0 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4903      	ldr	r1, [pc, #12]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40023800 	.word	0x40023800
 8005084:	08010c6c 	.word	0x08010c6c

08005088 <LL_EXTI_EnableIT_0_31>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4904      	ldr	r1, [pc, #16]	; (80050a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40013c00 	.word	0x40013c00

080050ac <LL_EXTI_DisableIT_0_31>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	43db      	mvns	r3, r3
 80050bc:	4904      	ldr	r1, [pc, #16]	; (80050d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80050be:	4013      	ands	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40013c00 	.word	0x40013c00

080050d4 <LL_EXTI_EnableEvent_0_31>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	4904      	ldr	r1, [pc, #16]	; (80050f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40013c00 	.word	0x40013c00

080050f8 <LL_EXTI_DisableEvent_0_31>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	43db      	mvns	r3, r3
 8005108:	4904      	ldr	r1, [pc, #16]	; (800511c <LL_EXTI_DisableEvent_0_31+0x24>)
 800510a:	4013      	ands	r3, r2
 800510c:	604b      	str	r3, [r1, #4]
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40013c00 	.word	0x40013c00

08005120 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	4904      	ldr	r1, [pc, #16]	; (8005140 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40013c00 	.word	0x40013c00

08005144 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	43db      	mvns	r3, r3
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005156:	4013      	ands	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40013c00 	.word	0x40013c00

0800516c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	4904      	ldr	r1, [pc, #16]	; (800518c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4313      	orrs	r3, r2
 800517e:	60cb      	str	r3, [r1, #12]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40013c00 	.word	0x40013c00

08005190 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	43db      	mvns	r3, r3
 80051a0:	4904      	ldr	r1, [pc, #16]	; (80051b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	60cb      	str	r3, [r1, #12]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40013c00 	.word	0x40013c00

080051b8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	791b      	ldrb	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d065      	beq.n	8005298 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d06c      	beq.n	80052ae <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	795b      	ldrb	r3, [r3, #5]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d01c      	beq.n	8005216 <LL_EXTI_Init+0x5e>
 80051dc:	2b02      	cmp	r3, #2
 80051de:	dc25      	bgt.n	800522c <LL_EXTI_Init+0x74>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <LL_EXTI_Init+0x32>
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d00b      	beq.n	8005200 <LL_EXTI_Init+0x48>
 80051e8:	e020      	b.n	800522c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff82 	bl	80050f8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ff45 	bl	8005088 <LL_EXTI_EnableIT_0_31>
          break;
 80051fe:	e018      	b.n	8005232 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff51 	bl	80050ac <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ff60 	bl	80050d4 <LL_EXTI_EnableEvent_0_31>
          break;
 8005214:	e00d      	b.n	8005232 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff34 	bl	8005088 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff55 	bl	80050d4 <LL_EXTI_EnableEvent_0_31>
          break;
 800522a:	e002      	b.n	8005232 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
          break;
 8005230:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	799b      	ldrb	r3, [r3, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d039      	beq.n	80052ae <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	799b      	ldrb	r3, [r3, #6]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d01c      	beq.n	800527c <LL_EXTI_Init+0xc4>
 8005242:	2b03      	cmp	r3, #3
 8005244:	dc25      	bgt.n	8005292 <LL_EXTI_Init+0xda>
 8005246:	2b01      	cmp	r3, #1
 8005248:	d002      	beq.n	8005250 <LL_EXTI_Init+0x98>
 800524a:	2b02      	cmp	r3, #2
 800524c:	d00b      	beq.n	8005266 <LL_EXTI_Init+0xae>
 800524e:	e020      	b.n	8005292 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff9b 	bl	8005190 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ff5e 	bl	8005120 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005264:	e024      	b.n	80052b0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff6a 	bl	8005144 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff79 	bl	800516c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800527a:	e019      	b.n	80052b0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff ff4d 	bl	8005120 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff6e 	bl	800516c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005290:	e00e      	b.n	80052b0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
            break;
 8005296:	e00b      	b.n	80052b0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff ff05 	bl	80050ac <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff ff26 	bl	80050f8 <LL_EXTI_DisableEvent_0_31>
 80052ac:	e000      	b.n	80052b0 <LL_EXTI_Init+0xf8>
      }
 80052ae:	bf00      	nop
  }
  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <LL_GPIO_SetPinMode>:
{
 80052ba:	b480      	push	{r7}
 80052bc:	b089      	sub	sp, #36	; 0x24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	613b      	str	r3, [r7, #16]
  return result;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2103      	movs	r1, #3
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	fa93 f3a3 	rbit	r3, r3
 80052f4:	61bb      	str	r3, [r7, #24]
  return result;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	fab3 f383 	clz	r3, r3
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]
}
 800530c:	bf00      	nop
 800530e:	3724      	adds	r7, #36	; 0x24
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_GPIO_SetPinOutputType>:
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	43db      	mvns	r3, r3
 800532c:	401a      	ands	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	431a      	orrs	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	605a      	str	r2, [r3, #4]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_GPIO_SetPinSpeed>:
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	; 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	613b      	str	r3, [r7, #16]
  return result;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	fab3 f383 	clz	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2103      	movs	r1, #3
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	fa93 f3a3 	rbit	r3, r3
 8005382:	61bb      	str	r3, [r7, #24]
  return result;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	609a      	str	r2, [r3, #8]
}
 800539a:	bf00      	nop
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_GPIO_SetPinPull>:
{
 80053a6:	b480      	push	{r7}
 80053a8:	b089      	sub	sp, #36	; 0x24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	613b      	str	r3, [r7, #16]
  return result;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	2103      	movs	r1, #3
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	401a      	ands	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	61bb      	str	r3, [r7, #24]
  return result;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	431a      	orrs	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	60da      	str	r2, [r3, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3724      	adds	r7, #36	; 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_GPIO_SetAFPin_0_7>:
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	613b      	str	r3, [r7, #16]
  return result;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	210f      	movs	r1, #15
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	401a      	ands	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	fa93 f3a3 	rbit	r3, r3
 800543e:	61bb      	str	r3, [r7, #24]
  return result;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	3724      	adds	r7, #36	; 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_GPIO_SetAFPin_8_15>:
{
 8005462:	b480      	push	{r7}
 8005464:	b089      	sub	sp, #36	; 0x24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	613b      	str	r3, [r7, #16]
  return result;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	210f      	movs	r1, #15
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	61bb      	str	r3, [r7, #24]
  return result;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	fab3 f383 	clz	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80054b8:	bf00      	nop
 80054ba:	3724      	adds	r7, #36	; 0x24
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa93 f3a3 	rbit	r3, r3
 80054e2:	613b      	str	r3, [r7, #16]
  return result;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80054ee:	e050      	b.n	8005592 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	4013      	ands	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d042      	beq.n	800558c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d003      	beq.n	8005516 <LL_GPIO_Init+0x52>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d10d      	bne.n	8005532 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	461a      	mov	r2, r3
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff12 	bl	8005348 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	461a      	mov	r2, r3
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fef3 	bl	8005318 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	461a      	mov	r2, r3
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff ff33 	bl	80053a6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11a      	bne.n	800557e <LL_GPIO_Init+0xba>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	60bb      	str	r3, [r7, #8]
  return result;
 8005554:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005556:	fab3 f383 	clz	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b07      	cmp	r3, #7
 800555e:	d807      	bhi.n	8005570 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	461a      	mov	r2, r3
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff4b 	bl	8005404 <LL_GPIO_SetAFPin_0_7>
 800556e:	e006      	b.n	800557e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	461a      	mov	r2, r3
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff72 	bl	8005462 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	461a      	mov	r2, r3
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fe97 	bl	80052ba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1a7      	bne.n	80054f0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <LL_RCC_GetSysClkSource+0x18>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40023800 	.word	0x40023800

080055c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <LL_RCC_GetAHBPrescaler+0x18>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800

080055e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <LL_RCC_GetAPB1Prescaler+0x18>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800

0800561c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <LL_RCC_PLL_GetMainSource+0x18>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40023800 	.word	0x40023800

08005638 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <LL_RCC_PLL_GetN+0x18>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	099b      	lsrs	r3, r3, #6
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005646:	4618      	mov	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40023800 	.word	0x40023800

08005654 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <LL_RCC_PLL_GetP+0x18>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800

08005670 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <LL_RCC_PLL_GetDivider+0x18>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800

0800568c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005694:	f000 f820 	bl	80056d8 <RCC_GetSystemClockFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f840 	bl	8005728 <RCC_GetHCLKClockFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f84e 	bl	8005754 <RCC_GetPCLK1ClockFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f85a 	bl	800577c <RCC_GetPCLK2ClockFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80056e2:	f7ff ff63 	bl	80055ac <LL_RCC_GetSysClkSource>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d00c      	beq.n	8005706 <RCC_GetSystemClockFreq+0x2e>
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d80f      	bhi.n	8005710 <RCC_GetSystemClockFreq+0x38>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <RCC_GetSystemClockFreq+0x22>
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d003      	beq.n	8005700 <RCC_GetSystemClockFreq+0x28>
 80056f8:	e00a      	b.n	8005710 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <RCC_GetSystemClockFreq+0x48>)
 80056fc:	607b      	str	r3, [r7, #4]
      break;
 80056fe:	e00a      	b.n	8005716 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <RCC_GetSystemClockFreq+0x4c>)
 8005702:	607b      	str	r3, [r7, #4]
      break;
 8005704:	e007      	b.n	8005716 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005706:	2008      	movs	r0, #8
 8005708:	f000 f84c 	bl	80057a4 <RCC_PLL_GetFreqDomain_SYS>
 800570c:	6078      	str	r0, [r7, #4]
      break;
 800570e:	e002      	b.n	8005716 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <RCC_GetSystemClockFreq+0x48>)
 8005712:	607b      	str	r3, [r7, #4]
      break;
 8005714:	bf00      	nop
  }

  return frequency;
 8005716:	687b      	ldr	r3, [r7, #4]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	00f42400 	.word	0x00f42400
 8005724:	007a1200 	.word	0x007a1200

08005728 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005730:	f7ff ff4a 	bl	80055c8 <LL_RCC_GetAHBPrescaler>
 8005734:	4603      	mov	r3, r0
 8005736:	091b      	lsrs	r3, r3, #4
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	4a04      	ldr	r2, [pc, #16]	; (8005750 <RCC_GetHCLKClockFreq+0x28>)
 800573e:	5cd3      	ldrb	r3, [r2, r3]
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	40d3      	lsrs	r3, r2
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	08010c5c 	.word	0x08010c5c

08005754 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800575c:	f7ff ff42 	bl	80055e4 <LL_RCC_GetAPB1Prescaler>
 8005760:	4603      	mov	r3, r0
 8005762:	0a9b      	lsrs	r3, r3, #10
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <RCC_GetPCLK1ClockFreq+0x24>)
 8005766:	5cd3      	ldrb	r3, [r2, r3]
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	40d3      	lsrs	r3, r2
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	08010c6c 	.word	0x08010c6c

0800577c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005784:	f7ff ff3c 	bl	8005600 <LL_RCC_GetAPB2Prescaler>
 8005788:	4603      	mov	r3, r0
 800578a:	0b5b      	lsrs	r3, r3, #13
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800578e:	5cd3      	ldrb	r3, [r2, r3]
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	40d3      	lsrs	r3, r2
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	08010c6c 	.word	0x08010c6c

080057a4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80057b8:	f7ff ff30 	bl	800561c <LL_RCC_PLL_GetMainSource>
 80057bc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d003      	beq.n	80057d4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80057cc:	e005      	b.n	80057da <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80057d0:	617b      	str	r3, [r7, #20]
      break;
 80057d2:	e005      	b.n	80057e0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80057d6:	617b      	str	r3, [r7, #20]
      break;
 80057d8:	e002      	b.n	80057e0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80057dc:	617b      	str	r3, [r7, #20]
      break;
 80057de:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d113      	bne.n	800580e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80057e6:	f7ff ff43 	bl	8005670 <LL_RCC_PLL_GetDivider>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fbb3 f4f2 	udiv	r4, r3, r2
 80057f2:	f7ff ff21 	bl	8005638 <LL_RCC_PLL_GetN>
 80057f6:	4603      	mov	r3, r0
 80057f8:	fb03 f404 	mul.w	r4, r3, r4
 80057fc:	f7ff ff2a 	bl	8005654 <LL_RCC_PLL_GetP>
 8005800:	4603      	mov	r3, r0
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	3301      	adds	r3, #1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fbb4 f3f3 	udiv	r3, r4, r3
 800580c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800580e:	693b      	ldr	r3, [r7, #16]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	00f42400 	.word	0x00f42400
 800581c:	007a1200 	.word	0x007a1200

08005820 <LL_SPI_IsEnabled>:
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d101      	bne.n	8005838 <LL_SPI_IsEnabled+0x18>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <LL_SPI_IsEnabled+0x1a>
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ffd3 	bl	8005820 <LL_SPI_IsEnabled>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d139      	bne.n	80058f4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005888:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	6811      	ldr	r1, [r2, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	6852      	ldr	r2, [r2, #4]
 8005894:	4311      	orrs	r1, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	4311      	orrs	r1, r2
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	68d2      	ldr	r2, [r2, #12]
 80058a0:	4311      	orrs	r1, r2
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	6912      	ldr	r2, [r2, #16]
 80058a6:	4311      	orrs	r1, r2
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	6952      	ldr	r2, [r2, #20]
 80058ac:	4311      	orrs	r1, r2
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	6992      	ldr	r2, [r2, #24]
 80058b2:	4311      	orrs	r1, r2
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	69d2      	ldr	r2, [r2, #28]
 80058b8:	4311      	orrs	r1, r2
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	6a12      	ldr	r2, [r2, #32]
 80058be:	430a      	orrs	r2, r1
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f023 0204 	bic.w	r2, r3, #4
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e2:	d105      	bne.n	80058f0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ffab 	bl	8005846 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	61da      	str	r2, [r3, #28]
  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <LL_TIM_SetPrescaler>:
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <LL_TIM_SetAutoReload>:
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_TIM_SetRepetitionCounter>:
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <LL_TIM_OC_SetCompareCH1>:
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <LL_TIM_OC_SetCompareCH2>:
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <LL_TIM_OC_SetCompareCH3>:
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <LL_TIM_OC_SetCompareCH4>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f043 0201 	orr.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	615a      	str	r2, [r3, #20]
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3d      	ldr	r2, [pc, #244]	; (8005af8 <LL_TIM_Init+0x108>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <LL_TIM_Init+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <LL_TIM_Init+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <LL_TIM_Init+0x10c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <LL_TIM_Init+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a39      	ldr	r2, [pc, #228]	; (8005b00 <LL_TIM_Init+0x110>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <LL_TIM_Init+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a38      	ldr	r2, [pc, #224]	; (8005b04 <LL_TIM_Init+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <LL_TIM_Init+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a37      	ldr	r2, [pc, #220]	; (8005b08 <LL_TIM_Init+0x118>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d106      	bne.n	8005a3e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2d      	ldr	r2, [pc, #180]	; (8005af8 <LL_TIM_Init+0x108>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02b      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d027      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <LL_TIM_Init+0x10c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d023      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <LL_TIM_Init+0x110>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <LL_TIM_Init+0x114>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01b      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a27      	ldr	r2, [pc, #156]	; (8005b08 <LL_TIM_Init+0x118>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <LL_TIM_Init+0x11c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <LL_TIM_Init+0x120>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <LL_TIM_Init+0x124>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <LL_TIM_Init+0x128>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <LL_TIM_Init+0x12c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <LL_TIM_Init+0xae>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <LL_TIM_Init+0x130>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d106      	bne.n	8005aac <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff34 	bl	8005926 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ff20 	bl	800590a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <LL_TIM_Init+0x108>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <LL_TIM_Init+0xea>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <LL_TIM_Init+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d105      	bne.n	8005ae6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ff2e 	bl	8005942 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff71 	bl	80059ce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800
 8005b18:	40001800 	.word	0x40001800
 8005b1c:	40001c00 	.word	0x40001c00
 8005b20:	40002000 	.word	0x40002000

08005b24 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	d027      	beq.n	8005b8c <LL_TIM_OC_Init+0x68>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d82a      	bhi.n	8005b9a <LL_TIM_OC_Init+0x76>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4a:	d018      	beq.n	8005b7e <LL_TIM_OC_Init+0x5a>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b52:	d822      	bhi.n	8005b9a <LL_TIM_OC_Init+0x76>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d003      	beq.n	8005b62 <LL_TIM_OC_Init+0x3e>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d007      	beq.n	8005b70 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005b60:	e01b      	b.n	8005b9a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f81f 	bl	8005ba8 <OC1Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6e:	e015      	b.n	8005b9c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f884 	bl	8005c80 <OC2Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	e00e      	b.n	8005b9c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f8ed 	bl	8005d60 <OC3Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8a:	e007      	b.n	8005b9c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f956 	bl	8005e40 <OC4Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]
      break;
 8005b98:	e000      	b.n	8005b9c <LL_TIM_OC_Init+0x78>
      break;
 8005b9a:	bf00      	nop
  }

  return result;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0202 	bic.w	r2, r3, #2
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <OC1Config+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <OC1Config+0x6a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <OC1Config+0xd4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d11e      	bne.n	8005c50 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0208 	bic.w	r2, r3, #8
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0204 	bic.w	r2, r3, #4
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fe7b 	bl	800595e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400

08005c80 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0210 	bic.w	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0220 	bic.w	r2, r3, #32
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <OC2Config+0xd8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <OC2Config+0x70>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <OC2Config+0xdc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d11f      	bne.n	8005d30 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	019b      	lsls	r3, r3, #6
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	019b      	lsls	r3, r3, #6
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe19 	bl	800597a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40010400 	.word	0x40010400

08005d60 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <OC3Config+0xd8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <OC3Config+0x6e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <OC3Config+0xdc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d11f      	bne.n	8005e0e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	015b      	lsls	r3, r3, #5
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fdb8 	bl	8005996 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400

08005e40 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	031b      	lsls	r3, r3, #12
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	031b      	lsls	r3, r3, #12
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <OC4Config+0xa8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <OC4Config+0x70>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <OC4Config+0xac>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d107      	bne.n	8005ec0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	019b      	lsls	r3, r3, #6
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fd6d 	bl	80059b2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <LL_USART_IsEnabled>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <LL_USART_SetStopBitsLength>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	611a      	str	r2, [r3, #16]
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_USART_SetHWFlowCtrl>:
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	615a      	str	r2, [r3, #20]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_USART_SetBaudRate>:
{
 8005f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f68:	b0c0      	sub	sp, #256	; 0x100
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f70:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005f74:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005f78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f84:	f040 810c 	bne.w	80061a0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005f88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	1891      	adds	r1, r2, r2
 8005fa0:	6639      	str	r1, [r7, #96]	; 0x60
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005faa:	4621      	mov	r1, r4
 8005fac:	eb12 0801 	adds.w	r8, r2, r1
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	eb43 0901 	adc.w	r9, r3, r1
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fca:	4690      	mov	r8, r2
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	eb18 0303 	adds.w	r3, r8, r3
 8005fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fd8:	462b      	mov	r3, r5
 8005fda:	eb49 0303 	adc.w	r3, r9, r3
 8005fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	469a      	mov	sl, r3
 8005fea:	4693      	mov	fp, r2
 8005fec:	eb1a 030a 	adds.w	r3, sl, sl
 8005ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff2:	eb4b 030b 	adc.w	r3, fp, fp
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006000:	f7fa fca0 	bl	8000944 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4b64      	ldr	r3, [pc, #400]	; (800619c <LL_USART_SetBaudRate+0x238>)
 800600a:	fba3 2302 	umull	r2, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	b29b      	uxth	r3, r3
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	b29c      	uxth	r4, r3
 8006016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800601a:	2200      	movs	r2, #0
 800601c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006020:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006024:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	1891      	adds	r1, r2, r2
 800602e:	6539      	str	r1, [r7, #80]	; 0x50
 8006030:	415b      	adcs	r3, r3
 8006032:	657b      	str	r3, [r7, #84]	; 0x54
 8006034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006038:	4641      	mov	r1, r8
 800603a:	1851      	adds	r1, r2, r1
 800603c:	64b9      	str	r1, [r7, #72]	; 0x48
 800603e:	4649      	mov	r1, r9
 8006040:	414b      	adcs	r3, r1
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8006050:	4659      	mov	r1, fp
 8006052:	00cb      	lsls	r3, r1, #3
 8006054:	4651      	mov	r1, sl
 8006056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605a:	4651      	mov	r1, sl
 800605c:	00ca      	lsls	r2, r1, #3
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	4603      	mov	r3, r0
 8006064:	4642      	mov	r2, r8
 8006066:	189b      	adds	r3, r3, r2
 8006068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800606c:	464b      	mov	r3, r9
 800606e:	460a      	mov	r2, r1
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006078:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800607c:	2200      	movs	r2, #0
 800607e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006082:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8006086:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800608a:	460b      	mov	r3, r1
 800608c:	18db      	adds	r3, r3, r3
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
 8006090:	4613      	mov	r3, r2
 8006092:	eb42 0303 	adc.w	r3, r2, r3
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
 8006098:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800609c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80060a0:	f7fa fc50 	bl	8000944 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	4b3c      	ldr	r3, [pc, #240]	; (800619c <LL_USART_SetBaudRate+0x238>)
 80060ac:	fba3 2301 	umull	r2, r3, r3, r1
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2264      	movs	r2, #100	; 0x64
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	1acb      	subs	r3, r1, r3
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060c0:	4b36      	ldr	r3, [pc, #216]	; (800619c <LL_USART_SetBaudRate+0x238>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	4423      	add	r3, r4
 80060d6:	b29c      	uxth	r4, r3
 80060d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060e2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060e6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80060ea:	4642      	mov	r2, r8
 80060ec:	464b      	mov	r3, r9
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80060f2:	415b      	adcs	r3, r3
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060fa:	4641      	mov	r1, r8
 80060fc:	1851      	adds	r1, r2, r1
 80060fe:	6339      	str	r1, [r7, #48]	; 0x30
 8006100:	4649      	mov	r1, r9
 8006102:	414b      	adcs	r3, r1
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006112:	4659      	mov	r1, fp
 8006114:	00cb      	lsls	r3, r1, #3
 8006116:	4651      	mov	r1, sl
 8006118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611c:	4651      	mov	r1, sl
 800611e:	00ca      	lsls	r2, r1, #3
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	4603      	mov	r3, r0
 8006126:	4642      	mov	r2, r8
 8006128:	189b      	adds	r3, r3, r2
 800612a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800612e:	464b      	mov	r3, r9
 8006130:	460a      	mov	r2, r1
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800613a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006144:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006148:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800615e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006162:	f7fa fbef 	bl	8000944 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <LL_USART_SetBaudRate+0x238>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a07      	ldr	r2, [pc, #28]	; (800619c <LL_USART_SetBaudRate+0x238>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	b29b      	uxth	r3, r3
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	b29b      	uxth	r3, r3
 800618e:	4423      	add	r3, r4
 8006190:	b29b      	uxth	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006198:	609a      	str	r2, [r3, #8]
}
 800619a:	e107      	b.n	80063ac <LL_USART_SetBaudRate+0x448>
 800619c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80061a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061ae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80061b2:	4642      	mov	r2, r8
 80061b4:	464b      	mov	r3, r9
 80061b6:	1891      	adds	r1, r2, r2
 80061b8:	6239      	str	r1, [r7, #32]
 80061ba:	415b      	adcs	r3, r3
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c2:	4641      	mov	r1, r8
 80061c4:	1854      	adds	r4, r2, r1
 80061c6:	4649      	mov	r1, r9
 80061c8:	eb43 0501 	adc.w	r5, r3, r1
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	00eb      	lsls	r3, r5, #3
 80061d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061da:	00e2      	lsls	r2, r4, #3
 80061dc:	4614      	mov	r4, r2
 80061de:	461d      	mov	r5, r3
 80061e0:	4643      	mov	r3, r8
 80061e2:	18e3      	adds	r3, r4, r3
 80061e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061e8:	464b      	mov	r3, r9
 80061ea:	eb45 0303 	adc.w	r3, r5, r3
 80061ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800620c:	4629      	mov	r1, r5
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	4621      	mov	r1, r4
 8006212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006216:	4621      	mov	r1, r4
 8006218:	008a      	lsls	r2, r1, #2
 800621a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800621e:	f7fa fb91 	bl	8000944 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4b64      	ldr	r3, [pc, #400]	; (80063b8 <LL_USART_SetBaudRate+0x454>)
 8006228:	fba3 2302 	umull	r2, r3, r3, r2
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	b29b      	uxth	r3, r3
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	b29c      	uxth	r4, r3
 8006234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006238:	2200      	movs	r2, #0
 800623a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800623e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006242:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	1891      	adds	r1, r2, r2
 800624c:	61b9      	str	r1, [r7, #24]
 800624e:	415b      	adcs	r3, r3
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006256:	4641      	mov	r1, r8
 8006258:	1851      	adds	r1, r2, r1
 800625a:	6139      	str	r1, [r7, #16]
 800625c:	4649      	mov	r1, r9
 800625e:	414b      	adcs	r3, r1
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800626e:	4659      	mov	r1, fp
 8006270:	00cb      	lsls	r3, r1, #3
 8006272:	4651      	mov	r1, sl
 8006274:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006278:	4651      	mov	r1, sl
 800627a:	00ca      	lsls	r2, r1, #3
 800627c:	4610      	mov	r0, r2
 800627e:	4619      	mov	r1, r3
 8006280:	4603      	mov	r3, r0
 8006282:	4642      	mov	r2, r8
 8006284:	189b      	adds	r3, r3, r2
 8006286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800628a:	464b      	mov	r3, r9
 800628c:	460a      	mov	r2, r1
 800628e:	eb42 0303 	adc.w	r3, r2, r3
 8006292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800629a:	2200      	movs	r2, #0
 800629c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80062b0:	4649      	mov	r1, r9
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	4641      	mov	r1, r8
 80062b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ba:	4641      	mov	r1, r8
 80062bc:	008a      	lsls	r2, r1, #2
 80062be:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80062c2:	f7fa fb3f 	bl	8000944 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <LL_USART_SetBaudRate+0x454>)
 80062cc:	fba3 1302 	umull	r1, r3, r3, r2
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	2164      	movs	r1, #100	; 0x64
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	3332      	adds	r3, #50	; 0x32
 80062de:	4a36      	ldr	r2, [pc, #216]	; (80063b8 <LL_USART_SetBaudRate+0x454>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	4423      	add	r3, r4
 80062f0:	b29c      	uxth	r4, r3
 80062f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062f6:	2200      	movs	r2, #0
 80062f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	1891      	adds	r1, r2, r2
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	415b      	adcs	r3, r3
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006310:	4641      	mov	r1, r8
 8006312:	1851      	adds	r1, r2, r1
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	4649      	mov	r1, r9
 8006318:	414b      	adcs	r3, r1
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006328:	4659      	mov	r1, fp
 800632a:	00cb      	lsls	r3, r1, #3
 800632c:	4651      	mov	r1, sl
 800632e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006332:	4651      	mov	r1, sl
 8006334:	00ca      	lsls	r2, r1, #3
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	4603      	mov	r3, r0
 800633c:	4642      	mov	r2, r8
 800633e:	189b      	adds	r3, r3, r2
 8006340:	673b      	str	r3, [r7, #112]	; 0x70
 8006342:	464b      	mov	r3, r9
 8006344:	460a      	mov	r2, r1
 8006346:	eb42 0303 	adc.w	r3, r2, r3
 800634a:	677b      	str	r3, [r7, #116]	; 0x74
 800634c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006350:	2200      	movs	r2, #0
 8006352:	66bb      	str	r3, [r7, #104]	; 0x68
 8006354:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8006362:	4649      	mov	r1, r9
 8006364:	008b      	lsls	r3, r1, #2
 8006366:	4641      	mov	r1, r8
 8006368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636c:	4641      	mov	r1, r8
 800636e:	008a      	lsls	r2, r1, #2
 8006370:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006374:	f7fa fae6 	bl	8000944 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <LL_USART_SetBaudRate+0x454>)
 800637e:	fba3 1302 	umull	r1, r3, r3, r2
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	2164      	movs	r1, #100	; 0x64
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	3332      	adds	r3, #50	; 0x32
 8006390:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <LL_USART_SetBaudRate+0x454>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	b29b      	uxth	r3, r3
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4423      	add	r3, r4
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b8:	51eb851f 	.word	0x51eb851f

080063bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fd8e 	bl	8005ef0 <LL_USART_IsEnabled>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d15e      	bne.n	8006498 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063e2:	f023 030c 	bic.w	r3, r3, #12
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6851      	ldr	r1, [r2, #4]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	68d2      	ldr	r2, [r2, #12]
 80063ee:	4311      	orrs	r1, r2
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	6912      	ldr	r2, [r2, #16]
 80063f4:	4311      	orrs	r1, r2
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	6992      	ldr	r2, [r2, #24]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fd85 	bl	8005f18 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fd92 	bl	8005f3e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f934 	bl	800568c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <LL_USART_Init+0xe8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d102      	bne.n	8006432 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e021      	b.n	8006476 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <LL_USART_Init+0xec>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d102      	bne.n	8006440 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e01a      	b.n	8006476 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a1a      	ldr	r2, [pc, #104]	; (80064ac <LL_USART_Init+0xf0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d102      	bne.n	800644e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e013      	b.n	8006476 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <LL_USART_Init+0xf4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d102      	bne.n	800645c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e00c      	b.n	8006476 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <LL_USART_Init+0xf8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d102      	bne.n	800646a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e005      	b.n	8006476 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <LL_USART_Init+0xfc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006484:	2300      	movs	r3, #0
 8006486:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69b9      	ldr	r1, [r7, #24]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fd66 	bl	8005f64 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006498:	7ffb      	ldrb	r3, [r7, #31]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40011000 	.word	0x40011000
 80064a8:	40004400 	.word	0x40004400
 80064ac:	40004800 	.word	0x40004800
 80064b0:	40011400 	.word	0x40011400
 80064b4:	40004c00 	.word	0x40004c00
 80064b8:	40005000 	.word	0x40005000

080064bc <LCD_Index2Color_565>:
 80064bc:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80064c0:	4a06      	ldr	r2, [pc, #24]	; (80064dc <LCD_Index2Color_565+0x20>)
 80064c2:	5cd1      	ldrb	r1, [r2, r3]
 80064c4:	4a06      	ldr	r2, [pc, #24]	; (80064e0 <LCD_Index2Color_565+0x24>)
 80064c6:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80064ca:	f000 001f 	and.w	r0, r0, #31
 80064ce:	5cd3      	ldrb	r3, [r2, r3]
 80064d0:	5c10      	ldrb	r0, [r2, r0]
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80064d8:	4418      	add	r0, r3
 80064da:	4770      	bx	lr
 80064dc:	0800c5e8 	.word	0x0800c5e8
 80064e0:	0800c628 	.word	0x0800c628

080064e4 <_Color2Index_565>:
 80064e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80064e8:	4a06      	ldr	r2, [pc, #24]	; (8006504 <_Color2Index_565+0x20>)
 80064ea:	5cd1      	ldrb	r1, [r2, r3]
 80064ec:	4a06      	ldr	r2, [pc, #24]	; (8006508 <_Color2Index_565+0x24>)
 80064ee:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80064f2:	b2c0      	uxtb	r0, r0
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	5c10      	ldrb	r0, [r2, r0]
 80064f8:	02db      	lsls	r3, r3, #11
 80064fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80064fe:	4418      	add	r0, r3
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	0800c2e8 	.word	0x0800c2e8
 8006508:	0800c3e8 	.word	0x0800c3e8

0800650c <_GetIndexMask_565>:
 800650c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006510:	4770      	bx	lr
	...

08006514 <_Color2IndexBulk>:
 8006514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006516:	f8df e034 	ldr.w	lr, [pc, #52]	; 800654c <_Color2IndexBulk+0x38>
 800651a:	4e0b      	ldr	r6, [pc, #44]	; (8006548 <_Color2IndexBulk+0x34>)
 800651c:	f850 5b04 	ldr.w	r5, [r0], #4
 8006520:	f3c5 2407 	ubfx	r4, r5, #8, #8
 8006524:	3a01      	subs	r2, #1
 8006526:	f81e 7004 	ldrb.w	r7, [lr, r4]
 800652a:	f3c5 4407 	ubfx	r4, r5, #16, #8
 800652e:	b2ed      	uxtb	r5, r5
 8006530:	5d34      	ldrb	r4, [r6, r4]
 8006532:	5d75      	ldrb	r5, [r6, r5]
 8006534:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8006538:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 800653c:	442c      	add	r4, r5
 800653e:	800c      	strh	r4, [r1, #0]
 8006540:	4419      	add	r1, r3
 8006542:	d1eb      	bne.n	800651c <_Color2IndexBulk+0x8>
 8006544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006546:	bf00      	nop
 8006548:	0800c3e8 	.word	0x0800c3e8
 800654c:	0800c2e8 	.word	0x0800c2e8

08006550 <_Index2ColorBulk>:
 8006550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006552:	1e54      	subs	r4, r2, #1
 8006554:	fb03 0004 	mla	r0, r3, r4, r0
 8006558:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800655c:	3c01      	subs	r4, #1
 800655e:	4e0c      	ldr	r6, [pc, #48]	; (8006590 <_Index2ColorBulk+0x40>)
 8006560:	4f0c      	ldr	r7, [pc, #48]	; (8006594 <_Index2ColorBulk+0x44>)
 8006562:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006566:	8805      	ldrh	r5, [r0, #0]
 8006568:	0aec      	lsrs	r4, r5, #11
 800656a:	3a01      	subs	r2, #1
 800656c:	f816 e004 	ldrb.w	lr, [r6, r4]
 8006570:	f005 041f 	and.w	r4, r5, #31
 8006574:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8006578:	5d34      	ldrb	r4, [r6, r4]
 800657a:	5d7d      	ldrb	r5, [r7, r5]
 800657c:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 8006580:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8006584:	f841 4904 	str.w	r4, [r1], #-4
 8006588:	eba0 0003 	sub.w	r0, r0, r3
 800658c:	d1eb      	bne.n	8006566 <_Index2ColorBulk+0x16>
 800658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006590:	0800c628 	.word	0x0800c628
 8006594:	0800c5e8 	.word	0x0800c5e8

08006598 <_PushFreeBlock>:
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <_PushFreeBlock+0x20>)
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	3201      	adds	r2, #1
 800659e:	b510      	push	{r4, lr}
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80065a6:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80065aa:	604c      	str	r4, [r1, #4]
 80065ac:	2100      	movs	r1, #0
 80065ae:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 80065b2:	6258      	str	r0, [r3, #36]	; 0x24
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	bf00      	nop
 80065b8:	200082d8 	.word	0x200082d8

080065bc <_RemoveFreeBlock>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	490e      	ldr	r1, [pc, #56]	; (80065f8 <_RemoveFreeBlock+0x3c>)
 80065c0:	6844      	ldr	r4, [r0, #4]
 80065c2:	230f      	movs	r3, #15
 80065c4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80065c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065ca:	4294      	cmp	r4, r2
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <_RemoveFreeBlock+0x3c>)
 80065ce:	d203      	bcs.n	80065d8 <_RemoveFreeBlock+0x1c>
 80065d0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80065d4:	d2f6      	bcs.n	80065c4 <_RemoveFreeBlock+0x8>
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	2b0f      	cmp	r3, #15
 80065da:	d80c      	bhi.n	80065f6 <_RemoveFreeBlock+0x3a>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1b09      	subs	r1, r1, r4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	6881      	ldr	r1, [r0, #8]
 80065e4:	68c0      	ldr	r0, [r0, #12]
 80065e6:	b101      	cbz	r1, 80065ea <_RemoveFreeBlock+0x2e>
 80065e8:	6048      	str	r0, [r1, #4]
 80065ea:	b108      	cbz	r0, 80065f0 <_RemoveFreeBlock+0x34>
 80065ec:	6001      	str	r1, [r0, #0]
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065f4:	6459      	str	r1, [r3, #68]	; 0x44
 80065f6:	bd10      	pop	{r4, pc}
 80065f8:	200082d8 	.word	0x200082d8

080065fc <_AddFreeMemory>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	4e27      	ldr	r6, [pc, #156]	; (800669c <_AddFreeMemory+0xa0>)
 8006600:	68f3      	ldr	r3, [r6, #12]
 8006602:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8006604:	3b01      	subs	r3, #1
 8006606:	4605      	mov	r5, r0
 8006608:	4413      	add	r3, r2
 800660a:	1808      	adds	r0, r1, r0
 800660c:	4283      	cmp	r3, r0
 800660e:	460c      	mov	r4, r1
 8006610:	d305      	bcc.n	800661e <_AddFreeMemory+0x22>
 8006612:	594b      	ldr	r3, [r1, r5]
 8006614:	b91b      	cbnz	r3, 800661e <_AddFreeMemory+0x22>
 8006616:	6843      	ldr	r3, [r0, #4]
 8006618:	441d      	add	r5, r3
 800661a:	f7ff ffcf 	bl	80065bc <_RemoveFreeBlock>
 800661e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8006620:	429c      	cmp	r4, r3
 8006622:	d90a      	bls.n	800663a <_AddFreeMemory+0x3e>
 8006624:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8006628:	1be7      	subs	r7, r4, r7
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	b92b      	cbnz	r3, 800663a <_AddFreeMemory+0x3e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4638      	mov	r0, r7
 8006632:	441d      	add	r5, r3
 8006634:	f7ff ffc2 	bl	80065bc <_RemoveFreeBlock>
 8006638:	463c      	mov	r4, r7
 800663a:	230f      	movs	r3, #15
 800663c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006640:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006642:	4295      	cmp	r5, r2
 8006644:	d203      	bcs.n	800664e <_AddFreeMemory+0x52>
 8006646:	f113 33ff 	adds.w	r3, r3, #4294967295
 800664a:	d2f7      	bcs.n	800663c <_AddFreeMemory+0x40>
 800664c:	e023      	b.n	8006696 <_AddFreeMemory+0x9a>
 800664e:	2b0f      	cmp	r3, #15
 8006650:	d821      	bhi.n	8006696 <_AddFreeMemory+0x9a>
 8006652:	3308      	adds	r3, #8
 8006654:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006658:	1960      	adds	r0, r4, r5
 800665a:	6851      	ldr	r1, [r2, #4]
 800665c:	60a1      	str	r1, [r4, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	e884 0024 	stmia.w	r4, {r2, r5}
 8006664:	6124      	str	r4, [r4, #16]
 8006666:	f840 5c04 	str.w	r5, [r0, #-4]
 800666a:	f104 0008 	add.w	r0, r4, #8
 800666e:	b101      	cbz	r1, 8006672 <_AddFreeMemory+0x76>
 8006670:	6048      	str	r0, [r1, #4]
 8006672:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8006676:	60a1      	str	r1, [r4, #8]
 8006678:	60e2      	str	r2, [r4, #12]
 800667a:	6058      	str	r0, [r3, #4]
 800667c:	6833      	ldr	r3, [r6, #0]
 800667e:	4907      	ldr	r1, [pc, #28]	; (800669c <_AddFreeMemory+0xa0>)
 8006680:	18ea      	adds	r2, r5, r3
 8006682:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8006686:	6032      	str	r2, [r6, #0]
 8006688:	b92b      	cbnz	r3, 8006696 <_AddFreeMemory+0x9a>
 800668a:	68cb      	ldr	r3, [r1, #12]
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	688a      	ldr	r2, [r1, #8]
 8006690:	4293      	cmp	r3, r2
 8006692:	bf88      	it	hi
 8006694:	608b      	strhi	r3, [r1, #8]
 8006696:	4628      	mov	r0, r5
 8006698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669a:	bf00      	nop
 800669c:	200082d8 	.word	0x200082d8

080066a0 <_RemoveHoles>:
 80066a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	4f24      	ldr	r7, [pc, #144]	; (8006738 <_RemoveHoles+0x98>)
 80066a6:	68fe      	ldr	r6, [r7, #12]
 80066a8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80066aa:	3e01      	subs	r6, #1
 80066ac:	4683      	mov	fp, r0
 80066ae:	4426      	add	r6, r4
 80066b0:	46b8      	mov	r8, r7
 80066b2:	e894 0028 	ldmia.w	r4, {r3, r5}
 80066b6:	bbab      	cbnz	r3, 8006724 <_RemoveHoles+0x84>
 80066b8:	1961      	adds	r1, r4, r5
 80066ba:	428e      	cmp	r6, r1
 80066bc:	d932      	bls.n	8006724 <_RemoveHoles+0x84>
 80066be:	f854 a005 	ldr.w	sl, [r4, r5]
 80066c2:	f1ba 0f00 	cmp.w	sl, #0
 80066c6:	d02d      	beq.n	8006724 <_RemoveHoles+0x84>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d128      	bne.n	8006724 <_RemoveHoles+0x84>
 80066d2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80066d6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4620      	mov	r0, r4
 80066de:	9101      	str	r1, [sp, #4]
 80066e0:	f7ff ff6c 	bl	80065bc <_RemoveFreeBlock>
 80066e4:	9901      	ldr	r1, [sp, #4]
 80066e6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80066ea:	6808      	ldr	r0, [r1, #0]
 80066ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80066f0:	4620      	mov	r0, r4
 80066f2:	6054      	str	r4, [r2, #4]
 80066f4:	464a      	mov	r2, r9
 80066f6:	f005 fc1f 	bl	800bf38 <memmove>
 80066fa:	9b00      	ldr	r3, [sp, #0]
 80066fc:	459a      	cmp	sl, r3
 80066fe:	bf08      	it	eq
 8006700:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 8006704:	eb04 0109 	add.w	r1, r4, r9
 8006708:	bf08      	it	eq
 800670a:	1b5b      	subeq	r3, r3, r5
 800670c:	4628      	mov	r0, r5
 800670e:	bf08      	it	eq
 8006710:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8006714:	f7ff ff72 	bl	80065fc <_AddFreeMemory>
 8006718:	f1bb 0f00 	cmp.w	fp, #0
 800671c:	d001      	beq.n	8006722 <_RemoveHoles+0x82>
 800671e:	4558      	cmp	r0, fp
 8006720:	d205      	bcs.n	800672e <_RemoveHoles+0x8e>
 8006722:	464d      	mov	r5, r9
 8006724:	442c      	add	r4, r5
 8006726:	42a6      	cmp	r6, r4
 8006728:	d8c3      	bhi.n	80066b2 <_RemoveHoles+0x12>
 800672a:	2001      	movs	r0, #1
 800672c:	e000      	b.n	8006730 <_RemoveHoles+0x90>
 800672e:	2000      	movs	r0, #0
 8006730:	b003      	add	sp, #12
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	bf00      	nop
 8006738:	200082d8 	.word	0x200082d8

0800673c <GUI_ALLOC_FreeFixedBlock>:
 800673c:	b128      	cbz	r0, 800674a <GUI_ALLOC_FreeFixedBlock+0xe>
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <GUI_ALLOC_FreeFixedBlock+0x10>)
 8006740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006742:	6002      	str	r2, [r0, #0]
 8006744:	b102      	cbz	r2, 8006748 <GUI_ALLOC_FreeFixedBlock+0xc>
 8006746:	6050      	str	r0, [r2, #4]
 8006748:	63d8      	str	r0, [r3, #60]	; 0x3c
 800674a:	4770      	bx	lr
 800674c:	200082d8 	.word	0x200082d8

08006750 <GUI_ALLOC_h2p>:
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <GUI_ALLOC_h2p+0x10>)
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006758:	6840      	ldr	r0, [r0, #4]
 800675a:	3008      	adds	r0, #8
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	200082d8 	.word	0x200082d8

08006764 <GUI_ALLOC_LockH>:
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <GUI_ALLOC_LockH+0x18>)
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	3201      	adds	r2, #1
 800676a:	61da      	str	r2, [r3, #28]
 800676c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 8006772:	3301      	adds	r3, #1
 8006774:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 8006778:	f7ff bfea 	b.w	8006750 <GUI_ALLOC_h2p>
 800677c:	200082d8 	.word	0x200082d8

08006780 <GUI_ALLOC_UnlockH>:
 8006780:	b530      	push	{r4, r5, lr}
 8006782:	6803      	ldr	r3, [r0, #0]
 8006784:	4909      	ldr	r1, [pc, #36]	; (80067ac <GUI_ALLOC_UnlockH+0x2c>)
 8006786:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800678a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800678c:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d903      	bls.n	800679c <GUI_ALLOC_UnlockH+0x1c>
 8006794:	69ca      	ldr	r2, [r1, #28]
 8006796:	b10a      	cbz	r2, 800679c <GUI_ALLOC_UnlockH+0x1c>
 8006798:	3a01      	subs	r2, #1
 800679a:	61ca      	str	r2, [r1, #28]
 800679c:	3b01      	subs	r3, #1
 800679e:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6003      	str	r3, [r0, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	bd30      	pop	{r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	200082d8 	.word	0x200082d8

080067b0 <GUI_ALLOC_AssignMemory>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <GUI_ALLOC_AssignMemory+0xc>)
 80067b2:	f021 0103 	bic.w	r1, r1, #3
 80067b6:	6018      	str	r0, [r3, #0]
 80067b8:	6059      	str	r1, [r3, #4]
 80067ba:	4770      	bx	lr
 80067bc:	20000064 	.word	0x20000064

080067c0 <GUI_ALLOC_Free>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	b160      	cbz	r0, 80067e0 <GUI_ALLOC_Free+0x20>
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <GUI_ALLOC_Free+0x24>)
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80067ce:	6859      	ldr	r1, [r3, #4]
 80067d0:	6848      	ldr	r0, [r1, #4]
 80067d2:	f7ff ff13 	bl	80065fc <_AddFreeMemory>
 80067d6:	4620      	mov	r0, r4
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f7ff bedc 	b.w	8006598 <_PushFreeBlock>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	bf00      	nop
 80067e4:	200082d8 	.word	0x200082d8

080067e8 <_EnlargeBlocks>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	4c22      	ldr	r4, [pc, #136]	; (8006878 <_EnlargeBlocks+0x90>)
 80067ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067f0:	b93b      	cbnz	r3, 8006802 <_EnlargeBlocks+0x1a>
 80067f2:	4b22      	ldr	r3, [pc, #136]	; (800687c <_EnlargeBlocks+0x94>)
 80067f4:	689d      	ldr	r5, [r3, #8]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	3508      	adds	r5, #8
 80067fa:	fbb3 f5f5 	udiv	r5, r3, r5
 80067fe:	3502      	adds	r5, #2
 8006800:	e003      	b.n	800680a <_EnlargeBlocks+0x22>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	1d1d      	adds	r5, r3, #4
 8006806:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800680a:	00e8      	lsls	r0, r5, #3
 800680c:	f000 f8c0 	bl	8006990 <_Alloc>
 8006810:	4680      	mov	r8, r0
 8006812:	b360      	cbz	r0, 800686e <_EnlargeBlocks+0x86>
 8006814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006816:	6922      	ldr	r2, [r4, #16]
 8006818:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800681a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800681e:	00d2      	lsls	r2, r2, #3
 8006820:	685e      	ldr	r6, [r3, #4]
 8006822:	4b17      	ldr	r3, [pc, #92]	; (8006880 <_EnlargeBlocks+0x98>)
 8006824:	3608      	adds	r6, #8
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4630      	mov	r0, r6
 800682a:	4798      	blx	r3
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	6366      	str	r6, [r4, #52]	; 0x34
 8006830:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8006834:	4613      	mov	r3, r2
 8006836:	1e69      	subs	r1, r5, #1
 8006838:	428b      	cmp	r3, r1
 800683a:	d205      	bcs.n	8006848 <_EnlargeBlocks+0x60>
 800683c:	3301      	adds	r3, #1
 800683e:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 8006842:	f840 3c04 	str.w	r3, [r0, #-4]
 8006846:	e7f7      	b.n	8006838 <_EnlargeBlocks+0x50>
 8006848:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800684c:	f04f 0800 	mov.w	r8, #0
 8006850:	f8c6 8004 	str.w	r8, [r6, #4]
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	6262      	str	r2, [r4, #36]	; 0x24
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	442b      	add	r3, r5
 800685c:	6063      	str	r3, [r4, #4]
 800685e:	6125      	str	r5, [r4, #16]
 8006860:	4638      	mov	r0, r7
 8006862:	b13f      	cbz	r7, 8006874 <_EnlargeBlocks+0x8c>
 8006864:	f7ff ffac 	bl	80067c0 <GUI_ALLOC_Free>
 8006868:	4640      	mov	r0, r8
 800686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686e:	2001      	movs	r0, #1
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006878:	200082d8 	.word	0x200082d8
 800687c:	20000064 	.word	0x20000064
 8006880:	20000018 	.word	0x20000018

08006884 <_InitOnce>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <_InitOnce+0x60>)
 8006888:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800688c:	bb43      	cbnz	r3, 80068e0 <_InitOnce+0x5c>
 800688e:	2301      	movs	r3, #1
 8006890:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8006894:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <_InitOnce+0x64>)
 8006896:	6899      	ldr	r1, [r3, #8]
 8006898:	b911      	cbnz	r1, 80068a0 <_InitOnce+0x1c>
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	0889      	lsrs	r1, r1, #2
 800689e:	6099      	str	r1, [r3, #8]
 80068a0:	215a      	movs	r1, #90	; 0x5a
 80068a2:	6211      	str	r1, [r2, #32]
 80068a4:	2610      	movs	r6, #16
 80068a6:	2100      	movs	r1, #0
 80068a8:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80068ac:	fa06 f501 	lsl.w	r5, r6, r1
 80068b0:	3101      	adds	r1, #1
 80068b2:	2910      	cmp	r1, #16
 80068b4:	4c0b      	ldr	r4, [pc, #44]	; (80068e4 <_InitOnce+0x60>)
 80068b6:	6405      	str	r5, [r0, #64]	; 0x40
 80068b8:	d1f6      	bne.n	80068a8 <_InitOnce+0x24>
 80068ba:	6858      	ldr	r0, [r3, #4]
 80068bc:	6819      	ldr	r1, [r3, #0]
 80068be:	63a1      	str	r1, [r4, #56]	; 0x38
 80068c0:	2302      	movs	r3, #2
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	f1a0 0314 	sub.w	r3, r0, #20
 80068c8:	440b      	add	r3, r1
 80068ca:	2501      	movs	r5, #1
 80068cc:	6363      	str	r3, [r4, #52]	; 0x34
 80068ce:	60e0      	str	r0, [r4, #12]
 80068d0:	605d      	str	r5, [r3, #4]
 80068d2:	6265      	str	r5, [r4, #36]	; 0x24
 80068d4:	6065      	str	r5, [r4, #4]
 80068d6:	f7ff fe91 	bl	80065fc <_AddFreeMemory>
 80068da:	f7ff ff85 	bl	80067e8 <_EnlargeBlocks>
 80068de:	6325      	str	r5, [r4, #48]	; 0x30
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	bf00      	nop
 80068e4:	200082d8 	.word	0x200082d8
 80068e8:	20000064 	.word	0x20000064

080068ec <GUI_ALLOC_GetFixedBlock>:
 80068ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	4607      	mov	r7, r0
 80068f2:	4e26      	ldr	r6, [pc, #152]	; (800698c <GUI_ALLOC_GetFixedBlock+0xa0>)
 80068f4:	3703      	adds	r7, #3
 80068f6:	f7ff ffc5 	bl	8006884 <_InitOnce>
 80068fa:	f027 0703 	bic.w	r7, r7, #3
 80068fe:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8006900:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8006902:	3704      	adds	r7, #4
 8006904:	4287      	cmp	r7, r0
 8006906:	bf38      	it	cc
 8006908:	4607      	movcc	r7, r0
 800690a:	4614      	mov	r4, r2
 800690c:	b134      	cbz	r4, 800691c <GUI_ALLOC_GetFixedBlock+0x30>
 800690e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006912:	429f      	cmp	r7, r3
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	d02c      	beq.n	8006972 <GUI_ALLOC_GetFixedBlock+0x86>
 8006918:	461c      	mov	r4, r3
 800691a:	e7f7      	b.n	800690c <GUI_ALLOC_GetFixedBlock+0x20>
 800691c:	68f3      	ldr	r3, [r6, #12]
 800691e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8006920:	eb02 0803 	add.w	r8, r2, r3
 8006924:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8006928:	ebc5 0508 	rsb	r5, r5, r8
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b133      	cbz	r3, 800693e <GUI_ALLOC_GetFixedBlock+0x52>
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff feb5 	bl	80066a0 <_RemoveHoles>
 8006936:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800693a:	ebc5 0508 	rsb	r5, r5, r8
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	bb0b      	cbnz	r3, 8006986 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006942:	686b      	ldr	r3, [r5, #4]
 8006944:	429f      	cmp	r7, r3
 8006946:	dc1e      	bgt.n	8006986 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006948:	4628      	mov	r0, r5
 800694a:	1d1c      	adds	r4, r3, #4
 800694c:	f7ff fe36 	bl	80065bc <_RemoveFreeBlock>
 8006950:	68f3      	ldr	r3, [r6, #12]
 8006952:	6868      	ldr	r0, [r5, #4]
 8006954:	1bdb      	subs	r3, r3, r7
 8006956:	60f3      	str	r3, [r6, #12]
 8006958:	6973      	ldr	r3, [r6, #20]
 800695a:	1be4      	subs	r4, r4, r7
 800695c:	443b      	add	r3, r7
 800695e:	1bc0      	subs	r0, r0, r7
 8006960:	442c      	add	r4, r5
 8006962:	6173      	str	r3, [r6, #20]
 8006964:	d002      	beq.n	800696c <GUI_ALLOC_GetFixedBlock+0x80>
 8006966:	4629      	mov	r1, r5
 8006968:	f7ff fe48 	bl	80065fc <_AddFreeMemory>
 800696c:	f844 7c04 	str.w	r7, [r4, #-4]
 8006970:	e009      	b.n	8006986 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006972:	b10b      	cbz	r3, 8006978 <GUI_ALLOC_GetFixedBlock+0x8c>
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	6059      	str	r1, [r3, #4]
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	b101      	cbz	r1, 800697e <GUI_ALLOC_GetFixedBlock+0x92>
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	42a2      	cmp	r2, r4
 8006980:	d101      	bne.n	8006986 <GUI_ALLOC_GetFixedBlock+0x9a>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	63f3      	str	r3, [r6, #60]	; 0x3c
 8006986:	4620      	mov	r0, r4
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	200082d8 	.word	0x200082d8

08006990 <_Alloc>:
 8006990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006994:	4e39      	ldr	r6, [pc, #228]	; (8006a7c <_Alloc+0xec>)
 8006996:	4604      	mov	r4, r0
 8006998:	f7ff ff74 	bl	8006884 <_InitOnce>
 800699c:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800699e:	6833      	ldr	r3, [r6, #0]
 80069a0:	42ac      	cmp	r4, r5
 80069a2:	bf24      	itt	cs
 80069a4:	3403      	addcs	r4, #3
 80069a6:	f024 0503 	biccs.w	r5, r4, #3
 80069aa:	350c      	adds	r5, #12
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	4c33      	ldr	r4, [pc, #204]	; (8006a7c <_Alloc+0xec>)
 80069b0:	d33e      	bcc.n	8006a30 <_Alloc+0xa0>
 80069b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069b4:	6862      	ldr	r2, [r4, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d90f      	bls.n	80069da <_Alloc+0x4a>
 80069ba:	6873      	ldr	r3, [r6, #4]
 80069bc:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80069be:	3b01      	subs	r3, #1
 80069c0:	6073      	str	r3, [r6, #4]
 80069c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80069c4:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80069c8:	eb03 0208 	add.w	r2, r3, r8
 80069cc:	6852      	ldr	r2, [r2, #4]
 80069ce:	6272      	str	r2, [r6, #36]	; 0x24
 80069d0:	2201      	movs	r2, #1
 80069d2:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 80069d6:	b957      	cbnz	r7, 80069ee <_Alloc+0x5e>
 80069d8:	e02a      	b.n	8006a30 <_Alloc+0xa0>
 80069da:	3b01      	subs	r3, #1
 80069dc:	6323      	str	r3, [r4, #48]	; 0x30
 80069de:	f7ff ff03 	bl	80067e8 <_EnlargeBlocks>
 80069e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069e4:	3301      	adds	r3, #1
 80069e6:	6323      	str	r3, [r4, #48]	; 0x30
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d0e6      	beq.n	80069ba <_Alloc+0x2a>
 80069ec:	e020      	b.n	8006a30 <_Alloc+0xa0>
 80069ee:	230f      	movs	r3, #15
 80069f0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80069f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069f6:	4295      	cmp	r5, r2
 80069f8:	d20c      	bcs.n	8006a14 <_Alloc+0x84>
 80069fa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80069fe:	d2f7      	bcs.n	80069f0 <_Alloc+0x60>
 8006a00:	e008      	b.n	8006a14 <_Alloc+0x84>
 8006a02:	6894      	ldr	r4, [r2, #8]
 8006a04:	b12c      	cbz	r4, 8006a12 <_Alloc+0x82>
 8006a06:	6862      	ldr	r2, [r4, #4]
 8006a08:	4295      	cmp	r5, r2
 8006a0a:	d914      	bls.n	8006a36 <_Alloc+0xa6>
 8006a0c:	68a2      	ldr	r2, [r4, #8]
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d1f7      	bne.n	8006a02 <_Alloc+0x72>
 8006a12:	3301      	adds	r3, #1
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d803      	bhi.n	8006a20 <_Alloc+0x90>
 8006a18:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8006a1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a1e:	e7f6      	b.n	8006a0e <_Alloc+0x7e>
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7ff fe3d 	bl	80066a0 <_RemoveHoles>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d0e1      	beq.n	80069ee <_Alloc+0x5e>
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f7ff fdb4 	bl	8006598 <_PushFreeBlock>
 8006a30:	2000      	movs	r0, #0
 8006a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a36:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8006a3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8006a3c:	ebc5 0209 	rsb	r2, r5, r9
 8006a40:	330c      	adds	r3, #12
 8006a42:	4620      	mov	r0, r4
 8006a44:	429a      	cmp	r2, r3
 8006a46:	bf38      	it	cc
 8006a48:	464d      	movcc	r5, r9
 8006a4a:	f7ff fdb7 	bl	80065bc <_RemoveFreeBlock>
 8006a4e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006a50:	1961      	adds	r1, r4, r5
 8006a52:	4498      	add	r8, r3
 8006a54:	454d      	cmp	r5, r9
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	f8c8 4004 	str.w	r4, [r8, #4]
 8006a5e:	6027      	str	r7, [r4, #0]
 8006a60:	6065      	str	r5, [r4, #4]
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6124      	str	r4, [r4, #16]
 8006a66:	f841 5c04 	str.w	r5, [r1, #-4]
 8006a6a:	da03      	bge.n	8006a74 <_Alloc+0xe4>
 8006a6c:	ebc5 0009 	rsb	r0, r5, r9
 8006a70:	f7ff fdc4 	bl	80065fc <_AddFreeMemory>
 8006a74:	4638      	mov	r0, r7
 8006a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200082d8 	.word	0x200082d8

08006a80 <GUI_ALLOC_AllocNoInit>:
 8006a80:	b108      	cbz	r0, 8006a86 <GUI_ALLOC_AllocNoInit+0x6>
 8006a82:	f7ff bf85 	b.w	8006990 <_Alloc>
 8006a86:	4770      	bx	lr

08006a88 <GUI_ALLOC_AllocZero>:
 8006a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	f7ff fff8 	bl	8006a80 <GUI_ALLOC_AllocNoInit>
 8006a90:	4605      	mov	r5, r0
 8006a92:	b160      	cbz	r0, 8006aae <GUI_ALLOC_AllocZero+0x26>
 8006a94:	f7ff fe66 	bl	8006764 <GUI_ALLOC_LockH>
 8006a98:	ac02      	add	r4, sp, #8
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <GUI_ALLOC_AllocZero+0x2c>)
 8006a9c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4798      	blx	r3
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fe69 	bl	8006780 <GUI_ALLOC_UnlockH>
 8006aae:	4628      	mov	r0, r5
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	2000001c 	.word	0x2000001c

08006ab8 <GUI__GetFontSizeY>:
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <GUI__GetFontSizeY+0x10>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	7e18      	ldrb	r0, [r3, #24]
 8006ac0:	7edb      	ldrb	r3, [r3, #27]
 8006ac2:	4358      	muls	r0, r3
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000014 	.word	0x20000014

08006acc <GUI_Long2Len>:
 8006acc:	b530      	push	{r4, r5, lr}
 8006ace:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8006ad2:	4c09      	ldr	r4, [pc, #36]	; (8006af8 <GUI_Long2Len+0x2c>)
 8006ad4:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8006ad8:	2200      	movs	r2, #0
 8006ada:	1c53      	adds	r3, r2, #1
 8006adc:	2b0a      	cmp	r3, #10
 8006ade:	d005      	beq.n	8006aec <GUI_Long2Len+0x20>
 8006ae0:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006ae4:	428d      	cmp	r5, r1
 8006ae6:	d801      	bhi.n	8006aec <GUI_Long2Len+0x20>
 8006ae8:	461a      	mov	r2, r3
 8006aea:	e7f6      	b.n	8006ada <GUI_Long2Len+0xe>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	bfb8      	it	lt
 8006af0:	1c93      	addlt	r3, r2, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	bd30      	pop	{r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	0800c288 	.word	0x0800c288

08006afc <GUI_AddSign>:
 8006afc:	2800      	cmp	r0, #0
 8006afe:	dd07      	ble.n	8006b10 <GUI_AddSign+0x14>
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	600a      	str	r2, [r1, #0]
 8006b06:	222b      	movs	r2, #43	; 0x2b
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	680b      	ldr	r3, [r1, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	4770      	bx	lr
	...

08006b14 <GUI_AddDecShift>:
 8006b14:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	681c      	ldr	r4, [r3, #0]
 8006b1c:	d109      	bne.n	8006b32 <GUI_AddDecShift+0x1e>
 8006b1e:	1c60      	adds	r0, r4, #1
 8006b20:	6018      	str	r0, [r3, #0]
 8006b22:	3901      	subs	r1, #1
 8006b24:	202d      	movs	r0, #45	; 0x2d
 8006b26:	7020      	strb	r0, [r4, #0]
 8006b28:	b2c9      	uxtb	r1, r1
 8006b2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006b2e:	2601      	movs	r6, #1
 8006b30:	e00e      	b.n	8006b50 <GUI_AddDecShift+0x3c>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	bfbf      	itttt	lt
 8006b36:	1c65      	addlt	r5, r4, #1
 8006b38:	601d      	strlt	r5, [r3, #0]
 8006b3a:	252d      	movlt	r5, #45	; 0x2d
 8006b3c:	7025      	strblt	r5, [r4, #0]
 8006b3e:	bfac      	ite	ge
 8006b40:	2400      	movge	r4, #0
 8006b42:	2401      	movlt	r4, #1
 8006b44:	eba1 0104 	sub.w	r1, r1, r4
 8006b48:	bfb8      	it	lt
 8006b4a:	4240      	neglt	r0, r0
 8006b4c:	b2c9      	uxtb	r1, r1
 8006b4e:	2600      	movs	r6, #0
 8006b50:	b10a      	cbz	r2, 8006b56 <GUI_AddDecShift+0x42>
 8006b52:	3901      	subs	r1, #1
 8006b54:	b2c9      	uxtb	r1, r1
 8006b56:	f8df e058 	ldr.w	lr, [pc, #88]	; 8006bb0 <GUI_AddDecShift+0x9c>
 8006b5a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8006bb4 <GUI_AddDecShift+0xa0>
 8006b5e:	b181      	cbz	r1, 8006b82 <GUI_AddDecShift+0x6e>
 8006b60:	1e4d      	subs	r5, r1, #1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	b2ed      	uxtb	r5, r5
 8006b66:	d105      	bne.n	8006b74 <GUI_AddDecShift+0x60>
 8006b68:	681c      	ldr	r4, [r3, #0]
 8006b6a:	1c67      	adds	r7, r4, #1
 8006b6c:	601f      	str	r7, [r3, #0]
 8006b6e:	f89e 7000 	ldrb.w	r7, [lr]
 8006b72:	7027      	strb	r7, [r4, #0]
 8006b74:	f85c 7025 	ldr.w	r7, [ip, r5, lsl #2]
 8006b78:	fb90 f4f7 	sdiv	r4, r0, r7
 8006b7c:	b2e4      	uxtb	r4, r4
 8006b7e:	2c0a      	cmp	r4, #10
 8006b80:	d903      	bls.n	8006b8a <GUI_AddDecShift+0x76>
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	fb07 0014 	mls	r0, r7, r4, r0
 8006b8e:	b915      	cbnz	r5, 8006b96 <GUI_AddDecShift+0x82>
 8006b90:	b10e      	cbz	r6, 8006b96 <GUI_AddDecShift+0x82>
 8006b92:	3401      	adds	r4, #1
 8006b94:	b2e4      	uxtb	r4, r4
 8006b96:	2c0a      	cmp	r4, #10
 8006b98:	bf08      	it	eq
 8006b9a:	460d      	moveq	r5, r1
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	bf08      	it	eq
 8006ba0:	2401      	moveq	r4, #1
 8006ba2:	1c4f      	adds	r7, r1, #1
 8006ba4:	3430      	adds	r4, #48	; 0x30
 8006ba6:	601f      	str	r7, [r3, #0]
 8006ba8:	700c      	strb	r4, [r1, #0]
 8006baa:	4629      	mov	r1, r5
 8006bac:	e7d7      	b.n	8006b5e <GUI_AddDecShift+0x4a>
 8006bae:	bf00      	nop
 8006bb0:	200083a0 	.word	0x200083a0
 8006bb4:	0800c288 	.word	0x0800c288

08006bb8 <GUI_CalcColorDist>:
 8006bb8:	b2c3      	uxtb	r3, r0
 8006bba:	b2ca      	uxtb	r2, r1
 8006bbc:	1a9a      	subs	r2, r3, r2
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	b214      	sxth	r4, r2
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4252      	neglt	r2, r2
 8006bca:	b214      	sxthlt	r4, r2
 8006bcc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006bd0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	0c09      	lsrs	r1, r1, #16
 8006bda:	b21a      	sxth	r2, r3
 8006bdc:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	b289      	uxth	r1, r1
 8006be4:	b208      	sxth	r0, r1
 8006be6:	bfbc      	itt	lt
 8006be8:	425b      	neglt	r3, r3
 8006bea:	b21a      	sxthlt	r2, r3
 8006bec:	2800      	cmp	r0, #0
 8006bee:	bfbc      	itt	lt
 8006bf0:	4249      	neglt	r1, r1
 8006bf2:	b208      	sxthlt	r0, r1
 8006bf4:	4352      	muls	r2, r2
 8006bf6:	fb04 2204 	mla	r2, r4, r4, r2
 8006bfa:	b280      	uxth	r0, r0
 8006bfc:	fb00 2000 	mla	r0, r0, r0, r2
 8006c00:	bd10      	pop	{r4, pc}

08006c02 <GUI_GetBkColor>:
 8006c02:	b508      	push	{r3, lr}
 8006c04:	f001 fa54 	bl	80080b0 <LCD_GetBkColorIndex>
 8006c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c0c:	f001 b956 	b.w	8007ebc <LCD_Index2Color>

08006c10 <GUI_GetColor>:
 8006c10:	b508      	push	{r3, lr}
 8006c12:	f001 fa55 	bl	80080c0 <LCD_GetColorIndex>
 8006c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c1a:	f001 b94f 	b.w	8007ebc <LCD_Index2Color>

08006c1e <GUI_GetFontSizeY>:
 8006c1e:	f7ff bf4b 	b.w	8006ab8 <GUI__GetFontSizeY>
	...

08006c24 <GUI_GetVersionString>:
 8006c24:	4804      	ldr	r0, [pc, #16]	; (8006c38 <GUI_GetVersionString+0x14>)
 8006c26:	2335      	movs	r3, #53	; 0x35
 8006c28:	7003      	strb	r3, [r0, #0]
 8006c2a:	2334      	movs	r3, #52	; 0x34
 8006c2c:	7083      	strb	r3, [r0, #2]
 8006c2e:	70c3      	strb	r3, [r0, #3]
 8006c30:	2361      	movs	r3, #97	; 0x61
 8006c32:	7103      	strb	r3, [r0, #4]
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000000 	.word	0x20000000

08006c3c <GUI_MergeRect>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	b338      	cbz	r0, 8006c90 <GUI_MergeRect+0x54>
 8006c40:	b309      	cbz	r1, 8006c86 <GUI_MergeRect+0x4a>
 8006c42:	b30a      	cbz	r2, 8006c88 <GUI_MergeRect+0x4c>
 8006c44:	f9b2 4000 	ldrsh.w	r4, [r2]
 8006c48:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	bfa8      	it	ge
 8006c50:	4623      	movge	r3, r4
 8006c52:	8003      	strh	r3, [r0, #0]
 8006c54:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8006c58:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	bfa8      	it	ge
 8006c60:	4623      	movge	r3, r4
 8006c62:	8043      	strh	r3, [r0, #2]
 8006c64:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8006c68:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8006c6c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	bfb8      	it	lt
 8006c74:	4623      	movlt	r3, r4
 8006c76:	8083      	strh	r3, [r0, #4]
 8006c78:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	bfb8      	it	lt
 8006c80:	4613      	movlt	r3, r2
 8006c82:	80c3      	strh	r3, [r0, #6]
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	4611      	mov	r1, r2
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	6003      	str	r3, [r0, #0]
 8006c8c:	684b      	ldr	r3, [r1, #4]
 8006c8e:	6043      	str	r3, [r0, #4]
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <GUI_MoveRect>:
 8006c92:	b168      	cbz	r0, 8006cb0 <GUI_MoveRect+0x1e>
 8006c94:	8803      	ldrh	r3, [r0, #0]
 8006c96:	b289      	uxth	r1, r1
 8006c98:	440b      	add	r3, r1
 8006c9a:	8003      	strh	r3, [r0, #0]
 8006c9c:	8883      	ldrh	r3, [r0, #4]
 8006c9e:	4419      	add	r1, r3
 8006ca0:	8843      	ldrh	r3, [r0, #2]
 8006ca2:	8081      	strh	r1, [r0, #4]
 8006ca4:	b292      	uxth	r2, r2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	8043      	strh	r3, [r0, #2]
 8006caa:	88c3      	ldrh	r3, [r0, #6]
 8006cac:	441a      	add	r2, r3
 8006cae:	80c2      	strh	r2, [r0, #6]
 8006cb0:	4770      	bx	lr
	...

08006cb4 <GUI_GotoXY>:
 8006cb4:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <GUI_GotoXY+0xc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	8458      	strh	r0, [r3, #34]	; 0x22
 8006cba:	8499      	strh	r1, [r3, #36]	; 0x24
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4770      	bx	lr
 8006cc0:	20000014 	.word	0x20000014

08006cc4 <GUI_RectsIntersect>:
 8006cc4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006cc8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	dc14      	bgt.n	8006cfa <GUI_RectsIntersect+0x36>
 8006cd0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8006cd4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	dc0e      	bgt.n	8006cfa <GUI_RectsIntersect+0x36>
 8006cdc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006ce0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	dc08      	bgt.n	8006cfa <GUI_RectsIntersect+0x36>
 8006ce8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006cec:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006cf0:	4283      	cmp	r3, r0
 8006cf2:	bfcc      	ite	gt
 8006cf4:	2000      	movgt	r0, #0
 8006cf6:	2001      	movle	r0, #1
 8006cf8:	4770      	bx	lr
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	4770      	bx	lr
	...

08006d00 <GUI_GetScreenSizeX>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4c04      	ldr	r4, [pc, #16]	; (8006d14 <GUI_GetScreenSizeX+0x14>)
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	b913      	cbnz	r3, 8006d0e <GUI_GetScreenSizeX+0xe>
 8006d08:	f001 fa0e 	bl	8008128 <LCD_GetXSize>
 8006d0c:	6020      	str	r0, [r4, #0]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop
 8006d14:	20000070 	.word	0x20000070

08006d18 <GUI_GetScreenSizeY>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4c04      	ldr	r4, [pc, #16]	; (8006d2c <GUI_GetScreenSizeY+0x14>)
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	b913      	cbnz	r3, 8006d26 <GUI_GetScreenSizeY+0xe>
 8006d20:	f001 fa0a 	bl	8008138 <LCD_GetYSize>
 8006d24:	6060      	str	r0, [r4, #4]
 8006d26:	6860      	ldr	r0, [r4, #4]
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000070 	.word	0x20000070

08006d30 <GUI_SelectLCD>:
 8006d30:	b508      	push	{r3, lr}
 8006d32:	f001 fabb 	bl	80082ac <LCD_SelectLCD>
 8006d36:	f001 fb21 	bl	800837c <LCD_UpdateColorIndices>
 8006d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d3e:	f004 ba29 	b.w	800b194 <WM_Activate>

08006d42 <GUI_SetBkColor>:
 8006d42:	f001 b901 	b.w	8007f48 <LCD_SetBkColor>

08006d46 <GUI_SetColor>:
 8006d46:	f001 b905 	b.w	8007f54 <LCD_SetColor>
	...

08006d4c <GUI_SetFont>:
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <GUI_SetFont+0x10>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	b100      	cbz	r0, 8006d56 <GUI_SetFont+0xa>
 8006d54:	61d8      	str	r0, [r3, #28]
 8006d56:	4610      	mov	r0, r2
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000014 	.word	0x20000014

08006d60 <GUI_SetOrg>:
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <GUI_SetOrg+0x28>)
 8006d62:	b410      	push	{r4}
 8006d64:	8018      	strh	r0, [r3, #0]
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <GUI_SetOrg+0x2c>)
 8006d68:	8019      	strh	r1, [r3, #0]
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <GUI_SetOrg+0x30>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	460a      	mov	r2, r1
 8006d70:	7c59      	ldrb	r1, [r3, #17]
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <GUI_SetOrg+0x34>)
 8006d74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d78:	68d9      	ldr	r1, [r3, #12]
 8006d7a:	6a0c      	ldr	r4, [r1, #32]
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	4623      	mov	r3, r4
 8006d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d86:	4718      	bx	r3
 8006d88:	200083c0 	.word	0x200083c0
 8006d8c:	200083b0 	.word	0x200083b0
 8006d90:	20000014 	.word	0x20000014
 8006d94:	200083e8 	.word	0x200083e8

08006d98 <GUI_SetTextAlign>:
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <GUI_SetTextAlign+0x10>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8006da0:	8598      	strh	r0, [r3, #44]	; 0x2c
 8006da2:	4610      	mov	r0, r2
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000014 	.word	0x20000014

08006dac <_InitContext>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	4e1a      	ldr	r6, [pc, #104]	; (8006e18 <_InitContext+0x6c>)
 8006db0:	4d1a      	ldr	r5, [pc, #104]	; (8006e1c <_InitContext+0x70>)
 8006db2:	f106 0384 	add.w	r3, r6, #132	; 0x84
 8006db6:	6703      	str	r3, [r0, #112]	; 0x70
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8006dbe:	f103 0208 	add.w	r2, r3, #8
 8006dc2:	639b      	str	r3, [r3, #56]	; 0x38
 8006dc4:	641b      	str	r3, [r3, #64]	; 0x40
 8006dc6:	6142      	str	r2, [r0, #20]
 8006dc8:	7c5a      	ldrb	r2, [r3, #17]
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <_InitContext+0x74>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006dd2:	68c3      	ldr	r3, [r0, #12]
 8006dd4:	f104 0108 	add.w	r1, r4, #8
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	4798      	blx	r3
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <_InitContext+0x78>)
 8006dde:	6663      	str	r3, [r4, #100]	; 0x64
 8006de0:	686b      	ldr	r3, [r5, #4]
 8006de2:	61e3      	str	r3, [r4, #28]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6163      	str	r3, [r4, #20]
 8006dea:	2301      	movs	r3, #1
 8006dec:	7623      	strb	r3, [r4, #24]
 8006dee:	76e3      	strb	r3, [r4, #27]
 8006df0:	f004 faa8 	bl	800b344 <WM_GetDesktopWindow>
 8006df4:	2303      	movs	r3, #3
 8006df6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8006dfa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8006e00:	6363      	str	r3, [r4, #52]	; 0x34
 8006e02:	64a0      	str	r0, [r4, #72]	; 0x48
 8006e04:	6830      	ldr	r0, [r6, #0]
 8006e06:	f001 f89f 	bl	8007f48 <LCD_SetBkColor>
 8006e0a:	68a8      	ldr	r0, [r5, #8]
 8006e0c:	f001 f8a2 	bl	8007f54 <LCD_SetColor>
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <_InitContext+0x7c>)
 8006e12:	4a06      	ldr	r2, [pc, #24]	; (8006e2c <_InitContext+0x80>)
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	20000080 	.word	0x20000080
 8006e1c:	20000008 	.word	0x20000008
 8006e20:	200083e8 	.word	0x200083e8
 8006e24:	0800c2c0 	.word	0x0800c2c0
 8006e28:	200083e0 	.word	0x200083e0
 8006e2c:	0800c2d8 	.word	0x0800c2d8

08006e30 <_OnExit>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	4d0b      	ldr	r5, [pc, #44]	; (8006e60 <_OnExit+0x30>)
 8006e34:	4e0b      	ldr	r6, [pc, #44]	; (8006e64 <_OnExit+0x34>)
 8006e36:	2400      	movs	r4, #0
 8006e38:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8006e3c:	3504      	adds	r5, #4
 8006e3e:	6833      	ldr	r3, [r6, #0]
 8006e40:	2274      	movs	r2, #116	; 0x74
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	4798      	blx	r3
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	4807      	ldr	r0, [pc, #28]	; (8006e68 <_OnExit+0x38>)
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4798      	blx	r3
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <_OnExit+0x3c>)
 8006e54:	60dd      	str	r5, [r3, #12]
 8006e56:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <_OnExit+0x40>)
 8006e58:	701c      	strb	r4, [r3, #0]
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <_OnExit+0x44>)
 8006e5c:	601c      	str	r4, [r3, #0]
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	20000080 	.word	0x20000080
 8006e64:	2000001c 	.word	0x2000001c
 8006e68:	200083e8 	.word	0x200083e8
 8006e6c:	20000008 	.word	0x20000008
 8006e70:	200083d0 	.word	0x200083d0
 8006e74:	200083ac 	.word	0x200083ac

08006e78 <GUI_SetDefaultFont>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	; (8006e80 <GUI_SetDefaultFont+0x8>)
 8006e7a:	6058      	str	r0, [r3, #4]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000008 	.word	0x20000008

08006e84 <GUI_ClearRect>:
 8006e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e88:	4604      	mov	r4, r0
 8006e8a:	2004      	movs	r0, #4
 8006e8c:	4616      	mov	r6, r2
 8006e8e:	461f      	mov	r7, r3
 8006e90:	460d      	mov	r5, r1
 8006e92:	f000 fcf3 	bl	800787c <LCD_SetDrawMode>
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <GUI_ClearRect+0x60>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4414      	add	r4, r2
 8006ea2:	441d      	add	r5, r3
 8006ea4:	4416      	add	r6, r2
 8006ea6:	441f      	add	r7, r3
 8006ea8:	4668      	mov	r0, sp
 8006eaa:	f8ad 4000 	strh.w	r4, [sp]
 8006eae:	f8ad 6004 	strh.w	r6, [sp, #4]
 8006eb2:	f8ad 5002 	strh.w	r5, [sp, #2]
 8006eb6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8006eba:	f004 f8eb 	bl	800b094 <WM__InitIVRSearch>
 8006ebe:	b928      	cbnz	r0, 8006ecc <GUI_ClearRect+0x48>
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	f000 fcdb 	bl	800787c <LCD_SetDrawMode>
 8006ec6:	b002      	add	sp, #8
 8006ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ecc:	463b      	mov	r3, r7
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fd5a 	bl	800798c <LCD_FillRect>
 8006ed8:	f004 f81a 	bl	800af10 <WM__GetNextIVR>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d1f5      	bne.n	8006ecc <GUI_ClearRect+0x48>
 8006ee0:	e7ee      	b.n	8006ec0 <GUI_ClearRect+0x3c>
 8006ee2:	bf00      	nop
 8006ee4:	20000008 	.word	0x20000008

08006ee8 <GUI_Clear>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	2100      	movs	r1, #0
 8006eec:	4608      	mov	r0, r1
 8006eee:	f7ff fee1 	bl	8006cb4 <GUI_GotoXY>
 8006ef2:	4904      	ldr	r1, [pc, #16]	; (8006f04 <GUI_Clear+0x1c>)
 8006ef4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4608      	mov	r0, r1
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bfc0 	b.w	8006e84 <GUI_ClearRect>
 8006f04:	ffffc001 	.word	0xffffc001

08006f08 <GUI__Config>:
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	4d1f      	ldr	r5, [pc, #124]	; (8006f88 <GUI__Config+0x80>)
 8006f0c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8006f10:	b085      	sub	sp, #20
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d136      	bne.n	8006f84 <GUI__Config+0x7c>
 8006f16:	2301      	movs	r3, #1
 8006f18:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <GUI__Config+0x84>)
 8006f1e:	466a      	mov	r2, sp
 8006f20:	f103 0708 	add.w	r7, r3, #8
 8006f24:	466e      	mov	r6, sp
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	c403      	stmia	r4!, {r0, r1}
 8006f2e:	3308      	adds	r3, #8
 8006f30:	42bb      	cmp	r3, r7
 8006f32:	4622      	mov	r2, r4
 8006f34:	d1f7      	bne.n	8006f26 <GUI__Config+0x1e>
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	8899      	ldrh	r1, [r3, #4]
 8006f3a:	799b      	ldrb	r3, [r3, #6]
 8006f3c:	71a3      	strb	r3, [r4, #6]
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	80a1      	strh	r1, [r4, #4]
 8006f42:	4c13      	ldr	r4, [pc, #76]	; (8006f90 <GUI__Config+0x88>)
 8006f44:	4633      	mov	r3, r6
 8006f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f4a:	f804 2b01 	strb.w	r2, [r4], #1
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d1f8      	bne.n	8006f46 <GUI__Config+0x3e>
 8006f54:	f7ff fe66 	bl	8006c24 <GUI_GetVersionString>
 8006f58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	f804 3b01 	strb.w	r3, [r4], #1
 8006f62:	7803      	ldrb	r3, [r0, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f7      	bne.n	8006f58 <GUI__Config+0x50>
 8006f68:	7053      	strb	r3, [r2, #1]
 8006f6a:	f7fb fbf7 	bl	800275c <GUI_X_Config>
 8006f6e:	f7fb fc51 	bl	8002814 <LCD_X_Config>
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <GUI__Config+0x8c>)
 8006f74:	4808      	ldr	r0, [pc, #32]	; (8006f98 <GUI__Config+0x90>)
 8006f76:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006f7a:	b005      	add	sp, #20
 8006f7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006f80:	f000 b888 	b.w	8007094 <GUI__RegisterExit>
 8006f84:	b005      	add	sp, #20
 8006f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f88:	20000080 	.word	0x20000080
 8006f8c:	0800c2c8 	.word	0x0800c2c8
 8006f90:	20000104 	.word	0x20000104
 8006f94:	08006e31 	.word	0x08006e31
 8006f98:	20000118 	.word	0x20000118

08006f9c <GUI_Init>:
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4a33      	ldr	r2, [pc, #204]	; (8007070 <GUI_Init+0xd4>)
 8006fa4:	4b32      	ldr	r3, [pc, #200]	; (8007070 <GUI_Init+0xd4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <GUI_Init+0xd8>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	bf00      	nop
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <GUI_Init+0xd8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1fb      	bne.n	8006fb6 <GUI_Init+0x1a>
 8006fbe:	4b2e      	ldr	r3, [pc, #184]	; (8007078 <GUI_Init+0xdc>)
 8006fc0:	4a2e      	ldr	r2, [pc, #184]	; (800707c <GUI_Init+0xe0>)
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <GUI_Init+0xdc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <GUI_Init+0xe4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d000      	beq.n	8006fd0 <GUI_Init+0x34>
 8006fce:	e7fe      	b.n	8006fce <GUI_Init+0x32>
 8006fd0:	f7ff ff9a 	bl	8006f08 <GUI__Config>
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <GUI_Init+0xe8>)
 8006fd6:	222e      	movs	r2, #46	; 0x2e
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	f7fb fbcf 	bl	800277c <GUI_X_Init>
 8006fde:	482a      	ldr	r0, [pc, #168]	; (8007088 <GUI_Init+0xec>)
 8006fe0:	f7ff fee4 	bl	8006dac <_InitContext>
 8006fe4:	f000 ff0a 	bl	8007dfc <emWin_LCD_Init>
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	f001 f8ef 	bl	80081cc <LCD_GetXSizeDisplay>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2301      	moveq	r3, #1
 8006ff6:	2300      	movne	r3, #0
 8006ff8:	b2dc      	uxtb	r4, r3
 8006ffa:	f001 f8ed 	bl	80081d8 <LCD_GetYSizeDisplay>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4323      	orrs	r3, r4
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <GUI_Init+0x8a>
 8007012:	f001 f8cf 	bl	80081b4 <LCD_GetXSizeMax>
 8007016:	4604      	mov	r4, r0
 8007018:	f001 f8cf 	bl	80081ba <LCD_GetYSizeMax>
 800701c:	4603      	mov	r3, r0
 800701e:	4619      	mov	r1, r3
 8007020:	4620      	mov	r0, r4
 8007022:	f001 f8cd 	bl	80081c0 <LCD_SetDisplaySize>
 8007026:	2100      	movs	r1, #0
 8007028:	2000      	movs	r0, #0
 800702a:	f7ff fe99 	bl	8006d60 <GUI_SetOrg>
 800702e:	f004 f911 	bl	800b254 <WM_Init>
 8007032:	4b16      	ldr	r3, [pc, #88]	; (800708c <GUI_Init+0xf0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d012      	beq.n	8007060 <GUI_Init+0xc4>
 800703a:	e00d      	b.n	8007058 <GUI_Init+0xbc>
 800703c:	4b13      	ldr	r3, [pc, #76]	; (800708c <GUI_Init+0xf0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <GUI_Init+0xb2>
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <GUI_Init+0xf0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4798      	blx	r3
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <GUI_Init+0xf0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4a0d      	ldr	r2, [pc, #52]	; (800708c <GUI_Init+0xf0>)
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <GUI_Init+0xf0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1ed      	bne.n	800703c <GUI_Init+0xa0>
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <GUI_Init+0xf4>)
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bd90      	pop	{r4, r7, pc}
 8007070:	e0002000 	.word	0xe0002000
 8007074:	40023008 	.word	0x40023008
 8007078:	40023000 	.word	0x40023000
 800707c:	f407a5c2 	.word	0xf407a5c2
 8007080:	b5e8b5cd 	.word	0xb5e8b5cd
 8007084:	200083a0 	.word	0x200083a0
 8007088:	20000084 	.word	0x20000084
 800708c:	200000fc 	.word	0x200000fc
 8007090:	200083c8 	.word	0x200083c8

08007094 <GUI__RegisterExit>:
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <GUI__RegisterExit+0x24>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <GUI__RegisterExit+0x24>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	200000f8 	.word	0x200000f8

080070bc <GUI_DEVICE__GetpDriver>:
 80070bc:	2801      	cmp	r0, #1
 80070be:	dc09      	bgt.n	80070d4 <GUI_DEVICE__GetpDriver+0x18>
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <GUI_DEVICE__GetpDriver+0x1c>)
 80070c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80070c6:	b120      	cbz	r0, 80070d2 <GUI_DEVICE__GetpDriver+0x16>
 80070c8:	68c3      	ldr	r3, [r0, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	b11b      	cbz	r3, 80070d6 <GUI_DEVICE__GetpDriver+0x1a>
 80070ce:	6800      	ldr	r0, [r0, #0]
 80070d0:	e7f9      	b.n	80070c6 <GUI_DEVICE__GetpDriver+0xa>
 80070d2:	4770      	bx	lr
 80070d4:	2000      	movs	r0, #0
 80070d6:	4770      	bx	lr
 80070d8:	200083e8 	.word	0x200083e8

080070dc <GUI_DEVICE_Delete>:
 80070dc:	f7ff bb2e 	b.w	800673c <GUI_ALLOC_FreeFixedBlock>

080070e0 <GUI_DEVICE_Create>:
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e4:	4606      	mov	r6, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	4617      	mov	r7, r2
 80070ea:	461c      	mov	r4, r3
 80070ec:	dd01      	ble.n	80070f2 <GUI_DEVICE_Create+0x12>
 80070ee:	2000      	movs	r0, #0
 80070f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f2:	201c      	movs	r0, #28
 80070f4:	f7ff fbfa 	bl	80068ec <GUI_ALLOC_GetFixedBlock>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0f8      	beq.n	80070ee <GUI_DEVICE_Create+0xe>
 80070fc:	b10d      	cbz	r5, 8007102 <GUI_DEVICE_Create+0x22>
 80070fe:	6105      	str	r5, [r0, #16]
 8007100:	e009      	b.n	8007116 <GUI_DEVICE_Create+0x36>
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <GUI_DEVICE_Create+0x48>)
 8007104:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8007108:	b129      	cbz	r1, 8007116 <GUI_DEVICE_Create+0x36>
 800710a:	680b      	ldr	r3, [r1, #0]
 800710c:	b10b      	cbz	r3, 8007112 <GUI_DEVICE_Create+0x32>
 800710e:	4619      	mov	r1, r3
 8007110:	e7fb      	b.n	800710a <GUI_DEVICE_Create+0x2a>
 8007112:	690b      	ldr	r3, [r1, #16]
 8007114:	6103      	str	r3, [r0, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	6083      	str	r3, [r0, #8]
 800711a:	6184      	str	r4, [r0, #24]
 800711c:	8287      	strh	r7, [r0, #20]
 800711e:	60c6      	str	r6, [r0, #12]
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	6043      	str	r3, [r0, #4]
 8007124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007126:	bf00      	nop
 8007128:	200083e8 	.word	0x200083e8

0800712c <GUI_DEVICE_Unlink>:
 800712c:	6981      	ldr	r1, [r0, #24]
 800712e:	4a0a      	ldr	r2, [pc, #40]	; (8007158 <GUI_DEVICE_Unlink+0x2c>)
 8007130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007134:	4298      	cmp	r0, r3
 8007136:	6803      	ldr	r3, [r0, #0]
 8007138:	d104      	bne.n	8007144 <GUI_DEVICE_Unlink+0x18>
 800713a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800713e:	b10b      	cbz	r3, 8007144 <GUI_DEVICE_Unlink+0x18>
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	6842      	ldr	r2, [r0, #4]
 8007146:	b102      	cbz	r2, 800714a <GUI_DEVICE_Unlink+0x1e>
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	b103      	cbz	r3, 8007150 <GUI_DEVICE_Unlink+0x24>
 800714e:	605a      	str	r2, [r3, #4]
 8007150:	2300      	movs	r3, #0
 8007152:	6003      	str	r3, [r0, #0]
 8007154:	6043      	str	r3, [r0, #4]
 8007156:	4770      	bx	lr
 8007158:	200083e8 	.word	0x200083e8

0800715c <GUI_DEVICE_Link>:
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	b908      	cbnz	r0, 8007164 <GUI_DEVICE_Link+0x8>
 8007160:	2001      	movs	r0, #1
 8007162:	bd30      	pop	{r4, r5, pc}
 8007164:	6984      	ldr	r4, [r0, #24]
 8007166:	2c01      	cmp	r4, #1
 8007168:	dcfa      	bgt.n	8007160 <GUI_DEVICE_Link+0x4>
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <GUI_DEVICE_Link+0x7c>)
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	4294      	cmp	r4, r2
 8007170:	bfa4      	itt	ge
 8007172:	1c62      	addge	r2, r4, #1
 8007174:	701a      	strbge	r2, [r3, #0]
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <GUI_DEVICE_Link+0x80>)
 8007178:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800717c:	4615      	mov	r5, r2
 800717e:	b91b      	cbnz	r3, 8007188 <GUI_DEVICE_Link+0x2c>
 8007180:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8007184:	4618      	mov	r0, r3
 8007186:	bd30      	pop	{r4, r5, pc}
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	b10a      	cbz	r2, 8007190 <GUI_DEVICE_Link+0x34>
 800718c:	4613      	mov	r3, r2
 800718e:	e7fb      	b.n	8007188 <GUI_DEVICE_Link+0x2c>
 8007190:	68c2      	ldr	r2, [r0, #12]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	68d9      	ldr	r1, [r3, #12]
 8007196:	6809      	ldr	r1, [r1, #0]
 8007198:	4291      	cmp	r1, r2
 800719a:	dd03      	ble.n	80071a4 <GUI_DEVICE_Link+0x48>
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f8      	bne.n	8007194 <GUI_DEVICE_Link+0x38>
 80071a2:	e7dd      	b.n	8007160 <GUI_DEVICE_Link+0x4>
 80071a4:	d109      	bne.n	80071ba <GUI_DEVICE_Link+0x5e>
 80071a6:	8a81      	ldrh	r1, [r0, #20]
 80071a8:	2901      	cmp	r1, #1
 80071aa:	d106      	bne.n	80071ba <GUI_DEVICE_Link+0x5e>
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	b121      	cbz	r1, 80071ba <GUI_DEVICE_Link+0x5e>
 80071b0:	460b      	mov	r3, r1
 80071b2:	68c9      	ldr	r1, [r1, #12]
 80071b4:	6809      	ldr	r1, [r1, #0]
 80071b6:	428a      	cmp	r2, r1
 80071b8:	ddf8      	ble.n	80071ac <GUI_DEVICE_Link+0x50>
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	b112      	cbz	r2, 80071c4 <GUI_DEVICE_Link+0x68>
 80071be:	6010      	str	r0, [r2, #0]
 80071c0:	6042      	str	r2, [r0, #4]
 80071c2:	e001      	b.n	80071c8 <GUI_DEVICE_Link+0x6c>
 80071c4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80071c8:	6058      	str	r0, [r3, #4]
 80071ca:	4298      	cmp	r0, r3
 80071cc:	bf08      	it	eq
 80071ce:	2300      	moveq	r3, #0
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	2000      	movs	r0, #0
 80071d4:	bd30      	pop	{r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	2000839a 	.word	0x2000839a
 80071dc:	200083e8 	.word	0x200083e8

080071e0 <GUI_DEVICE_CreateAndLink>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	461d      	mov	r5, r3
 80071e4:	f7ff ff7c 	bl	80070e0 <GUI_DEVICE_Create>
 80071e8:	4604      	mov	r4, r0
 80071ea:	b148      	cbz	r0, 8007200 <GUI_DEVICE_CreateAndLink+0x20>
 80071ec:	f7ff ffb6 	bl	800715c <GUI_DEVICE_Link>
 80071f0:	68e3      	ldr	r3, [r4, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	b923      	cbnz	r3, 8007200 <GUI_DEVICE_CreateAndLink+0x20>
 80071f6:	4b03      	ldr	r3, [pc, #12]	; (8007204 <GUI_DEVICE_CreateAndLink+0x24>)
 80071f8:	3516      	adds	r5, #22
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8007200:	4620      	mov	r0, r4
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20000014 	.word	0x20000014

08007208 <CL_DispChar>:
 8007208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800720a:	4d21      	ldr	r5, [pc, #132]	; (8007290 <CL_DispChar+0x88>)
 800720c:	682a      	ldr	r2, [r5, #0]
 800720e:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8007210:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8007212:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8007214:	441c      	add	r4, r3
 8007216:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8007218:	b2a4      	uxth	r4, r4
 800721a:	b221      	sxth	r1, r4
 800721c:	443b      	add	r3, r7
 800721e:	8493      	strh	r3, [r2, #36]	; 0x24
 8007220:	8451      	strh	r1, [r2, #34]	; 0x22
 8007222:	f8ad 1000 	strh.w	r1, [sp]
 8007226:	4606      	mov	r6, r0
 8007228:	f004 f9f8 	bl	800b61c <GUI_GetCharDistX>
 800722c:	4607      	mov	r7, r0
 800722e:	4630      	mov	r0, r6
 8007230:	f004 fa70 	bl	800b714 <GUI__GetOverlap>
 8007234:	3c01      	subs	r4, #1
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	443c      	add	r4, r7
 800723a:	4420      	add	r0, r4
 800723c:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 8007240:	f8ad 4002 	strh.w	r4, [sp, #2]
 8007244:	f8ad 0004 	strh.w	r0, [sp, #4]
 8007248:	f7ff fce9 	bl	8006c1e <GUI_GetFontSizeY>
 800724c:	3c01      	subs	r4, #1
 800724e:	4420      	add	r0, r4
 8007250:	f8ad 0006 	strh.w	r0, [sp, #6]
 8007254:	4668      	mov	r0, sp
 8007256:	f003 ff1d 	bl	800b094 <WM__InitIVRSearch>
 800725a:	b938      	cbnz	r0, 800726c <CL_DispChar+0x64>
 800725c:	2e0a      	cmp	r6, #10
 800725e:	d00b      	beq.n	8007278 <CL_DispChar+0x70>
 8007260:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007264:	682a      	ldr	r2, [r5, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	8453      	strh	r3, [r2, #34]	; 0x22
 800726a:	e005      	b.n	8007278 <CL_DispChar+0x70>
 800726c:	4630      	mov	r0, r6
 800726e:	f004 f9b9 	bl	800b5e4 <GL_DispChar>
 8007272:	f003 fe4d 	bl	800af10 <WM__GetNextIVR>
 8007276:	e7f0      	b.n	800725a <CL_DispChar+0x52>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800727c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800727e:	1a52      	subs	r2, r2, r1
 8007280:	845a      	strh	r2, [r3, #34]	; 0x22
 8007282:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007284:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8007286:	1a52      	subs	r2, r2, r1
 8007288:	849a      	strh	r2, [r3, #36]	; 0x24
 800728a:	b003      	add	sp, #12
 800728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800728e:	bf00      	nop
 8007290:	20000014 	.word	0x20000014

08007294 <GUI_DispCharAt>:
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <GUI_DispCharAt+0xc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	8459      	strh	r1, [r3, #34]	; 0x22
 800729a:	849a      	strh	r2, [r3, #36]	; 0x24
 800729c:	f7ff bfb4 	b.w	8007208 <CL_DispChar>
 80072a0:	20000014 	.word	0x20000014

080072a4 <GUI_DispString>:
 80072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	4605      	mov	r5, r0
 80072aa:	b085      	sub	sp, #20
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d07f      	beq.n	80073b0 <GUI_DispString+0x10c>
 80072b0:	4c41      	ldr	r4, [pc, #260]	; (80073b8 <GUI_DispString+0x114>)
 80072b2:	f004 f981 	bl	800b5b8 <GUI_GetFontDistY>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	4607      	mov	r7, r0
 80072ba:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 80072be:	f004 f963 	bl	800b588 <GUI_GetYAdjust>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80072c6:	b286      	uxth	r6, r0
 80072c8:	1b9b      	subs	r3, r3, r6
 80072ca:	8493      	strh	r3, [r2, #36]	; 0x24
 80072cc:	46a1      	mov	r9, r4
 80072ce:	782b      	ldrb	r3, [r5, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d061      	beq.n	8007398 <GUI_DispString+0xf4>
 80072d4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80072d8:	4628      	mov	r0, r5
 80072da:	f004 f9ff 	bl	800b6dc <GUI__GetLineNumChars>
 80072de:	4601      	mov	r1, r0
 80072e0:	4682      	mov	sl, r0
 80072e2:	4628      	mov	r0, r5
 80072e4:	f004 fa24 	bl	800b730 <GUI__GetLineDistX>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d004      	beq.n	80072fe <GUI_DispString+0x5a>
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d104      	bne.n	8007302 <GUI_DispString+0x5e>
 80072f8:	fb90 f3f3 	sdiv	r3, r0, r3
 80072fc:	e002      	b.n	8007304 <GUI_DispString+0x60>
 80072fe:	4603      	mov	r3, r0
 8007300:	e000      	b.n	8007304 <GUI_DispString+0x60>
 8007302:	2300      	movs	r3, #0
 8007304:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8007306:	1acb      	subs	r3, r1, r3
 8007308:	b29b      	uxth	r3, r3
 800730a:	b219      	sxth	r1, r3
 800730c:	fa1f fb80 	uxth.w	fp, r0
 8007310:	8451      	strh	r1, [r2, #34]	; 0x22
 8007312:	f8ad 1008 	strh.w	r1, [sp, #8]
 8007316:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 800731a:	f8ad 200a 	strh.w	r2, [sp, #10]
 800731e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8007322:	440b      	add	r3, r1
 8007324:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007328:	3a01      	subs	r2, #1
 800732a:	b2bb      	uxth	r3, r7
 800732c:	441a      	add	r2, r3
 800732e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8007332:	4651      	mov	r1, sl
 8007334:	aa02      	add	r2, sp, #8
 8007336:	4628      	mov	r0, r5
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	f004 fa29 	bl	800b790 <GUI__DispLine>
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8007344:	8491      	strh	r1, [r2, #36]	; 0x24
 8007346:	4628      	mov	r0, r5
 8007348:	4651      	mov	r1, sl
 800734a:	f000 f971 	bl	8007630 <GUI_UC__NumChars2NumBytes>
 800734e:	5c2a      	ldrb	r2, [r5, r0]
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	2a0a      	cmp	r2, #10
 8007354:	eb05 0e00 	add.w	lr, r5, r0
 8007358:	d001      	beq.n	800735e <GUI_DispString+0xba>
 800735a:	2a0d      	cmp	r2, #13
 800735c:	d112      	bne.n	8007384 <GUI_DispString+0xe0>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007362:	f001 0103 	and.w	r1, r1, #3
 8007366:	3901      	subs	r1, #1
 8007368:	2901      	cmp	r1, #1
 800736a:	bf8a      	itet	hi
 800736c:	8c11      	ldrhhi	r1, [r2, #32]
 800736e:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 8007372:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8007374:	f89e 1000 	ldrb.w	r1, [lr]
 8007378:	290a      	cmp	r1, #10
 800737a:	d10a      	bne.n	8007392 <GUI_DispString+0xee>
 800737c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800737e:	440b      	add	r3, r1
 8007380:	8493      	strh	r3, [r2, #36]	; 0x24
 8007382:	e006      	b.n	8007392 <GUI_DispString+0xee>
 8007384:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8007388:	f8d9 3000 	ldr.w	r3, [r9]
 800738c:	4483      	add	fp, r0
 800738e:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 8007392:	f89e 3000 	ldrb.w	r3, [lr]
 8007396:	b943      	cbnz	r3, 80073aa <GUI_DispString+0x106>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800739c:	4416      	add	r6, r2
 800739e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073a0:	849e      	strh	r6, [r3, #36]	; 0x24
 80073a2:	f022 0203 	bic.w	r2, r2, #3
 80073a6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80073a8:	e002      	b.n	80073b0 <GUI_DispString+0x10c>
 80073aa:	f10e 0501 	add.w	r5, lr, #1
 80073ae:	e78e      	b.n	80072ce <GUI_DispString+0x2a>
 80073b0:	b005      	add	sp, #20
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b6:	bf00      	nop
 80073b8:	20000014 	.word	0x20000014

080073bc <GUI_DispStringAt>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <GUI_DispStringAt+0xc>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	8459      	strh	r1, [r3, #34]	; 0x22
 80073c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80073c4:	f7ff bf6e 	b.w	80072a4 <GUI_DispString>
 80073c8:	20000014 	.word	0x20000014

080073cc <GUI_DispStringHCenterAt>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <GUI_DispStringHCenterAt+0x30>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4605      	mov	r5, r0
 80073d4:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 80073d8:	f040 0002 	orr.w	r0, r0, #2
 80073dc:	460e      	mov	r6, r1
 80073de:	4617      	mov	r7, r2
 80073e0:	f7ff fcda 	bl	8006d98 <GUI_SetTextAlign>
 80073e4:	463a      	mov	r2, r7
 80073e6:	4604      	mov	r4, r0
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7ff ffe6 	bl	80073bc <GUI_DispStringAt>
 80073f0:	4620      	mov	r0, r4
 80073f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073f6:	f7ff bccf 	b.w	8006d98 <GUI_SetTextAlign>
 80073fa:	bf00      	nop
 80073fc:	20000014 	.word	0x20000014

08007400 <_DrawGradient>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	b08d      	sub	sp, #52	; 0x34
 8007406:	461c      	mov	r4, r3
 8007408:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800740e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007412:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4605      	mov	r5, r0
 800741a:	4689      	mov	r9, r1
 800741c:	4616      	mov	r6, r2
 800741e:	f7ff fbf7 	bl	8006c10 <GUI_GetColor>
 8007422:	45d8      	cmp	r8, fp
 8007424:	9006      	str	r0, [sp, #24]
 8007426:	d10d      	bne.n	8007444 <_DrawGradient+0x44>
 8007428:	4640      	mov	r0, r8
 800742a:	f000 fd93 	bl	8007f54 <LCD_SetColor>
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	b11b      	cbz	r3, 800743a <_DrawGradient+0x3a>
 8007432:	4623      	mov	r3, r4
 8007434:	4632      	mov	r2, r6
 8007436:	4649      	mov	r1, r9
 8007438:	e090      	b.n	800755c <_DrawGradient+0x15c>
 800743a:	4633      	mov	r3, r6
 800743c:	4622      	mov	r2, r4
 800743e:	4629      	mov	r1, r5
 8007440:	4648      	mov	r0, r9
 8007442:	e08c      	b.n	800755e <_DrawGradient+0x15e>
 8007444:	ebb4 0709 	subs.w	r7, r4, r9
 8007448:	f000 80a1 	beq.w	800758e <_DrawGradient+0x18e>
 800744c:	fa5f f288 	uxtb.w	r2, r8
 8007450:	fa5f f38b 	uxtb.w	r3, fp
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	2302      	movs	r3, #2
 800745a:	fb97 f3f3 	sdiv	r3, r7, r3
 800745e:	fb02 3207 	mla	r2, r2, r7, r3
 8007462:	9202      	str	r2, [sp, #8]
 8007464:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8007468:	f3c8 2207 	ubfx	r2, r8, #8, #8
 800746c:	1a89      	subs	r1, r1, r2
 800746e:	fb02 3207 	mla	r2, r2, r7, r3
 8007472:	9109      	str	r1, [sp, #36]	; 0x24
 8007474:	9203      	str	r2, [sp, #12]
 8007476:	f3cb 4107 	ubfx	r1, fp, #16, #8
 800747a:	f3c8 4207 	ubfx	r2, r8, #16, #8
 800747e:	1a89      	subs	r1, r1, r2
 8007480:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8007484:	fb02 3207 	mla	r2, r2, r7, r3
 8007488:	9204      	str	r2, [sp, #16]
 800748a:	fb08 3307 	mla	r3, r8, r7, r3
 800748e:	ebc8 621b 	rsb	r2, r8, fp, lsr #24
 8007492:	9806      	ldr	r0, [sp, #24]
 8007494:	910a      	str	r1, [sp, #40]	; 0x28
 8007496:	920b      	str	r2, [sp, #44]	; 0x2c
 8007498:	9305      	str	r3, [sp, #20]
 800749a:	f109 38ff 	add.w	r8, r9, #4294967295
 800749e:	f04f 0a01 	mov.w	sl, #1
 80074a2:	f108 0b01 	add.w	fp, r8, #1
 80074a6:	455c      	cmp	r4, fp
 80074a8:	db4c      	blt.n	8007544 <_DrawGradient+0x144>
 80074aa:	9b02      	ldr	r3, [sp, #8]
 80074ac:	9a08      	ldr	r2, [sp, #32]
 80074ae:	fb93 f1f7 	sdiv	r1, r3, r7
 80074b2:	4413      	add	r3, r2
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	fb93 fef7 	sdiv	lr, r3, r7
 80074be:	4413      	add	r3, r2
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	fb93 fcf7 	sdiv	ip, r3, r7
 80074ca:	4413      	add	r3, r2
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	fb93 f3f7 	sdiv	r3, r3, r7
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	9b05      	ldr	r3, [sp, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	061a      	lsls	r2, r3, #24
 80074e2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80074e6:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 80074ea:	ea42 0301 	orr.w	r3, r2, r1
 80074ee:	45d9      	cmp	r9, fp
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	da24      	bge.n	800753e <_DrawGradient+0x13e>
 80074f4:	4298      	cmp	r0, r3
 80074f6:	d102      	bne.n	80074fe <_DrawGradient+0xfe>
 80074f8:	f10a 0a01 	add.w	sl, sl, #1
 80074fc:	e01f      	b.n	800753e <_DrawGradient+0x13e>
 80074fe:	f000 fd29 	bl	8007f54 <LCD_SetColor>
 8007502:	f1ba 0f01 	cmp.w	sl, #1
 8007506:	d010      	beq.n	800752a <_DrawGradient+0x12a>
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	ebca 000b 	rsb	r0, sl, fp
 800750e:	b123      	cbz	r3, 800751a <_DrawGradient+0x11a>
 8007510:	4601      	mov	r1, r0
 8007512:	4643      	mov	r3, r8
 8007514:	4632      	mov	r2, r6
 8007516:	4628      	mov	r0, r5
 8007518:	e002      	b.n	8007520 <_DrawGradient+0x120>
 800751a:	4633      	mov	r3, r6
 800751c:	4642      	mov	r2, r8
 800751e:	4629      	mov	r1, r5
 8007520:	f000 fa34 	bl	800798c <LCD_FillRect>
 8007524:	f04f 0a01 	mov.w	sl, #1
 8007528:	e009      	b.n	800753e <_DrawGradient+0x13e>
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	4632      	mov	r2, r6
 800752e:	b113      	cbz	r3, 8007536 <_DrawGradient+0x136>
 8007530:	4641      	mov	r1, r8
 8007532:	4628      	mov	r0, r5
 8007534:	e001      	b.n	800753a <_DrawGradient+0x13a>
 8007536:	4629      	mov	r1, r5
 8007538:	4640      	mov	r0, r8
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	4798      	blx	r3
 800753e:	46d8      	mov	r8, fp
 8007540:	9807      	ldr	r0, [sp, #28]
 8007542:	e7ae      	b.n	80074a2 <_DrawGradient+0xa2>
 8007544:	f000 fd06 	bl	8007f54 <LCD_SetColor>
 8007548:	f1ba 0f01 	cmp.w	sl, #1
 800754c:	d00f      	beq.n	800756e <_DrawGradient+0x16e>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	ebca 0004 	rsb	r0, sl, r4
 8007554:	b133      	cbz	r3, 8007564 <_DrawGradient+0x164>
 8007556:	4623      	mov	r3, r4
 8007558:	4632      	mov	r2, r6
 800755a:	1c41      	adds	r1, r0, #1
 800755c:	4628      	mov	r0, r5
 800755e:	f000 fa15 	bl	800798c <LCD_FillRect>
 8007562:	e00e      	b.n	8007582 <_DrawGradient+0x182>
 8007564:	4633      	mov	r3, r6
 8007566:	4622      	mov	r2, r4
 8007568:	4629      	mov	r1, r5
 800756a:	3001      	adds	r0, #1
 800756c:	e7f7      	b.n	800755e <_DrawGradient+0x15e>
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	4632      	mov	r2, r6
 8007572:	b113      	cbz	r3, 800757a <_DrawGradient+0x17a>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	e001      	b.n	800757e <_DrawGradient+0x17e>
 800757a:	4629      	mov	r1, r5
 800757c:	4620      	mov	r0, r4
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	4798      	blx	r3
 8007582:	9806      	ldr	r0, [sp, #24]
 8007584:	b00d      	add	sp, #52	; 0x34
 8007586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	f000 bce3 	b.w	8007f54 <LCD_SetColor>
 800758e:	b00d      	add	sp, #52	; 0x34
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007594 <GUI_DrawGradientH>:
 8007594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007598:	4c15      	ldr	r4, [pc, #84]	; (80075f0 <GUI_DrawGradientH+0x5c>)
 800759a:	6824      	ldr	r4, [r4, #0]
 800759c:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800759e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80075a0:	b087      	sub	sp, #28
 80075a2:	eb07 0900 	add.w	r9, r7, r0
 80075a6:	eb04 0801 	add.w	r8, r4, r1
 80075aa:	4417      	add	r7, r2
 80075ac:	441c      	add	r4, r3
 80075ae:	a804      	add	r0, sp, #16
 80075b0:	f8ad 9010 	strh.w	r9, [sp, #16]
 80075b4:	f8ad 7014 	strh.w	r7, [sp, #20]
 80075b8:	f8ad 8012 	strh.w	r8, [sp, #18]
 80075bc:	f8ad 4016 	strh.w	r4, [sp, #22]
 80075c0:	f003 fd68 	bl	800b094 <WM__InitIVRSearch>
 80075c4:	b188      	cbz	r0, 80075ea <GUI_DrawGradientH+0x56>
 80075c6:	4d0b      	ldr	r5, [pc, #44]	; (80075f4 <GUI_DrawGradientH+0x60>)
 80075c8:	2600      	movs	r6, #0
 80075ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4622      	mov	r2, r4
 80075d4:	463b      	mov	r3, r7
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	9603      	str	r6, [sp, #12]
 80075dc:	9502      	str	r5, [sp, #8]
 80075de:	f7ff ff0f 	bl	8007400 <_DrawGradient>
 80075e2:	f003 fc95 	bl	800af10 <WM__GetNextIVR>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d1ef      	bne.n	80075ca <GUI_DrawGradientH+0x36>
 80075ea:	b007      	add	sp, #28
 80075ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f0:	20000014 	.word	0x20000014
 80075f4:	08007939 	.word	0x08007939

080075f8 <GUI_StoreKey>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <GUI_StoreKey+0xc>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	b902      	cbnz	r2, 8007600 <GUI_StoreKey+0x8>
 80075fe:	6018      	str	r0, [r3, #0]
 8007600:	f000 b8a6 	b.w	8007750 <GUI_SignalEvent>
 8007604:	20000120 	.word	0x20000120

08007608 <GUI_UC__GetCharCodeInc>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	4e08      	ldr	r6, [pc, #32]	; (800762c <GUI_UC__GetCharCodeInc+0x24>)
 800760c:	6804      	ldr	r4, [r0, #0]
 800760e:	6833      	ldr	r3, [r6, #0]
 8007610:	4605      	mov	r5, r0
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4620      	mov	r0, r4
 8007616:	4798      	blx	r3
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	4607      	mov	r7, r0
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4620      	mov	r0, r4
 8007620:	4798      	blx	r3
 8007622:	4420      	add	r0, r4
 8007624:	6028      	str	r0, [r5, #0]
 8007626:	4638      	mov	r0, r7
 8007628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800762a:	bf00      	nop
 800762c:	200083e0 	.word	0x200083e0

08007630 <GUI_UC__NumChars2NumBytes>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	4f07      	ldr	r7, [pc, #28]	; (8007650 <GUI_UC__NumChars2NumBytes+0x20>)
 8007634:	4606      	mov	r6, r0
 8007636:	460d      	mov	r5, r1
 8007638:	2400      	movs	r4, #0
 800763a:	b13d      	cbz	r5, 800764c <GUI_UC__NumChars2NumBytes+0x1c>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4798      	blx	r3
 8007644:	3d01      	subs	r5, #1
 8007646:	4406      	add	r6, r0
 8007648:	4404      	add	r4, r0
 800764a:	e7f6      	b.n	800763a <GUI_UC__NumChars2NumBytes+0xa>
 800764c:	4620      	mov	r0, r4
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	200083e0 	.word	0x200083e0

08007654 <_GetCharCode>:
 8007654:	7800      	ldrb	r0, [r0, #0]
 8007656:	4770      	bx	lr

08007658 <_GetCharSize>:
 8007658:	2001      	movs	r0, #1
 800765a:	4770      	bx	lr

0800765c <_CalcSizeOfChar>:
 800765c:	2001      	movs	r0, #1
 800765e:	4770      	bx	lr

08007660 <_Encode>:
 8007660:	7001      	strb	r1, [r0, #0]
 8007662:	2001      	movs	r0, #1
 8007664:	4770      	bx	lr

08007666 <_RoundHalfUp>:
 8007666:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	b508      	push	{r3, lr}
 8007670:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007674:	d50a      	bpl.n	800768c <_RoundHalfUp+0x26>
 8007676:	ee70 7a67 	vsub.f32	s15, s0, s15
 800767a:	ee17 0a90 	vmov	r0, s15
 800767e:	f7f9 f831 	bl	80006e4 <__aeabi_f2d>
 8007682:	ec41 0b10 	vmov	d0, r0, r1
 8007686:	f004 fcbb 	bl	800c000 <ceil>
 800768a:	e009      	b.n	80076a0 <_RoundHalfUp+0x3a>
 800768c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007690:	ee17 0a90 	vmov	r0, s15
 8007694:	f7f9 f826 	bl	80006e4 <__aeabi_f2d>
 8007698:	ec41 0b10 	vmov	d0, r0, r1
 800769c:	f004 fd34 	bl	800c108 <floor>
 80076a0:	ec51 0b10 	vmov	r0, r1, d0
 80076a4:	f7f9 f8fe 	bl	80008a4 <__aeabi_d2f>
 80076a8:	ee00 0a10 	vmov	s0, r0
 80076ac:	bd08      	pop	{r3, pc}
	...

080076b0 <_DispFloatFix>:
 80076b0:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <_DispFloatFix+0x48>)
 80076b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80076c4:	460c      	mov	r4, r1
 80076c6:	4605      	mov	r5, r0
 80076c8:	4616      	mov	r6, r2
 80076ca:	f7ff ffcc 	bl	8007666 <_RoundHalfUp>
 80076ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80076d2:	4622      	mov	r2, r4
 80076d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80076d8:	4629      	mov	r1, r5
 80076da:	b136      	cbz	r6, 80076ea <_DispFloatFix+0x3a>
 80076dc:	ee17 0a90 	vmov	r0, s15
 80076e0:	b002      	add	sp, #8
 80076e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076e6:	f004 ba3b 	b.w	800bb60 <GUI_DispSDecShift>
 80076ea:	9801      	ldr	r0, [sp, #4]
 80076ec:	b002      	add	sp, #8
 80076ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076f2:	f004 ba29 	b.w	800bb48 <GUI_DispDecShift>
 80076f6:	bf00      	nop
 80076f8:	0800c288 	.word	0x0800c288

080076fc <GUI_DispFloat>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007702:	ed2d 8b02 	vpush	{d8}
 8007706:	4604      	mov	r4, r0
 8007708:	ee17 0a90 	vmov	r0, s15
 800770c:	eeb0 8a40 	vmov.f32	s16, s0
 8007710:	f7ff f9dc 	bl	8006acc <GUI_Long2Len>
 8007714:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007718:	1a20      	subs	r0, r4, r0
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771e:	f100 31ff 	add.w	r1, r0, #4294967295
 8007722:	d507      	bpl.n	8007734 <GUI_DispFloat+0x38>
 8007724:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007728:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	bfc8      	it	gt
 8007732:	1e81      	subgt	r1, r0, #2
 8007734:	eeb0 0a48 	vmov.f32	s0, s16
 8007738:	ecbd 8b02 	vpop	{d8}
 800773c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007740:	4620      	mov	r0, r4
 8007742:	2200      	movs	r2, #0
 8007744:	b2c9      	uxtb	r1, r1
 8007746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774a:	f7ff bfb1 	b.w	80076b0 <_DispFloatFix>
	...

08007750 <GUI_SignalEvent>:
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <GUI_SignalEvent+0xc>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	b103      	cbz	r3, 8007758 <GUI_SignalEvent+0x8>
 8007756:	4718      	bx	r3
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000180 	.word	0x20000180

08007760 <GUI__IntersectRect>:
 8007760:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007764:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007768:	429a      	cmp	r2, r3
 800776a:	bfb8      	it	lt
 800776c:	8003      	strhlt	r3, [r0, #0]
 800776e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007772:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8007776:	429a      	cmp	r2, r3
 8007778:	bfb8      	it	lt
 800777a:	8043      	strhlt	r3, [r0, #2]
 800777c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007780:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	bfc8      	it	gt
 8007788:	8083      	strhgt	r3, [r0, #4]
 800778a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800778e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8007792:	429a      	cmp	r2, r3
 8007794:	bfc8      	it	gt
 8007796:	80c3      	strhgt	r3, [r0, #6]
 8007798:	4770      	bx	lr

0800779a <GUI__IntersectRects>:
 800779a:	b570      	push	{r4, r5, r6, lr}
 800779c:	f9b1 3000 	ldrsh.w	r3, [r1]
 80077a0:	f9b2 5000 	ldrsh.w	r5, [r2]
 80077a4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80077a8:	429d      	cmp	r5, r3
 80077aa:	bfb8      	it	lt
 80077ac:	461d      	movlt	r5, r3
 80077ae:	4606      	mov	r6, r0
 80077b0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80077b4:	8005      	strh	r5, [r0, #0]
 80077b6:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80077ba:	4283      	cmp	r3, r0
 80077bc:	bfb8      	it	lt
 80077be:	4603      	movlt	r3, r0
 80077c0:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 80077c4:	8073      	strh	r3, [r6, #2]
 80077c6:	4284      	cmp	r4, r0
 80077c8:	bfa8      	it	ge
 80077ca:	4604      	movge	r4, r0
 80077cc:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80077d0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80077d4:	80b4      	strh	r4, [r6, #4]
 80077d6:	4282      	cmp	r2, r0
 80077d8:	bfa8      	it	ge
 80077da:	4602      	movge	r2, r0
 80077dc:	42a5      	cmp	r5, r4
 80077de:	80f2      	strh	r2, [r6, #6]
 80077e0:	dc04      	bgt.n	80077ec <GUI__IntersectRects+0x52>
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bfcc      	ite	gt
 80077e6:	2000      	movgt	r0, #0
 80077e8:	2001      	movle	r0, #1
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	2000      	movs	r0, #0
 80077ee:	bd70      	pop	{r4, r5, r6, pc}

080077f0 <GUI__memset16>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	0784      	lsls	r4, r0, #30
 80077f4:	bf42      	ittt	mi
 80077f6:	f102 32ff 	addmi.w	r2, r2, #4294967295
 80077fa:	8001      	strhmi	r1, [r0, #0]
 80077fc:	3002      	addmi	r0, #2
 80077fe:	0854      	lsrs	r4, r2, #1
 8007800:	d024      	beq.n	800784c <GUI__memset16+0x5c>
 8007802:	2c03      	cmp	r4, #3
 8007804:	4623      	mov	r3, r4
 8007806:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 800780a:	d802      	bhi.n	8007812 <GUI__memset16+0x22>
 800780c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007810:	e017      	b.n	8007842 <GUI__memset16+0x52>
 8007812:	f100 0310 	add.w	r3, r0, #16
 8007816:	4626      	mov	r6, r4
 8007818:	3e04      	subs	r6, #4
 800781a:	2e03      	cmp	r6, #3
 800781c:	f843 5c10 	str.w	r5, [r3, #-16]
 8007820:	f843 5c0c 	str.w	r5, [r3, #-12]
 8007824:	f843 5c08 	str.w	r5, [r3, #-8]
 8007828:	f843 5c04 	str.w	r5, [r3, #-4]
 800782c:	f103 0310 	add.w	r3, r3, #16
 8007830:	dcf2      	bgt.n	8007818 <GUI__memset16+0x28>
 8007832:	3c04      	subs	r4, #4
 8007834:	08a3      	lsrs	r3, r4, #2
 8007836:	1c5e      	adds	r6, r3, #1
 8007838:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800783c:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8007840:	e7e4      	b.n	800780c <GUI__memset16+0x1c>
 8007842:	4298      	cmp	r0, r3
 8007844:	d002      	beq.n	800784c <GUI__memset16+0x5c>
 8007846:	f840 5b04 	str.w	r5, [r0], #4
 800784a:	e7fa      	b.n	8007842 <GUI__memset16+0x52>
 800784c:	07d3      	lsls	r3, r2, #31
 800784e:	bf48      	it	mi
 8007850:	8001      	strhmi	r1, [r0, #0]
 8007852:	bd70      	pop	{r4, r5, r6, pc}

08007854 <_SetDrawMode>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	4b08      	ldr	r3, [pc, #32]	; (8007878 <_SetDrawMode+0x24>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	7c1a      	ldrb	r2, [r3, #16]
 800785c:	ea82 0100 	eor.w	r1, r2, r0
 8007860:	0749      	lsls	r1, r1, #29
 8007862:	d505      	bpl.n	8007870 <_SetDrawMode+0x1c>
 8007864:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8007866:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007868:	6825      	ldr	r5, [r4, #0]
 800786a:	680e      	ldr	r6, [r1, #0]
 800786c:	6026      	str	r6, [r4, #0]
 800786e:	600d      	str	r5, [r1, #0]
 8007870:	7418      	strb	r0, [r3, #16]
 8007872:	4610      	mov	r0, r2
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	bf00      	nop
 8007878:	20000014 	.word	0x20000014

0800787c <LCD_SetDrawMode>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <LCD_SetDrawMode+0x8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	4718      	bx	r3
 8007884:	20000020 	.word	0x20000020

08007888 <LCD_DrawPixel>:
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <LCD_DrawPixel+0x58>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	460a      	mov	r2, r1
 800788e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8007892:	4291      	cmp	r1, r2
 8007894:	b430      	push	{r4, r5}
 8007896:	4604      	mov	r4, r0
 8007898:	dc20      	bgt.n	80078dc <LCD_DrawPixel+0x54>
 800789a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800789e:	428a      	cmp	r2, r1
 80078a0:	dc1c      	bgt.n	80078dc <LCD_DrawPixel+0x54>
 80078a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80078a6:	4281      	cmp	r1, r0
 80078a8:	dc18      	bgt.n	80078dc <LCD_DrawPixel+0x54>
 80078aa:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80078ae:	4288      	cmp	r0, r1
 80078b0:	dc14      	bgt.n	80078dc <LCD_DrawPixel+0x54>
 80078b2:	7c19      	ldrb	r1, [r3, #16]
 80078b4:	7c58      	ldrb	r0, [r3, #17]
 80078b6:	f011 0f01 	tst.w	r1, #1
 80078ba:	490a      	ldr	r1, [pc, #40]	; (80078e4 <LCD_DrawPixel+0x5c>)
 80078bc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80078c0:	d004      	beq.n	80078cc <LCD_DrawPixel+0x44>
 80078c2:	68c3      	ldr	r3, [r0, #12]
 80078c4:	4621      	mov	r1, r4
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	bc30      	pop	{r4, r5}
 80078ca:	4718      	bx	r3
 80078cc:	68c1      	ldr	r1, [r0, #12]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	698d      	ldr	r5, [r1, #24]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4621      	mov	r1, r4
 80078d6:	46ac      	mov	ip, r5
 80078d8:	bc30      	pop	{r4, r5}
 80078da:	4760      	bx	ip
 80078dc:	bc30      	pop	{r4, r5}
 80078de:	4770      	bx	lr
 80078e0:	20000014 	.word	0x20000014
 80078e4:	200083e8 	.word	0x200083e8

080078e8 <LCD_DrawHLine>:
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <LCD_DrawHLine+0x48>)
 80078ea:	b430      	push	{r4, r5}
 80078ec:	681c      	ldr	r4, [r3, #0]
 80078ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80078f2:	428b      	cmp	r3, r1
 80078f4:	460d      	mov	r5, r1
 80078f6:	dc19      	bgt.n	800792c <LCD_DrawHLine+0x44>
 80078f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80078fc:	4299      	cmp	r1, r3
 80078fe:	dc15      	bgt.n	800792c <LCD_DrawHLine+0x44>
 8007900:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8007904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007908:	4281      	cmp	r1, r0
 800790a:	bfb8      	it	lt
 800790c:	4601      	movlt	r1, r0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfa8      	it	ge
 8007912:	4613      	movge	r3, r2
 8007914:	4299      	cmp	r1, r3
 8007916:	dc09      	bgt.n	800792c <LCD_DrawHLine+0x44>
 8007918:	7c60      	ldrb	r0, [r4, #17]
 800791a:	4a06      	ldr	r2, [pc, #24]	; (8007934 <LCD_DrawHLine+0x4c>)
 800791c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007920:	68c2      	ldr	r2, [r0, #12]
 8007922:	6894      	ldr	r4, [r2, #8]
 8007924:	462a      	mov	r2, r5
 8007926:	46a4      	mov	ip, r4
 8007928:	bc30      	pop	{r4, r5}
 800792a:	4760      	bx	ip
 800792c:	bc30      	pop	{r4, r5}
 800792e:	4770      	bx	lr
 8007930:	20000014 	.word	0x20000014
 8007934:	200083e8 	.word	0x200083e8

08007938 <LCD_DrawVLine>:
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <LCD_DrawVLine+0x4c>)
 800793a:	b430      	push	{r4, r5}
 800793c:	681c      	ldr	r4, [r3, #0]
 800793e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8007942:	4283      	cmp	r3, r0
 8007944:	dc1b      	bgt.n	800797e <LCD_DrawVLine+0x46>
 8007946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794a:	4298      	cmp	r0, r3
 800794c:	dc17      	bgt.n	800797e <LCD_DrawVLine+0x46>
 800794e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8007952:	4299      	cmp	r1, r3
 8007954:	bfb8      	it	lt
 8007956:	4619      	movlt	r1, r3
 8007958:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800795c:	4293      	cmp	r3, r2
 800795e:	bfa8      	it	ge
 8007960:	4613      	movge	r3, r2
 8007962:	4299      	cmp	r1, r3
 8007964:	dc0b      	bgt.n	800797e <LCD_DrawVLine+0x46>
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <LCD_DrawVLine+0x50>)
 8007968:	7c64      	ldrb	r4, [r4, #17]
 800796a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800796e:	68e2      	ldr	r2, [r4, #12]
 8007970:	68d5      	ldr	r5, [r2, #12]
 8007972:	460a      	mov	r2, r1
 8007974:	46ac      	mov	ip, r5
 8007976:	4601      	mov	r1, r0
 8007978:	4620      	mov	r0, r4
 800797a:	bc30      	pop	{r4, r5}
 800797c:	4760      	bx	ip
 800797e:	bc30      	pop	{r4, r5}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000014 	.word	0x20000014
 8007988:	200083e8 	.word	0x200083e8

0800798c <LCD_FillRect>:
 800798c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800798e:	4c13      	ldr	r4, [pc, #76]	; (80079dc <LCD_FillRect+0x50>)
 8007990:	6824      	ldr	r4, [r4, #0]
 8007992:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8007996:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800799a:	4285      	cmp	r5, r0
 800799c:	bfb8      	it	lt
 800799e:	4605      	movlt	r5, r0
 80079a0:	4296      	cmp	r6, r2
 80079a2:	bfa8      	it	ge
 80079a4:	4616      	movge	r6, r2
 80079a6:	42ae      	cmp	r6, r5
 80079a8:	db15      	blt.n	80079d6 <LCD_FillRect+0x4a>
 80079aa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80079ae:	428a      	cmp	r2, r1
 80079b0:	bfb8      	it	lt
 80079b2:	460a      	movlt	r2, r1
 80079b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b8:	428b      	cmp	r3, r1
 80079ba:	bfa8      	it	ge
 80079bc:	460b      	movge	r3, r1
 80079be:	429a      	cmp	r2, r3
 80079c0:	dc09      	bgt.n	80079d6 <LCD_FillRect+0x4a>
 80079c2:	7c60      	ldrb	r0, [r4, #17]
 80079c4:	4906      	ldr	r1, [pc, #24]	; (80079e0 <LCD_FillRect+0x54>)
 80079c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80079ca:	68c1      	ldr	r1, [r0, #12]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	690c      	ldr	r4, [r1, #16]
 80079d0:	4633      	mov	r3, r6
 80079d2:	4629      	mov	r1, r5
 80079d4:	47a0      	blx	r4
 80079d6:	b002      	add	sp, #8
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
 80079da:	bf00      	nop
 80079dc:	20000014 	.word	0x20000014
 80079e0:	200083e8 	.word	0x200083e8

080079e4 <LCD__DrawBitmap_1bpp>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	b08f      	sub	sp, #60	; 0x3c
 80079ea:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8007bb8 <LCD__DrawBitmap_1bpp+0x1d4>
 80079ee:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80079f0:	9502      	str	r5, [sp, #8]
 80079f2:	f8de e000 	ldr.w	lr, [lr]
 80079f6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80079f8:	9508      	str	r5, [sp, #32]
 80079fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80079fc:	9503      	str	r5, [sp, #12]
 80079fe:	9007      	str	r0, [sp, #28]
 8007a00:	460c      	mov	r4, r1
 8007a02:	4617      	mov	r7, r2
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007a0a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007a0c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8007a10:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8007a12:	f1be 0f00 	cmp.w	lr, #0
 8007a16:	d002      	beq.n	8007a1e <LCD__DrawBitmap_1bpp+0x3a>
 8007a18:	f8de 4000 	ldr.w	r4, [lr]
 8007a1c:	e054      	b.n	8007ac8 <LCD__DrawBitmap_1bpp+0xe4>
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	9a08      	ldr	r2, [sp, #32]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d154      	bne.n	8007ad2 <LCD__DrawBitmap_1bpp+0xee>
 8007a28:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <LCD__DrawBitmap_1bpp+0x1cc>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8007a30:	1a53      	subs	r3, r2, r1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dd0a      	ble.n	8007a4c <LCD__DrawBitmap_1bpp+0x68>
 8007a36:	9901      	ldr	r1, [sp, #4]
 8007a38:	ebc3 0e01 	rsb	lr, r3, r1
 8007a3c:	f1be 0f00 	cmp.w	lr, #0
 8007a40:	f340 80b2 	ble.w	8007ba8 <LCD__DrawBitmap_1bpp+0x1c4>
 8007a44:	9903      	ldr	r1, [sp, #12]
 8007a46:	fb01 6603 	mla	r6, r1, r3, r6
 8007a4a:	e002      	b.n	8007a52 <LCD__DrawBitmap_1bpp+0x6e>
 8007a4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007a50:	460a      	mov	r2, r1
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	441c      	add	r4, r3
 8007a56:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8007a5a:	3c01      	subs	r4, #1
 8007a5c:	1ae4      	subs	r4, r4, r3
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	dd05      	ble.n	8007a6e <LCD__DrawBitmap_1bpp+0x8a>
 8007a62:	ebc4 0e0e 	rsb	lr, r4, lr
 8007a66:	f1be 0f00 	cmp.w	lr, #0
 8007a6a:	f340 809d 	ble.w	8007ba8 <LCD__DrawBitmap_1bpp+0x1c4>
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8007a74:	443b      	add	r3, r7
 8007a76:	3b01      	subs	r3, #1
 8007a78:	1a5b      	subs	r3, r3, r1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfc8      	it	gt
 8007a7e:	1aff      	subgt	r7, r7, r3
 8007a80:	9b07      	ldr	r3, [sp, #28]
 8007a82:	1b59      	subs	r1, r3, r5
 8007a84:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	da09      	bge.n	8007aa0 <LCD__DrawBitmap_1bpp+0xbc>
 8007a8c:	1a5b      	subs	r3, r3, r1
 8007a8e:	441d      	add	r5, r3
 8007a90:	1aff      	subs	r7, r7, r3
 8007a92:	f023 0307 	bic.w	r3, r3, #7
 8007a96:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8007a9a:	4419      	add	r1, r3
 8007a9c:	f005 0507 	and.w	r5, r5, #7
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	f340 8081 	ble.w	8007ba8 <LCD__DrawBitmap_1bpp+0x1c4>
 8007aa6:	7c40      	ldrb	r0, [r0, #17]
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <LCD__DrawBitmap_1bpp+0x1d0>)
 8007aaa:	9c03      	ldr	r4, [sp, #12]
 8007aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007ab0:	68c3      	ldr	r3, [r0, #12]
 8007ab2:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8007ab6:	951c      	str	r5, [sp, #112]	; 0x70
 8007ab8:	961b      	str	r6, [sp, #108]	; 0x6c
 8007aba:	941a      	str	r4, [sp, #104]	; 0x68
 8007abc:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8007ac0:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8007ac4:	685c      	ldr	r4, [r3, #4]
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	46a4      	mov	ip, r4
 8007aca:	b00f      	add	sp, #60	; 0x3c
 8007acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	4760      	bx	ip
 8007ad2:	f1ca 0308 	rsb	r3, sl, #8
 8007ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8007bb0 <LCD__DrawBitmap_1bpp+0x1cc>
 8007ade:	f8cd e014 	str.w	lr, [sp, #20]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4675      	mov	r5, lr
 8007ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	9a01      	ldr	r2, [sp, #4]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	da5b      	bge.n	8007ba8 <LCD__DrawBitmap_1bpp+0x1c4>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	18e3      	adds	r3, r4, r3
 8007af4:	9309      	str	r3, [sp, #36]	; 0x24
 8007af6:	3b01      	subs	r3, #1
 8007af8:	930a      	str	r3, [sp, #40]	; 0x28
 8007afa:	f8d9 3000 	ldr.w	r3, [r9]
 8007afe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b00:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8007b04:	428a      	cmp	r2, r1
 8007b06:	dc48      	bgt.n	8007b9a <LCD__DrawBitmap_1bpp+0x1b6>
 8007b08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	dc44      	bgt.n	8007b9a <LCD__DrawBitmap_1bpp+0x1b6>
 8007b10:	9b07      	ldr	r3, [sp, #28]
 8007b12:	9606      	str	r6, [sp, #24]
 8007b14:	f04f 0800 	mov.w	r8, #0
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	42bb      	cmp	r3, r7
 8007b22:	da3a      	bge.n	8007b9a <LCD__DrawBitmap_1bpp+0x1b6>
 8007b24:	f1b8 0f00 	cmp.w	r8, #0
 8007b28:	d105      	bne.n	8007b36 <LCD__DrawBitmap_1bpp+0x152>
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	781d      	ldrb	r5, [r3, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	9306      	str	r3, [sp, #24]
 8007b32:	f04f 0808 	mov.w	r8, #8
 8007b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b38:	fa45 f303 	asr.w	r3, r5, r3
 8007b3c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8007b40:	fa05 f50a 	lsl.w	r5, r5, sl
 8007b44:	b2ed      	uxtb	r5, r5
 8007b46:	ebca 0808 	rsb	r8, sl, r8
 8007b4a:	d104      	bne.n	8007b56 <LCD__DrawBitmap_1bpp+0x172>
 8007b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b50:	7c12      	ldrb	r2, [r2, #16]
 8007b52:	0792      	lsls	r2, r2, #30
 8007b54:	d419      	bmi.n	8007b8a <LCD__DrawBitmap_1bpp+0x1a6>
 8007b56:	f8d9 2000 	ldr.w	r2, [r9]
 8007b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b5c:	6810      	ldr	r0, [r2, #0]
 8007b5e:	900c      	str	r0, [sp, #48]	; 0x30
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d002      	beq.n	8007b6c <LCD__DrawBitmap_1bpp+0x188>
 8007b66:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8007b6a:	e000      	b.n	8007b6e <LCD__DrawBitmap_1bpp+0x18a>
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	9900      	ldr	r1, [sp, #0]
 8007b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b76:	9800      	ldr	r0, [sp, #0]
 8007b78:	440a      	add	r2, r1
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f7ff ff06 	bl	800798c <LCD_FillRect>
 8007b80:	f8d9 3000 	ldr.w	r3, [r9]
 8007b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	9a02      	ldr	r2, [sp, #8]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	e7c1      	b.n	8007b1e <LCD__DrawBitmap_1bpp+0x13a>
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	441e      	add	r6, r3
 8007ba6:	e79f      	b.n	8007ae8 <LCD__DrawBitmap_1bpp+0x104>
 8007ba8:	b00f      	add	sp, #60	; 0x3c
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000014 	.word	0x20000014
 8007bb4:	200083e8 	.word	0x200083e8
 8007bb8:	200083a4 	.word	0x200083a4

08007bbc <LCD_DrawBitmap>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	b08f      	sub	sp, #60	; 0x3c
 8007bc2:	f8df e218 	ldr.w	lr, [pc, #536]	; 8007ddc <LCD_DrawBitmap+0x220>
 8007bc6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007bc8:	9402      	str	r4, [sp, #8]
 8007bca:	f8de e000 	ldr.w	lr, [lr]
 8007bce:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8007bd0:	9408      	str	r4, [sp, #32]
 8007bd2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007bd4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8007bd6:	9403      	str	r4, [sp, #12]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	9100      	str	r1, [sp, #0]
 8007bdc:	4690      	mov	r8, r2
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007be2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007be4:	9604      	str	r6, [sp, #16]
 8007be6:	f1be 0f00 	cmp.w	lr, #0
 8007bea:	d002      	beq.n	8007bf2 <LCD_DrawBitmap+0x36>
 8007bec:	f8de 4000 	ldr.w	r4, [lr]
 8007bf0:	e07a      	b.n	8007ce8 <LCD_DrawBitmap+0x12c>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	9a08      	ldr	r2, [sp, #32]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d17a      	bne.n	8007cf2 <LCD_DrawBitmap+0x136>
 8007bfc:	4b75      	ldr	r3, [pc, #468]	; (8007dd4 <LCD_DrawBitmap+0x218>)
 8007bfe:	9901      	ldr	r1, [sp, #4]
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	9b00      	ldr	r3, [sp, #0]
 8007c04:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dd07      	ble.n	8007c1e <LCD_DrawBitmap+0x62>
 8007c0e:	1ac9      	subs	r1, r1, r3
 8007c10:	2900      	cmp	r1, #0
 8007c12:	f340 80db 	ble.w	8007dcc <LCD_DrawBitmap+0x210>
 8007c16:	9e03      	ldr	r6, [sp, #12]
 8007c18:	fb06 4403 	mla	r4, r6, r3, r4
 8007c1c:	e000      	b.n	8007c20 <LCD_DrawBitmap+0x64>
 8007c1e:	9a00      	ldr	r2, [sp, #0]
 8007c20:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8007c24:	441e      	add	r6, r3
 8007c26:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8007c2a:	3e01      	subs	r6, #1
 8007c2c:	1af6      	subs	r6, r6, r3
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	dd03      	ble.n	8007c3a <LCD_DrawBitmap+0x7e>
 8007c32:	1b89      	subs	r1, r1, r6
 8007c34:	2900      	cmp	r1, #0
 8007c36:	f340 80c9 	ble.w	8007dcc <LCD_DrawBitmap+0x210>
 8007c3a:	eb05 0308 	add.w	r3, r5, r8
 8007c3e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	1b9b      	subs	r3, r3, r6
 8007c46:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfc8      	it	gt
 8007c4e:	ebc3 0808 	rsbgt	r8, r3, r8
 8007c52:	42b5      	cmp	r5, r6
 8007c54:	da31      	bge.n	8007cba <LCD_DrawBitmap+0xfe>
 8007c56:	1b73      	subs	r3, r6, r5
 8007c58:	2f08      	cmp	r7, #8
 8007c5a:	ebc3 0808 	rsb	r8, r3, r8
 8007c5e:	d027      	beq.n	8007cb0 <LCD_DrawBitmap+0xf4>
 8007c60:	dc0d      	bgt.n	8007c7e <LCD_DrawBitmap+0xc2>
 8007c62:	2f02      	cmp	r7, #2
 8007c64:	d014      	beq.n	8007c90 <LCD_DrawBitmap+0xd4>
 8007c66:	2f04      	cmp	r7, #4
 8007c68:	d01a      	beq.n	8007ca0 <LCD_DrawBitmap+0xe4>
 8007c6a:	2f01      	cmp	r7, #1
 8007c6c:	d126      	bne.n	8007cbc <LCD_DrawBitmap+0x100>
 8007c6e:	f023 0607 	bic.w	r6, r3, #7
 8007c72:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8007c76:	4435      	add	r5, r6
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	e01e      	b.n	8007cbc <LCD_DrawBitmap+0x100>
 8007c7e:	2f18      	cmp	r7, #24
 8007c80:	d018      	beq.n	8007cb4 <LCD_DrawBitmap+0xf8>
 8007c82:	2f20      	cmp	r7, #32
 8007c84:	d016      	beq.n	8007cb4 <LCD_DrawBitmap+0xf8>
 8007c86:	2f10      	cmp	r7, #16
 8007c88:	d118      	bne.n	8007cbc <LCD_DrawBitmap+0x100>
 8007c8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007c8e:	e013      	b.n	8007cb8 <LCD_DrawBitmap+0xfc>
 8007c90:	f023 0603 	bic.w	r6, r3, #3
 8007c94:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8007c98:	4435      	add	r5, r6
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	e00d      	b.n	8007cbc <LCD_DrawBitmap+0x100>
 8007ca0:	f023 0601 	bic.w	r6, r3, #1
 8007ca4:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8007ca8:	4435      	add	r5, r6
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	e005      	b.n	8007cbc <LCD_DrawBitmap+0x100>
 8007cb0:	441c      	add	r4, r3
 8007cb2:	e001      	b.n	8007cb8 <LCD_DrawBitmap+0xfc>
 8007cb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007cb8:	4635      	mov	r5, r6
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f1b8 0f00 	cmp.w	r8, #0
 8007cc0:	f340 8084 	ble.w	8007dcc <LCD_DrawBitmap+0x210>
 8007cc4:	7c46      	ldrb	r6, [r0, #17]
 8007cc6:	4844      	ldr	r0, [pc, #272]	; (8007dd8 <LCD_DrawBitmap+0x21c>)
 8007cc8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8007ccc:	9e04      	ldr	r6, [sp, #16]
 8007cce:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8007cd2:	931c      	str	r3, [sp, #112]	; 0x70
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd8:	9118      	str	r1, [sp, #96]	; 0x60
 8007cda:	961d      	str	r6, [sp, #116]	; 0x74
 8007cdc:	941b      	str	r4, [sp, #108]	; 0x6c
 8007cde:	9719      	str	r7, [sp, #100]	; 0x64
 8007ce0:	f8de 4004 	ldr.w	r4, [lr, #4]
 8007ce4:	4643      	mov	r3, r8
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	46a4      	mov	ip, r4
 8007cea:	b00f      	add	sp, #60	; 0x3c
 8007cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4760      	bx	ip
 8007cf2:	f1c7 0308 	rsb	r3, r7, #8
 8007cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007dd4 <LCD_DrawBitmap+0x218>
 8007cfe:	f8cd e018 	str.w	lr, [sp, #24]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	46f3      	mov	fp, lr
 8007d06:	930d      	str	r3, [sp, #52]	; 0x34
 8007d08:	9b06      	ldr	r3, [sp, #24]
 8007d0a:	9a01      	ldr	r2, [sp, #4]
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	da5d      	bge.n	8007dcc <LCD_DrawBitmap+0x210>
 8007d10:	9a00      	ldr	r2, [sp, #0]
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	4413      	add	r3, r2
 8007d16:	9309      	str	r3, [sp, #36]	; 0x24
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1c:	f8da 3000 	ldr.w	r3, [sl]
 8007d20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d22:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8007d26:	428a      	cmp	r2, r1
 8007d28:	dc48      	bgt.n	8007dbc <LCD_DrawBitmap+0x200>
 8007d2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007d2e:	9a00      	ldr	r2, [sp, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	dc43      	bgt.n	8007dbc <LCD_DrawBitmap+0x200>
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	9407      	str	r4, [sp, #28]
 8007d3a:	462e      	mov	r6, r5
 8007d3c:	f8cd 9014 	str.w	r9, [sp, #20]
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	4543      	cmp	r3, r8
 8007d44:	da3a      	bge.n	8007dbc <LCD_DrawBitmap+0x200>
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	d106      	bne.n	8007d5a <LCD_DrawBitmap+0x19e>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	f893 b000 	ldrb.w	fp, [r3]
 8007d52:	3301      	adds	r3, #1
 8007d54:	9307      	str	r3, [sp, #28]
 8007d56:	f04f 0908 	mov.w	r9, #8
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	fa4b f303 	asr.w	r3, fp, r3
 8007d60:	fa0b f207 	lsl.w	r2, fp, r7
 8007d64:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8007d68:	fa5f fb82 	uxtb.w	fp, r2
 8007d6c:	ebc7 0909 	rsb	r9, r7, r9
 8007d70:	d104      	bne.n	8007d7c <LCD_DrawBitmap+0x1c0>
 8007d72:	f8da 2000 	ldr.w	r2, [sl]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	0792      	lsls	r2, r2, #30
 8007d7a:	d417      	bmi.n	8007dac <LCD_DrawBitmap+0x1f0>
 8007d7c:	f8da 2000 	ldr.w	r2, [sl]
 8007d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d82:	6810      	ldr	r0, [r2, #0]
 8007d84:	900c      	str	r0, [sp, #48]	; 0x30
 8007d86:	9804      	ldr	r0, [sp, #16]
 8007d88:	b110      	cbz	r0, 8007d90 <LCD_DrawBitmap+0x1d4>
 8007d8a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8007d8e:	e000      	b.n	8007d92 <LCD_DrawBitmap+0x1d6>
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d98:	9900      	ldr	r1, [sp, #0]
 8007d9a:	4432      	add	r2, r6
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f7ff fdf5 	bl	800798c <LCD_FillRect>
 8007da2:	f8da 3000 	ldr.w	r3, [sl]
 8007da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	9b05      	ldr	r3, [sp, #20]
 8007dae:	9a02      	ldr	r2, [sp, #8]
 8007db0:	3301      	adds	r3, #1
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	4633      	mov	r3, r6
 8007db6:	4413      	add	r3, r2
 8007db8:	461e      	mov	r6, r3
 8007dba:	e7c1      	b.n	8007d40 <LCD_DrawBitmap+0x184>
 8007dbc:	9b06      	ldr	r3, [sp, #24]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9306      	str	r3, [sp, #24]
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	441c      	add	r4, r3
 8007dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	e79d      	b.n	8007d08 <LCD_DrawBitmap+0x14c>
 8007dcc:	b00f      	add	sp, #60	; 0x3c
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000014 	.word	0x20000014
 8007dd8:	200083e8 	.word	0x200083e8
 8007ddc:	200083a4 	.word	0x200083a4

08007de0 <LCD_SetClipRectMax>:
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <LCD_SetClipRectMax+0x14>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <LCD_SetClipRectMax+0x18>)
 8007de6:	7c4a      	ldrb	r2, [r1, #17]
 8007de8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007dec:	68c3      	ldr	r3, [r0, #12]
 8007dee:	3108      	adds	r1, #8
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	4718      	bx	r3
 8007df4:	20000014 	.word	0x20000014
 8007df8:	200083e8 	.word	0x200083e8

08007dfc <emWin_LCD_Init>:
 8007dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dfe:	f7ff ffef 	bl	8007de0 <LCD_SetClipRectMax>
 8007e02:	f000 f8bb 	bl	8007f7c <LCD_InitColors>
 8007e06:	4604      	mov	r4, r0
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d144      	bne.n	8007e96 <emWin_LCD_Init+0x9a>
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff f954 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8007e14:	9001      	str	r0, [sp, #4]
 8007e16:	b150      	cbz	r0, 8007e2e <emWin_LCD_Init+0x32>
 8007e18:	68c3      	ldr	r3, [r0, #12]
 8007e1a:	210c      	movs	r1, #12
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	a801      	add	r0, sp, #4
 8007e20:	4798      	blx	r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d034      	beq.n	8007e92 <emWin_LCD_Init+0x96>
 8007e28:	9801      	ldr	r0, [sp, #4]
 8007e2a:	4798      	blx	r3
 8007e2c:	4304      	orrs	r4, r0
 8007e2e:	3501      	adds	r5, #1
 8007e30:	2d02      	cmp	r5, #2
 8007e32:	d1ec      	bne.n	8007e0e <emWin_LCD_Init+0x12>
 8007e34:	bb7c      	cbnz	r4, 8007e96 <emWin_LCD_Init+0x9a>
 8007e36:	f000 f8f7 	bl	8008028 <LCD_InitLUT>
 8007e3a:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <emWin_LCD_Init+0xa0>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d101      	bne.n	8007e4a <emWin_LCD_Init+0x4e>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e026      	b.n	8007e98 <emWin_LCD_Init+0x9c>
 8007e4a:	2401      	movs	r4, #1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff f935 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	b1c8      	cbz	r0, 8007e8a <emWin_LCD_Init+0x8e>
 8007e56:	4620      	mov	r0, r4
 8007e58:	f003 fe60 	bl	800bb1c <GUI_SelectLayer>
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	f7ff fd0d 	bl	800787c <LCD_SetDrawMode>
 8007e62:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8007e66:	2100      	movs	r1, #0
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	f7ff fd8e 	bl	800798c <LCD_FillRect>
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7ff fd03 	bl	800787c <LCD_SetDrawMode>
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	210e      	movs	r1, #14
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	a801      	add	r0, sp, #4
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	b108      	cbz	r0, 8007e8a <emWin_LCD_Init+0x8e>
 8007e86:	9801      	ldr	r0, [sp, #4]
 8007e88:	4798      	blx	r3
 8007e8a:	f114 34ff 	adds.w	r4, r4, #4294967295
 8007e8e:	d2dd      	bcs.n	8007e4c <emWin_LCD_Init+0x50>
 8007e90:	e7d9      	b.n	8007e46 <emWin_LCD_Init+0x4a>
 8007e92:	2001      	movs	r0, #1
 8007e94:	e000      	b.n	8007e98 <emWin_LCD_Init+0x9c>
 8007e96:	4620      	mov	r0, r4
 8007e98:	b003      	add	sp, #12
 8007e9a:	bd30      	pop	{r4, r5, pc}
 8007e9c:	20000080 	.word	0x20000080

08007ea0 <LCD_Color2Index>:
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <LCD_Color2Index+0x14>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	7c5a      	ldrb	r2, [r3, #17]
 8007ea6:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <LCD_Color2Index+0x18>)
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4718      	bx	r3
 8007eb2:	bf00      	nop
 8007eb4:	20000014 	.word	0x20000014
 8007eb8:	200083e8 	.word	0x200083e8

08007ebc <LCD_Index2Color>:
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <LCD_Index2Color+0x14>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	7c5a      	ldrb	r2, [r3, #17]
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <LCD_Index2Color+0x18>)
 8007ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4718      	bx	r3
 8007ece:	bf00      	nop
 8007ed0:	20000014 	.word	0x20000014
 8007ed4:	200083e8 	.word	0x200083e8

08007ed8 <LCD_SetColorIndex>:
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <LCD_SetColorIndex+0x14>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	7c1a      	ldrb	r2, [r3, #16]
 8007ede:	0752      	lsls	r2, r2, #29
 8007ee0:	bf4c      	ite	mi
 8007ee2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8007ee4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8007ee6:	6018      	str	r0, [r3, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000014 	.word	0x20000014

08007ef0 <_SetColor>:
 8007ef0:	b508      	push	{r3, lr}
 8007ef2:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <_SetColor+0x1c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ef8:	4281      	cmp	r1, r0
 8007efa:	d006      	beq.n	8007f0a <_SetColor+0x1a>
 8007efc:	6318      	str	r0, [r3, #48]	; 0x30
 8007efe:	f7ff ffcf 	bl	8007ea0 <LCD_Color2Index>
 8007f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f06:	f7ff bfe7 	b.w	8007ed8 <LCD_SetColorIndex>
 8007f0a:	bd08      	pop	{r3, pc}
 8007f0c:	20000014 	.word	0x20000014

08007f10 <LCD_SetBkColorIndex>:
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <LCD_SetBkColorIndex+0x14>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	7c1a      	ldrb	r2, [r3, #16]
 8007f16:	0752      	lsls	r2, r2, #29
 8007f18:	bf4c      	ite	mi
 8007f1a:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8007f1c:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8007f1e:	6018      	str	r0, [r3, #0]
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000014 	.word	0x20000014

08007f28 <_SetBkColor>:
 8007f28:	b508      	push	{r3, lr}
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <_SetBkColor+0x1c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f30:	4281      	cmp	r1, r0
 8007f32:	d006      	beq.n	8007f42 <_SetBkColor+0x1a>
 8007f34:	6358      	str	r0, [r3, #52]	; 0x34
 8007f36:	f7ff ffb3 	bl	8007ea0 <LCD_Color2Index>
 8007f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f3e:	f7ff bfe7 	b.w	8007f10 <LCD_SetBkColorIndex>
 8007f42:	bd08      	pop	{r3, pc}
 8007f44:	20000014 	.word	0x20000014

08007f48 <LCD_SetBkColor>:
 8007f48:	4b01      	ldr	r3, [pc, #4]	; (8007f50 <LCD_SetBkColor+0x8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4718      	bx	r3
 8007f50:	20000020 	.word	0x20000020

08007f54 <LCD_SetColor>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <LCD_SetColor+0x8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4718      	bx	r3
 8007f5c:	20000020 	.word	0x20000020

08007f60 <_OnExit>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	4c04      	ldr	r4, [pc, #16]	; (8007f74 <_OnExit+0x14>)
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	f7fe fbe9 	bl	800673c <GUI_ALLOC_FreeFixedBlock>
 8007f6a:	4a03      	ldr	r2, [pc, #12]	; (8007f78 <_OnExit+0x18>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	bd10      	pop	{r4, pc}
 8007f74:	200083f8 	.word	0x200083f8
 8007f78:	20000188 	.word	0x20000188

08007f7c <LCD_InitColors>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d0a      	ldr	r5, [pc, #40]	; (8007fa8 <LCD_InitColors+0x2c>)
 8007f80:	682c      	ldr	r4, [r5, #0]
 8007f82:	b964      	cbnz	r4, 8007f9e <LCD_InitColors+0x22>
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <LCD_InitColors+0x30>)
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	0080      	lsls	r0, r0, #2
 8007f8a:	f7fe fcaf 	bl	80068ec <GUI_ALLOC_GetFixedBlock>
 8007f8e:	6028      	str	r0, [r5, #0]
 8007f90:	b138      	cbz	r0, 8007fa2 <LCD_InitColors+0x26>
 8007f92:	4807      	ldr	r0, [pc, #28]	; (8007fb0 <LCD_InitColors+0x34>)
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <LCD_InitColors+0x38>)
 8007f96:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f9a:	f7ff f87b 	bl	8007094 <GUI__RegisterExit>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200083f8 	.word	0x200083f8
 8007fac:	20000024 	.word	0x20000024
 8007fb0:	20000188 	.word	0x20000188
 8007fb4:	08007f61 	.word	0x08007f61

08007fb8 <LCD_GetpPalConvTableUncached>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	b318      	cbz	r0, 8008008 <LCD_GetpPalConvTableUncached+0x50>
 8007fc0:	6887      	ldr	r7, [r0, #8]
 8007fc2:	b31f      	cbz	r7, 800800c <LCD_GetpPalConvTableUncached+0x54>
 8007fc4:	4d14      	ldr	r5, [pc, #80]	; (8008018 <LCD_GetpPalConvTableUncached+0x60>)
 8007fc6:	6828      	ldr	r0, [r5, #0]
 8007fc8:	b320      	cbz	r0, 8008014 <LCD_GetpPalConvTableUncached+0x5c>
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007fd0:	dc1f      	bgt.n	8008012 <LCD_GetpPalConvTableUncached+0x5a>
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <LCD_GetpPalConvTableUncached+0x64>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	bfa8      	it	ge
 8007fda:	461a      	movge	r2, r3
 8007fdc:	4690      	mov	r8, r2
 8007fde:	2600      	movs	r6, #0
 8007fe0:	4546      	cmp	r6, r8
 8007fe2:	da09      	bge.n	8007ff8 <LCD_GetpPalConvTableUncached+0x40>
 8007fe4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8007fe8:	f8d5 9000 	ldr.w	r9, [r5]
 8007fec:	f7ff ff58 	bl	8007ea0 <LCD_Color2Index>
 8007ff0:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	e7f3      	b.n	8007fe0 <LCD_GetpPalConvTableUncached+0x28>
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <LCD_GetpPalConvTableUncached+0x68>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	b10b      	cbz	r3, 8008002 <LCD_GetpPalConvTableUncached+0x4a>
 8007ffe:	4620      	mov	r0, r4
 8008000:	4798      	blx	r3
 8008002:	6828      	ldr	r0, [r5, #0]
 8008004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800c:	4638      	mov	r0, r7
 800800e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008012:	2000      	movs	r0, #0
 8008014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008018:	200083f8 	.word	0x200083f8
 800801c:	20000024 	.word	0x20000024
 8008020:	20000188 	.word	0x20000188

08008024 <LCD_GetpPalConvTableBM>:
 8008024:	f7ff bfc8 	b.w	8007fb8 <LCD_GetpPalConvTableUncached>

08008028 <LCD_InitLUT>:
 8008028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	f000 f92f 	bl	800828e <LCD_GetNumLayers>
 8008030:	4e1c      	ldr	r6, [pc, #112]	; (80080a4 <LCD_InitLUT+0x7c>)
 8008032:	f8df a078 	ldr.w	sl, [pc, #120]	; 80080ac <LCD_InitLUT+0x84>
 8008036:	4680      	mov	r8, r0
 8008038:	2400      	movs	r4, #0
 800803a:	46b1      	mov	r9, r6
 800803c:	4544      	cmp	r4, r8
 800803e:	da2d      	bge.n	800809c <LCD_InitLUT+0x74>
 8008040:	4620      	mov	r0, r4
 8008042:	f7ff f83b 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8008046:	b338      	cbz	r0, 8008098 <LCD_InitLUT+0x70>
 8008048:	6833      	ldr	r3, [r6, #0]
 800804a:	4620      	mov	r0, r4
 800804c:	f893 b011 	ldrb.w	fp, [r3, #17]
 8008050:	745c      	strb	r4, [r3, #17]
 8008052:	f000 f863 	bl	800811c <LCD_GetBitsPerPixelEx>
 8008056:	2808      	cmp	r0, #8
 8008058:	dd04      	ble.n	8008064 <LCD_InitLUT+0x3c>
 800805a:	f8d9 3000 	ldr.w	r3, [r9]
 800805e:	f883 b011 	strb.w	fp, [r3, #17]
 8008062:	e019      	b.n	8008098 <LCD_InitLUT+0x70>
 8008064:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <LCD_InitLUT+0x80>)
 800806c:	429a      	cmp	r2, r3
 800806e:	d0f4      	beq.n	800805a <LCD_InitLUT+0x32>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f856 	bl	8008122 <LCD_GetNumColorsEx>
 8008076:	2500      	movs	r5, #0
 8008078:	4603      	mov	r3, r0
 800807a:	429d      	cmp	r5, r3
 800807c:	daed      	bge.n	800805a <LCD_InitLUT+0x32>
 800807e:	b2ef      	uxtb	r7, r5
 8008080:	4638      	mov	r0, r7
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	f7ff ff1a 	bl	8007ebc <LCD_Index2Color>
 8008088:	4639      	mov	r1, r7
 800808a:	4602      	mov	r2, r0
 800808c:	4620      	mov	r0, r4
 800808e:	f000 f92d 	bl	80082ec <LCD_SetLUTEntryEx>
 8008092:	3501      	adds	r5, #1
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	e7f0      	b.n	800807a <LCD_InitLUT+0x52>
 8008098:	3401      	adds	r4, #1
 800809a:	e7cf      	b.n	800803c <LCD_InitLUT+0x14>
 800809c:	b003      	add	sp, #12
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	bf00      	nop
 80080a4:	20000014 	.word	0x20000014
 80080a8:	08010b34 	.word	0x08010b34
 80080ac:	200083e8 	.word	0x200083e8

080080b0 <LCD_GetBkColorIndex>:
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <LCD_GetBkColorIndex+0xc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000014 	.word	0x20000014

080080c0 <LCD_GetColorIndex>:
 80080c0:	4b02      	ldr	r3, [pc, #8]	; (80080cc <LCD_GetColorIndex+0xc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000014 	.word	0x20000014

080080d0 <_GetDevProp>:
 80080d0:	2801      	cmp	r0, #1
 80080d2:	b510      	push	{r4, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	dc08      	bgt.n	80080ea <_GetDevProp+0x1a>
 80080d8:	f7fe fff0 	bl	80070bc <GUI_DEVICE__GetpDriver>
 80080dc:	b128      	cbz	r0, 80080ea <_GetDevProp+0x1a>
 80080de:	68c3      	ldr	r3, [r0, #12]
 80080e0:	4621      	mov	r1, r4
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e8:	4718      	bx	r3
 80080ea:	2000      	movs	r0, #0
 80080ec:	bd10      	pop	{r4, pc}

080080ee <_GetMaxValue>:
 80080ee:	b538      	push	{r3, r4, r5, lr}
 80080f0:	4601      	mov	r1, r0
 80080f2:	4605      	mov	r5, r0
 80080f4:	2001      	movs	r0, #1
 80080f6:	f7ff ffeb 	bl	80080d0 <_GetDevProp>
 80080fa:	4629      	mov	r1, r5
 80080fc:	4604      	mov	r4, r0
 80080fe:	2000      	movs	r0, #0
 8008100:	f7ff ffe6 	bl	80080d0 <_GetDevProp>
 8008104:	42a0      	cmp	r0, r4
 8008106:	bfb8      	it	lt
 8008108:	4620      	movlt	r0, r4
 800810a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800810e:	bd38      	pop	{r3, r4, r5, pc}

08008110 <LCD_GetXSizeEx>:
 8008110:	2101      	movs	r1, #1
 8008112:	f7ff bfdd 	b.w	80080d0 <_GetDevProp>

08008116 <LCD_GetYSizeEx>:
 8008116:	2102      	movs	r1, #2
 8008118:	f7ff bfda 	b.w	80080d0 <_GetDevProp>

0800811c <LCD_GetBitsPerPixelEx>:
 800811c:	2108      	movs	r1, #8
 800811e:	f7ff bfd7 	b.w	80080d0 <_GetDevProp>

08008122 <LCD_GetNumColorsEx>:
 8008122:	2109      	movs	r1, #9
 8008124:	f7ff bfd4 	b.w	80080d0 <_GetDevProp>

08008128 <LCD_GetXSize>:
 8008128:	4b02      	ldr	r3, [pc, #8]	; (8008134 <LCD_GetXSize+0xc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	7c58      	ldrb	r0, [r3, #17]
 800812e:	f7ff bfef 	b.w	8008110 <LCD_GetXSizeEx>
 8008132:	bf00      	nop
 8008134:	20000014 	.word	0x20000014

08008138 <LCD_GetYSize>:
 8008138:	4b02      	ldr	r3, [pc, #8]	; (8008144 <LCD_GetYSize+0xc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	7c58      	ldrb	r0, [r3, #17]
 800813e:	f7ff bfea 	b.w	8008116 <LCD_GetYSizeEx>
 8008142:	bf00      	nop
 8008144:	20000014 	.word	0x20000014

08008148 <LCD_GetNumColors>:
 8008148:	4b02      	ldr	r3, [pc, #8]	; (8008154 <LCD_GetNumColors+0xc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	7c58      	ldrb	r0, [r3, #17]
 800814e:	f7ff bfe8 	b.w	8008122 <LCD_GetNumColorsEx>
 8008152:	bf00      	nop
 8008154:	20000014 	.word	0x20000014

08008158 <GUI_GetBitsPerPixelEx>:
 8008158:	4b03      	ldr	r3, [pc, #12]	; (8008168 <GUI_GetBitsPerPixelEx+0x10>)
 800815a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800815e:	68c3      	ldr	r3, [r0, #12]
 8008160:	2108      	movs	r1, #8
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	4718      	bx	r3
 8008166:	bf00      	nop
 8008168:	200083e8 	.word	0x200083e8

0800816c <LCD_GetPaletteEx>:
 800816c:	b510      	push	{r4, lr}
 800816e:	f7fe ffa5 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8008172:	b128      	cbz	r0, 8008180 <LCD_GetPaletteEx+0x14>
 8008174:	68c3      	ldr	r3, [r0, #12]
 8008176:	2102      	movs	r1, #2
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817e:	4718      	bx	r3
 8008180:	bd10      	pop	{r4, pc}
	...

08008184 <LCD_GetPalette>:
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <LCD_GetPalette+0xc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	7c58      	ldrb	r0, [r3, #17]
 800818a:	f7ff bfef 	b.w	800816c <LCD_GetPaletteEx>
 800818e:	bf00      	nop
 8008190:	20000014 	.word	0x20000014

08008194 <GUI_GetpfIndex2ColorEx>:
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <GUI_GetpfIndex2ColorEx+0xc>)
 8008196:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	6858      	ldr	r0, [r3, #4]
 800819e:	4770      	bx	lr
 80081a0:	200083e8 	.word	0x200083e8

080081a4 <GUI_GetpfColor2IndexEx>:
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <GUI_GetpfColor2IndexEx+0xc>)
 80081a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	4770      	bx	lr
 80081b0:	200083e8 	.word	0x200083e8

080081b4 <LCD_GetXSizeMax>:
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7ff bf9a 	b.w	80080ee <_GetMaxValue>

080081ba <LCD_GetYSizeMax>:
 80081ba:	2002      	movs	r0, #2
 80081bc:	f7ff bf97 	b.w	80080ee <_GetMaxValue>

080081c0 <LCD_SetDisplaySize>:
 80081c0:	4b01      	ldr	r3, [pc, #4]	; (80081c8 <LCD_SetDisplaySize+0x8>)
 80081c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80081c6:	4770      	bx	lr
 80081c8:	20000194 	.word	0x20000194

080081cc <LCD_GetXSizeDisplay>:
 80081cc:	4b01      	ldr	r3, [pc, #4]	; (80081d4 <LCD_GetXSizeDisplay+0x8>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000194 	.word	0x20000194

080081d8 <LCD_GetYSizeDisplay>:
 80081d8:	4b01      	ldr	r3, [pc, #4]	; (80081e0 <LCD_GetYSizeDisplay+0x8>)
 80081da:	6858      	ldr	r0, [r3, #4]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000194 	.word	0x20000194

080081e4 <LCD__GetBPP>:
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d03b      	beq.n	8008260 <LCD__GetBPP+0x7c>
 80081e8:	f030 0301 	bics.w	r3, r0, #1
 80081ec:	d029      	beq.n	8008242 <LCD__GetBPP+0x5e>
 80081ee:	f030 0303 	bics.w	r3, r0, #3
 80081f2:	d028      	beq.n	8008246 <LCD__GetBPP+0x62>
 80081f4:	f030 0307 	bics.w	r3, r0, #7
 80081f8:	d027      	beq.n	800824a <LCD__GetBPP+0x66>
 80081fa:	f030 030f 	bics.w	r3, r0, #15
 80081fe:	d026      	beq.n	800824e <LCD__GetBPP+0x6a>
 8008200:	f030 031f 	bics.w	r3, r0, #31
 8008204:	d025      	beq.n	8008252 <LCD__GetBPP+0x6e>
 8008206:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800820a:	d024      	beq.n	8008256 <LCD__GetBPP+0x72>
 800820c:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	b30b      	cbz	r3, 800825a <LCD__GetBPP+0x76>
 8008216:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800821a:	f023 030f 	bic.w	r3, r3, #15
 800821e:	b1e3      	cbz	r3, 800825a <LCD__GetBPP+0x76>
 8008220:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8008224:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008228:	b1bb      	cbz	r3, 800825a <LCD__GetBPP+0x76>
 800822a:	0c03      	lsrs	r3, r0, #16
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	b1a3      	cbz	r3, 800825a <LCD__GetBPP+0x76>
 8008230:	0c83      	lsrs	r3, r0, #18
 8008232:	049b      	lsls	r3, r3, #18
 8008234:	b19b      	cbz	r3, 800825e <LCD__GetBPP+0x7a>
 8008236:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800823a:	bf0c      	ite	eq
 800823c:	2018      	moveq	r0, #24
 800823e:	2020      	movne	r0, #32
 8008240:	4770      	bx	lr
 8008242:	2001      	movs	r0, #1
 8008244:	4770      	bx	lr
 8008246:	2002      	movs	r0, #2
 8008248:	4770      	bx	lr
 800824a:	2003      	movs	r0, #3
 800824c:	4770      	bx	lr
 800824e:	2004      	movs	r0, #4
 8008250:	4770      	bx	lr
 8008252:	2005      	movs	r0, #5
 8008254:	4770      	bx	lr
 8008256:	2008      	movs	r0, #8
 8008258:	4770      	bx	lr
 800825a:	2010      	movs	r0, #16
 800825c:	4770      	bx	lr
 800825e:	2012      	movs	r0, #18
 8008260:	4770      	bx	lr

08008262 <LCD__GetBPPDevice>:
 8008262:	b508      	push	{r3, lr}
 8008264:	f7ff ffbe 	bl	80081e4 <LCD__GetBPP>
 8008268:	2801      	cmp	r0, #1
 800826a:	d00f      	beq.n	800828c <LCD__GetBPPDevice+0x2a>
 800826c:	1e83      	subs	r3, r0, #2
 800826e:	2b06      	cmp	r3, #6
 8008270:	d909      	bls.n	8008286 <LCD__GetBPPDevice+0x24>
 8008272:	f1a0 0309 	sub.w	r3, r0, #9
 8008276:	2b07      	cmp	r3, #7
 8008278:	d907      	bls.n	800828a <LCD__GetBPPDevice+0x28>
 800827a:	3811      	subs	r0, #17
 800827c:	280f      	cmp	r0, #15
 800827e:	bf8c      	ite	hi
 8008280:	2000      	movhi	r0, #0
 8008282:	2020      	movls	r0, #32
 8008284:	bd08      	pop	{r3, pc}
 8008286:	2008      	movs	r0, #8
 8008288:	bd08      	pop	{r3, pc}
 800828a:	2010      	movs	r0, #16
 800828c:	bd08      	pop	{r3, pc}

0800828e <LCD_GetNumLayers>:
 800828e:	b510      	push	{r4, lr}
 8008290:	2000      	movs	r0, #0
 8008292:	f7fe ff13 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8008296:	1c04      	adds	r4, r0, #0
 8008298:	f04f 0001 	mov.w	r0, #1
 800829c:	bf18      	it	ne
 800829e:	2401      	movne	r4, #1
 80082a0:	f7fe ff0c 	bl	80070bc <GUI_DEVICE__GetpDriver>
 80082a4:	b100      	cbz	r0, 80082a8 <LCD_GetNumLayers+0x1a>
 80082a6:	3401      	adds	r4, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	bd10      	pop	{r4, pc}

080082ac <LCD_SelectLCD>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <LCD_SelectLCD+0x38>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	7c51      	ldrb	r1, [r2, #17]
 80082b4:	4a0c      	ldr	r2, [pc, #48]	; (80082e8 <LCD_SelectLCD+0x3c>)
 80082b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80082ba:	461c      	mov	r4, r3
 80082bc:	b140      	cbz	r0, 80082d0 <LCD_SelectLCD+0x24>
 80082be:	68c3      	ldr	r3, [r0, #12]
 80082c0:	b113      	cbz	r3, 80082c8 <LCD_SelectLCD+0x1c>
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d001      	beq.n	80082cc <LCD_SelectLCD+0x20>
 80082c8:	6800      	ldr	r0, [r0, #0]
 80082ca:	e7f7      	b.n	80082bc <LCD_SelectLCD+0x10>
 80082cc:	f7fe ff2e 	bl	800712c <GUI_DEVICE_Unlink>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	661a      	str	r2, [r3, #96]	; 0x60
 80082d6:	f103 0208 	add.w	r2, r3, #8
 80082da:	615a      	str	r2, [r3, #20]
 80082dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e0:	f7ff bd7e 	b.w	8007de0 <LCD_SetClipRectMax>
 80082e4:	20000014 	.word	0x20000014
 80082e8:	200083e8 	.word	0x200083e8

080082ec <LCD_SetLUTEntryEx>:
 80082ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ee:	460c      	mov	r4, r1
 80082f0:	4615      	mov	r5, r2
 80082f2:	f7fe fee3 	bl	80070bc <GUI_DEVICE__GetpDriver>
 80082f6:	9001      	str	r0, [sp, #4]
 80082f8:	b908      	cbnz	r0, 80082fe <LCD_SetLUTEntryEx+0x12>
 80082fa:	2001      	movs	r0, #1
 80082fc:	e00c      	b.n	8008318 <LCD_SetLUTEntryEx+0x2c>
 80082fe:	68c3      	ldr	r3, [r0, #12]
 8008300:	2110      	movs	r1, #16
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	a801      	add	r0, sp, #4
 8008306:	4798      	blx	r3
 8008308:	4603      	mov	r3, r0
 800830a:	2800      	cmp	r0, #0
 800830c:	d0f5      	beq.n	80082fa <LCD_SetLUTEntryEx+0xe>
 800830e:	9801      	ldr	r0, [sp, #4]
 8008310:	462a      	mov	r2, r5
 8008312:	4621      	mov	r1, r4
 8008314:	4798      	blx	r3
 8008316:	2000      	movs	r0, #0
 8008318:	b003      	add	sp, #12
 800831a:	bd30      	pop	{r4, r5, pc}

0800831c <LCD_SetSizeEx>:
 800831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831e:	460c      	mov	r4, r1
 8008320:	4615      	mov	r5, r2
 8008322:	f7fe fecb 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8008326:	9001      	str	r0, [sp, #4]
 8008328:	b908      	cbnz	r0, 800832e <LCD_SetSizeEx+0x12>
 800832a:	2001      	movs	r0, #1
 800832c:	e00c      	b.n	8008348 <LCD_SetSizeEx+0x2c>
 800832e:	68c3      	ldr	r3, [r0, #12]
 8008330:	210b      	movs	r1, #11
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	a801      	add	r0, sp, #4
 8008336:	4798      	blx	r3
 8008338:	4603      	mov	r3, r0
 800833a:	2800      	cmp	r0, #0
 800833c:	d0f5      	beq.n	800832a <LCD_SetSizeEx+0xe>
 800833e:	9801      	ldr	r0, [sp, #4]
 8008340:	462a      	mov	r2, r5
 8008342:	4621      	mov	r1, r4
 8008344:	4798      	blx	r3
 8008346:	2000      	movs	r0, #0
 8008348:	b003      	add	sp, #12
 800834a:	bd30      	pop	{r4, r5, pc}

0800834c <LCD_SetVSizeEx>:
 800834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834e:	460c      	mov	r4, r1
 8008350:	4615      	mov	r5, r2
 8008352:	f7fe feb3 	bl	80070bc <GUI_DEVICE__GetpDriver>
 8008356:	9001      	str	r0, [sp, #4]
 8008358:	b908      	cbnz	r0, 800835e <LCD_SetVSizeEx+0x12>
 800835a:	2001      	movs	r0, #1
 800835c:	e00c      	b.n	8008378 <LCD_SetVSizeEx+0x2c>
 800835e:	68c3      	ldr	r3, [r0, #12]
 8008360:	210a      	movs	r1, #10
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	a801      	add	r0, sp, #4
 8008366:	4798      	blx	r3
 8008368:	4603      	mov	r3, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d0f5      	beq.n	800835a <LCD_SetVSizeEx+0xe>
 800836e:	9801      	ldr	r0, [sp, #4]
 8008370:	462a      	mov	r2, r5
 8008372:	4621      	mov	r1, r4
 8008374:	4798      	blx	r3
 8008376:	2000      	movs	r0, #0
 8008378:	b003      	add	sp, #12
 800837a:	bd30      	pop	{r4, r5, pc}

0800837c <LCD_UpdateColorIndices>:
 800837c:	b510      	push	{r4, lr}
 800837e:	4c07      	ldr	r4, [pc, #28]	; (800839c <LCD_UpdateColorIndices+0x20>)
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008384:	f7ff fd8c 	bl	8007ea0 <LCD_Color2Index>
 8008388:	f7ff fda6 	bl	8007ed8 <LCD_SetColorIndex>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008390:	f7ff fd86 	bl	8007ea0 <LCD_Color2Index>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bdba 	b.w	8007f10 <LCD_SetBkColorIndex>
 800839c:	20000014 	.word	0x20000014

080083a0 <_Log2PhysY_X1Y0S0>:
 80083a0:	4610      	mov	r0, r2
 80083a2:	4770      	bx	lr

080083a4 <_Log2PhysY_X1Y1S0>:
 80083a4:	6840      	ldr	r0, [r0, #4]
 80083a6:	1a80      	subs	r0, r0, r2
 80083a8:	3801      	subs	r0, #1
 80083aa:	4770      	bx	lr

080083ac <_Log2PhysY_X1Y0S1>:
 80083ac:	4608      	mov	r0, r1
 80083ae:	4770      	bx	lr

080083b0 <_Log2PhysY_X1Y1S1>:
 80083b0:	6800      	ldr	r0, [r0, #0]
 80083b2:	1a40      	subs	r0, r0, r1
 80083b4:	3801      	subs	r0, #1
 80083b6:	4770      	bx	lr

080083b8 <_SetPixelIndex>:
 80083b8:	b410      	push	{r4}
 80083ba:	6884      	ldr	r4, [r0, #8]
 80083bc:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 80083c0:	46a4      	mov	ip, r4
 80083c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c6:	4760      	bx	ip

080083c8 <_GetPixelIndex>:
 80083c8:	6883      	ldr	r3, [r0, #8]
 80083ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ce:	4718      	bx	r3

080083d0 <_XorPixel>:
 80083d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d2:	4616      	mov	r6, r2
 80083d4:	4604      	mov	r4, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	6887      	ldr	r7, [r0, #8]
 80083da:	f7ff fff5 	bl	80083c8 <_GetPixelIndex>
 80083de:	9001      	str	r0, [sp, #4]
 80083e0:	9a01      	ldr	r2, [sp, #4]
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	4629      	mov	r1, r5
 80083e6:	4053      	eors	r3, r2
 80083e8:	4620      	mov	r0, r4
 80083ea:	4632      	mov	r2, r6
 80083ec:	f7ff ffe4 	bl	80083b8 <_SetPixelIndex>
 80083f0:	b003      	add	sp, #12
 80083f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083f4 <_DrawHLine>:
 80083f4:	b513      	push	{r0, r1, r4, lr}
 80083f6:	6884      	ldr	r4, [r0, #8]
 80083f8:	9200      	str	r2, [sp, #0]
 80083fa:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80083fe:	47a0      	blx	r4
 8008400:	b002      	add	sp, #8
 8008402:	bd10      	pop	{r4, pc}

08008404 <_DrawVLine>:
 8008404:	b513      	push	{r0, r1, r4, lr}
 8008406:	6884      	ldr	r4, [r0, #8]
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800840e:	460b      	mov	r3, r1
 8008410:	47a0      	blx	r4
 8008412:	b002      	add	sp, #8
 8008414:	bd10      	pop	{r4, pc}

08008416 <_FillRect>:
 8008416:	b410      	push	{r4}
 8008418:	6884      	ldr	r4, [r0, #8]
 800841a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800841e:	46a4      	mov	ip, r4
 8008420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008424:	4760      	bx	ip

08008426 <_DrawBitmap>:
 8008426:	b430      	push	{r4, r5}
 8008428:	6884      	ldr	r4, [r0, #8]
 800842a:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
 800842e:	46a4      	mov	ip, r4
 8008430:	bc30      	pop	{r4, r5}
 8008432:	4760      	bx	ip

08008434 <_GetDevFunc_SetRect>:
 8008434:	4770      	bx	lr
	...

08008438 <_GetDevFunc_SetRectOutside>:
 8008438:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800843a:	9e07      	ldr	r6, [sp, #28]
 800843c:	6884      	ldr	r4, [r0, #8]
 800843e:	4d0c      	ldr	r5, [pc, #48]	; (8008470 <_GetDevFunc_SetRectOutside+0x38>)
 8008440:	b176      	cbz	r6, 8008460 <_GetDevFunc_SetRectOutside+0x28>
 8008442:	6828      	ldr	r0, [r5, #0]
 8008444:	b988      	cbnz	r0, 800846a <_GetDevFunc_SetRectOutside+0x32>
 8008446:	9806      	ldr	r0, [sp, #24]
 8008448:	9000      	str	r0, [sp, #0]
 800844a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800844e:	4620      	mov	r0, r4
 8008450:	47b0      	blx	r6
 8008452:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <_GetDevFunc_SetRectOutside+0x3c>)
 800845a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800845e:	e004      	b.n	800846a <_GetDevFunc_SetRectOutside+0x32>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b113      	cbz	r3, 800846a <_GetDevFunc_SetRectOutside+0x32>
 8008464:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8008468:	602e      	str	r6, [r5, #0]
 800846a:	b002      	add	sp, #8
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	bf00      	nop
 8008470:	2000019c 	.word	0x2000019c
 8008474:	08008435 	.word	0x08008435

08008478 <_ReadPixelCust_16bpp>:
 8008478:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800847a:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800847e:	6990      	ldr	r0, [r2, #24]
 8008480:	4718      	bx	r3

08008482 <_ReadPixelCust_18bpp>:
 8008482:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008484:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8008488:	6990      	ldr	r0, [r2, #24]
 800848a:	4718      	bx	r3

0800848c <_ReadRectCust_16bpp>:
 800848c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008492:	6885      	ldr	r5, [r0, #8]
 8008494:	9400      	str	r4, [sp, #0]
 8008496:	4628      	mov	r0, r5
 8008498:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800849c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800849e:	468a      	mov	sl, r1
 80084a0:	4691      	mov	r9, r2
 80084a2:	4698      	mov	r8, r3
 80084a4:	47b0      	blx	r6
 80084a6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80084a8:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 80084ac:	6980      	ldr	r0, [r0, #24]
 80084ae:	ebc9 0404 	rsb	r4, r9, r4
 80084b2:	ebca 0608 	rsb	r6, sl, r8
 80084b6:	1c62      	adds	r2, r4, #1
 80084b8:	fb06 2202 	mla	r2, r6, r2, r2
 80084bc:	4639      	mov	r1, r7
 80084be:	b002      	add	sp, #8
 80084c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	4718      	bx	r3

080084c6 <_ReadRectCust_18bpp>:
 80084c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084cc:	6885      	ldr	r5, [r0, #8]
 80084ce:	9400      	str	r4, [sp, #0]
 80084d0:	4628      	mov	r0, r5
 80084d2:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80084d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80084d8:	468a      	mov	sl, r1
 80084da:	4691      	mov	r9, r2
 80084dc:	4698      	mov	r8, r3
 80084de:	47b0      	blx	r6
 80084e0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80084e2:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 80084e6:	6980      	ldr	r0, [r0, #24]
 80084e8:	ebc9 0404 	rsb	r4, r9, r4
 80084ec:	ebca 0608 	rsb	r6, sl, r8
 80084f0:	1c62      	adds	r2, r4, #1
 80084f2:	fb06 2202 	mla	r2, r6, r2, r2
 80084f6:	4639      	mov	r1, r7
 80084f8:	b002      	add	sp, #8
 80084fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084fe:	4718      	bx	r3

08008500 <_GetDevFunc>:
 8008500:	3901      	subs	r1, #1
 8008502:	2917      	cmp	r1, #23
 8008504:	d828      	bhi.n	8008558 <_GetDevFunc+0x58>
 8008506:	e8df f001 	tbb	[pc, r1]
 800850a:	2714      	.short	0x2714
 800850c:	27272727 	.word	0x27272727
 8008510:	0e272727 	.word	0x0e272727
 8008514:	29191210 	.word	0x29191210
 8008518:	2727270c 	.word	0x2727270c
 800851c:	23272727 	.word	0x23272727
 8008520:	251e      	.short	0x251e
 8008522:	480f      	ldr	r0, [pc, #60]	; (8008560 <_GetDevFunc+0x60>)
 8008524:	4770      	bx	lr
 8008526:	480f      	ldr	r0, [pc, #60]	; (8008564 <_GetDevFunc+0x64>)
 8008528:	4770      	bx	lr
 800852a:	480f      	ldr	r0, [pc, #60]	; (8008568 <_GetDevFunc+0x68>)
 800852c:	4770      	bx	lr
 800852e:	480f      	ldr	r0, [pc, #60]	; (800856c <_GetDevFunc+0x6c>)
 8008530:	4770      	bx	lr
 8008532:	6803      	ldr	r3, [r0, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800853a:	4770      	bx	lr
 800853c:	6803      	ldr	r3, [r0, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8008544:	4770      	bx	lr
 8008546:	6803      	ldr	r3, [r0, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800854e:	4770      	bx	lr
 8008550:	4807      	ldr	r0, [pc, #28]	; (8008570 <_GetDevFunc+0x70>)
 8008552:	4770      	bx	lr
 8008554:	4807      	ldr	r0, [pc, #28]	; (8008574 <_GetDevFunc+0x74>)
 8008556:	4770      	bx	lr
 8008558:	2000      	movs	r0, #0
 800855a:	4770      	bx	lr
 800855c:	4806      	ldr	r0, [pc, #24]	; (8008578 <_GetDevFunc+0x78>)
 800855e:	4770      	bx	lr
 8008560:	08008923 	.word	0x08008923
 8008564:	0800890f 	.word	0x0800890f
 8008568:	080088fb 	.word	0x080088fb
 800856c:	080088b1 	.word	0x080088b1
 8008570:	08008815 	.word	0x08008815
 8008574:	08008439 	.word	0x08008439
 8008578:	08008939 	.word	0x08008939

0800857c <_GetDevProp>:
 800857c:	3901      	subs	r1, #1
 800857e:	6880      	ldr	r0, [r0, #8]
 8008580:	290d      	cmp	r1, #13
 8008582:	d823      	bhi.n	80085cc <_GetDevProp+0x50>
 8008584:	e8df f001 	tbb	[pc, r1]
 8008588:	0f0d0b09 	.word	0x0f0d0b09
 800858c:	11222222 	.word	0x11222222
 8008590:	13070725 	.word	0x13070725
 8008594:	1d18      	.short	0x1d18
 8008596:	2001      	movs	r0, #1
 8008598:	4770      	bx	lr
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	4770      	bx	lr
 800859e:	6840      	ldr	r0, [r0, #4]
 80085a0:	4770      	bx	lr
 80085a2:	6880      	ldr	r0, [r0, #8]
 80085a4:	4770      	bx	lr
 80085a6:	68c0      	ldr	r0, [r0, #12]
 80085a8:	4770      	bx	lr
 80085aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80085ac:	4770      	bx	lr
 80085ae:	b188      	cbz	r0, 80085d4 <_GetDevProp+0x58>
 80085b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80085b2:	f000 0001 	and.w	r0, r0, #1
 80085b6:	4770      	bx	lr
 80085b8:	b160      	cbz	r0, 80085d4 <_GetDevProp+0x58>
 80085ba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80085bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80085c0:	4770      	bx	lr
 80085c2:	b138      	cbz	r0, 80085d4 <_GetDevProp+0x58>
 80085c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80085c6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80085ca:	4770      	bx	lr
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	4770      	bx	lr
 80085d2:	2000      	movs	r0, #0
 80085d4:	4770      	bx	lr

080085d6 <_GetDevData>:
 80085d6:	6883      	ldr	r3, [r0, #8]
 80085d8:	2901      	cmp	r1, #1
 80085da:	bf0c      	ite	eq
 80085dc:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 80085de:	2000      	movne	r0, #0
 80085e0:	4770      	bx	lr

080085e2 <_GetRect>:
 80085e2:	6882      	ldr	r2, [r0, #8]
 80085e4:	2300      	movs	r3, #0
 80085e6:	800b      	strh	r3, [r1, #0]
 80085e8:	804b      	strh	r3, [r1, #2]
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	808b      	strh	r3, [r1, #4]
 80085f0:	6853      	ldr	r3, [r2, #4]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	80cb      	strh	r3, [r1, #6]
 80085f6:	4770      	bx	lr

080085f8 <GUIDRV_FlexColor__SetLog2Phys>:
 80085f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fa:	4c10      	ldr	r4, [pc, #64]	; (800863c <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 80085fc:	4626      	mov	r6, r4
 80085fe:	4607      	mov	r7, r0
 8008600:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008602:	b091      	sub	sp, #68	; 0x44
 8008604:	466d      	mov	r5, sp
 8008606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008608:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800860c:	3420      	adds	r4, #32
 800860e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008614:	ad08      	add	r5, sp, #32
 8008616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800861c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	aa10      	add	r2, sp, #64	; 0x40
 8008624:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008628:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800862c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008630:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008634:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008638:	b011      	add	sp, #68	; 0x44
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	0800c664 	.word	0x0800c664

08008640 <_SetOrg>:
 8008640:	b507      	push	{r0, r1, r2, lr}
 8008642:	6980      	ldr	r0, [r0, #24]
 8008644:	e88d 0006 	stmia.w	sp, {r1, r2}
 8008648:	466a      	mov	r2, sp
 800864a:	2103      	movs	r1, #3
 800864c:	f7fa f930 	bl	80028b0 <LCD_X_DisplayDriver>
 8008650:	b003      	add	sp, #12
 8008652:	f85d fb04 	ldr.w	pc, [sp], #4

08008656 <_Log2PhysY_X0Y0S1>:
 8008656:	4608      	mov	r0, r1
 8008658:	4770      	bx	lr

0800865a <_Log2PhysX_X0Y0S0>:
 800865a:	4608      	mov	r0, r1
 800865c:	4770      	bx	lr

0800865e <_Log2PhysX_X0Y1S0>:
 800865e:	4608      	mov	r0, r1
 8008660:	4770      	bx	lr

08008662 <_Log2PhysX_X0Y0S1>:
 8008662:	4610      	mov	r0, r2
 8008664:	4770      	bx	lr

08008666 <_Log2PhysX_X0Y1S1>:
 8008666:	4610      	mov	r0, r2
 8008668:	4770      	bx	lr

0800866a <_Log2PhysY_X0Y0S0>:
 800866a:	4610      	mov	r0, r2
 800866c:	4770      	bx	lr

0800866e <_Log2PhysY_X0Y1S0>:
 800866e:	6840      	ldr	r0, [r0, #4]
 8008670:	1a80      	subs	r0, r0, r2
 8008672:	3801      	subs	r0, #1
 8008674:	4770      	bx	lr

08008676 <_Log2PhysX_X1Y0S0>:
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	1a40      	subs	r0, r0, r1
 800867a:	3801      	subs	r0, #1
 800867c:	4770      	bx	lr

0800867e <_Log2PhysX_X1Y1S0>:
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	1a40      	subs	r0, r0, r1
 8008682:	3801      	subs	r0, #1
 8008684:	4770      	bx	lr

08008686 <_Log2PhysX_X1Y0S1>:
 8008686:	6840      	ldr	r0, [r0, #4]
 8008688:	1a80      	subs	r0, r0, r2
 800868a:	3801      	subs	r0, #1
 800868c:	4770      	bx	lr

0800868e <_Log2PhysX_X1Y1S1>:
 800868e:	6840      	ldr	r0, [r0, #4]
 8008690:	1a80      	subs	r0, r0, r2
 8008692:	3801      	subs	r0, #1
 8008694:	4770      	bx	lr

08008696 <_Log2PhysY_X0Y1S1>:
 8008696:	6800      	ldr	r0, [r0, #0]
 8008698:	1a40      	subs	r0, r0, r1
 800869a:	3801      	subs	r0, #1
 800869c:	4770      	bx	lr

0800869e <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800869e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086a2:	6884      	ldr	r4, [r0, #8]
 80086a4:	4698      	mov	r8, r3
 80086a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80086a8:	079b      	lsls	r3, r3, #30
 80086aa:	460e      	mov	r6, r1
 80086ac:	4617      	mov	r7, r2
 80086ae:	d52e      	bpl.n	800870e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 80086b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80086b4:	4620      	mov	r0, r4
 80086b6:	4798      	blx	r3
 80086b8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80086bc:	4605      	mov	r5, r0
 80086be:	463a      	mov	r2, r7
 80086c0:	4631      	mov	r1, r6
 80086c2:	4620      	mov	r0, r4
 80086c4:	4798      	blx	r3
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	429d      	cmp	r5, r3
 80086cc:	bfd4      	ite	le
 80086ce:	2300      	movle	r3, #0
 80086d0:	2301      	movgt	r3, #1
 80086d2:	4295      	cmp	r5, r2
 80086d4:	bfb8      	it	lt
 80086d6:	f043 0301 	orrlt.w	r3, r3, #1
 80086da:	6962      	ldr	r2, [r4, #20]
 80086dc:	4290      	cmp	r0, r2
 80086de:	bfb8      	it	lt
 80086e0:	f043 0301 	orrlt.w	r3, r3, #1
 80086e4:	4606      	mov	r6, r0
 80086e6:	b913      	cbnz	r3, 80086ee <GUIDRV_FlexColor__SetPixelIndexNoCache+0x50>
 80086e8:	69e3      	ldr	r3, [r4, #28]
 80086ea:	4298      	cmp	r0, r3
 80086ec:	dd0a      	ble.n	8008704 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x66>
 80086ee:	6862      	ldr	r2, [r4, #4]
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	3a01      	subs	r2, #1
 80086f4:	9200      	str	r2, [sp, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4611      	mov	r1, r2
 8008700:	4620      	mov	r0, r4
 8008702:	47b8      	blx	r7
 8008704:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8008708:	4632      	mov	r2, r6
 800870a:	4629      	mov	r1, r5
 800870c:	e001      	b.n	8008712 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x74>
 800870e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8008712:	4620      	mov	r0, r4
 8008714:	4798      	blx	r3
 8008716:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800871a:	4641      	mov	r1, r8
 800871c:	4620      	mov	r0, r4
 800871e:	b002      	add	sp, #8
 8008720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	4718      	bx	r3

08008726 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8008726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008728:	6884      	ldr	r4, [r0, #8]
 800872a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800872c:	079b      	lsls	r3, r3, #30
 800872e:	460e      	mov	r6, r1
 8008730:	4617      	mov	r7, r2
 8008732:	d543      	bpl.n	80087bc <GUIDRV_FlexColor__GetPixelIndexNoCache+0x96>
 8008734:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008738:	4620      	mov	r0, r4
 800873a:	4798      	blx	r3
 800873c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008740:	4631      	mov	r1, r6
 8008742:	4605      	mov	r5, r0
 8008744:	463a      	mov	r2, r7
 8008746:	4620      	mov	r0, r4
 8008748:	4798      	blx	r3
 800874a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800874e:	4606      	mov	r6, r0
 8008750:	b11b      	cbz	r3, 800875a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8008752:	2200      	movs	r2, #0
 8008754:	2101      	movs	r1, #1
 8008756:	4620      	mov	r0, r4
 8008758:	4798      	blx	r3
 800875a:	69a3      	ldr	r3, [r4, #24]
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	429d      	cmp	r5, r3
 8008760:	bfd4      	ite	le
 8008762:	2300      	movle	r3, #0
 8008764:	2301      	movgt	r3, #1
 8008766:	4295      	cmp	r5, r2
 8008768:	bfb8      	it	lt
 800876a:	f043 0301 	orrlt.w	r3, r3, #1
 800876e:	6962      	ldr	r2, [r4, #20]
 8008770:	4296      	cmp	r6, r2
 8008772:	bfb8      	it	lt
 8008774:	f043 0301 	orrlt.w	r3, r3, #1
 8008778:	b913      	cbnz	r3, 8008780 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5a>
 800877a:	69e3      	ldr	r3, [r4, #28]
 800877c:	429e      	cmp	r6, r3
 800877e:	dd0a      	ble.n	8008796 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x70>
 8008780:	6862      	ldr	r2, [r4, #4]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	3a01      	subs	r2, #1
 8008786:	9200      	str	r2, [sp, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800878e:	3b01      	subs	r3, #1
 8008790:	4611      	mov	r1, r2
 8008792:	4620      	mov	r0, r4
 8008794:	47b8      	blx	r7
 8008796:	4629      	mov	r1, r5
 8008798:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800879c:	4632      	mov	r2, r6
 800879e:	4620      	mov	r0, r4
 80087a0:	4798      	blx	r3
 80087a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80087a6:	4620      	mov	r0, r4
 80087a8:	4798      	blx	r3
 80087aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80087ae:	4605      	mov	r5, r0
 80087b0:	b17b      	cbz	r3, 80087d2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 80087b2:	2201      	movs	r2, #1
 80087b4:	2100      	movs	r1, #0
 80087b6:	4620      	mov	r0, r4
 80087b8:	4798      	blx	r3
 80087ba:	e00a      	b.n	80087d2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 80087bc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80087c0:	4620      	mov	r0, r4
 80087c2:	4798      	blx	r3
 80087c4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80087c8:	4620      	mov	r0, r4
 80087ca:	b003      	add	sp, #12
 80087cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80087d0:	4718      	bx	r3
 80087d2:	4628      	mov	r0, r5
 80087d4:	b003      	add	sp, #12
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087d8 <GUIDRV_FlexColor__InitOnce>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	6885      	ldr	r5, [r0, #8]
 80087dc:	4604      	mov	r4, r0
 80087de:	b99d      	cbnz	r5, 8008808 <GUIDRV_FlexColor__InitOnce+0x30>
 80087e0:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80087e4:	f7fe f882 	bl	80068ec <GUI_ALLOC_GetFixedBlock>
 80087e8:	4b08      	ldr	r3, [pc, #32]	; (800880c <GUIDRV_FlexColor__InitOnce+0x34>)
 80087ea:	60a0      	str	r0, [r4, #8]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80087f2:	4629      	mov	r1, r5
 80087f4:	4798      	blx	r3
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	2202      	movs	r2, #2
 80087fa:	84da      	strh	r2, [r3, #38]	; 0x26
 80087fc:	2201      	movs	r2, #1
 80087fe:	621a      	str	r2, [r3, #32]
 8008800:	4a03      	ldr	r2, [pc, #12]	; (8008810 <GUIDRV_FlexColor__InitOnce+0x38>)
 8008802:	641c      	str	r4, [r3, #64]	; 0x40
 8008804:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	2000001c 	.word	0x2000001c
 8008810:	080085f9 	.word	0x080085f9

08008814 <_SetDevFunc>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	4606      	mov	r6, r0
 8008818:	460d      	mov	r5, r1
 800881a:	4614      	mov	r4, r2
 800881c:	f7ff ffdc 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 8008820:	68b3      	ldr	r3, [r6, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d03b      	beq.n	800889e <_SetDevFunc+0x8a>
 8008826:	2d26      	cmp	r5, #38	; 0x26
 8008828:	d002      	beq.n	8008830 <_SetDevFunc+0x1c>
 800882a:	2d27      	cmp	r5, #39	; 0x27
 800882c:	d016      	beq.n	800885c <_SetDevFunc+0x48>
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008832:	2a10      	cmp	r2, #16
 8008834:	d002      	beq.n	800883c <_SetDevFunc+0x28>
 8008836:	2a12      	cmp	r2, #18
 8008838:	d008      	beq.n	800884c <_SetDevFunc+0x38>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <_SetDevFunc+0x8c>)
 800883e:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 8008842:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8008846:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <_SetDevFunc+0x90>)
 800884e:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8008852:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8008856:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885e:	2a10      	cmp	r2, #16
 8008860:	d002      	beq.n	8008868 <_SetDevFunc+0x54>
 8008862:	2a12      	cmp	r2, #18
 8008864:	d00e      	beq.n	8008884 <_SetDevFunc+0x70>
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	b13c      	cbz	r4, 800887a <_SetDevFunc+0x66>
 800886a:	4a0f      	ldr	r2, [pc, #60]	; (80088a8 <_SetDevFunc+0x94>)
 800886c:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8008870:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8008874:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800887e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	b13c      	cbz	r4, 8008896 <_SetDevFunc+0x82>
 8008886:	4a09      	ldr	r2, [pc, #36]	; (80088ac <_SetDevFunc+0x98>)
 8008888:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800888c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8008890:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008894:	bd70      	pop	{r4, r5, r6, pc}
 8008896:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800889a:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	08008479 	.word	0x08008479
 80088a4:	08008483 	.word	0x08008483
 80088a8:	0800848d 	.word	0x0800848d
 80088ac:	080084c7 	.word	0x080084c7

080088b0 <_GetDevFunc_Init>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4605      	mov	r5, r0
 80088b4:	f7ff ff90 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 80088b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088bc:	68ac      	ldr	r4, [r5, #8]
 80088be:	f7fe f815 	bl	80068ec <GUI_ALLOC_GetFixedBlock>
 80088c2:	66a0      	str	r0, [r4, #104]	; 0x68
 80088c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	3007      	adds	r0, #7
 80088ca:	10c0      	asrs	r0, r0, #3
 80088cc:	4358      	muls	r0, r3
 80088ce:	f7fe f80d 	bl	80068ec <GUI_ALLOC_GetFixedBlock>
 80088d2:	2200      	movs	r2, #0
 80088d4:	2101      	movs	r1, #1
 80088d6:	66e0      	str	r0, [r4, #108]	; 0x6c
 80088d8:	69a8      	ldr	r0, [r5, #24]
 80088da:	f7f9 ffe9 	bl	80028b0 <LCD_X_DisplayDriver>
 80088de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80088e2:	4605      	mov	r5, r0
 80088e4:	4620      	mov	r0, r4
 80088e6:	4798      	blx	r3
 80088e8:	4620      	mov	r0, r4
 80088ea:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80088ee:	4798      	blx	r3
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	bfd4      	ite	le
 80088f4:	2000      	movle	r0, #0
 80088f6:	2001      	movgt	r0, #1
 80088f8:	bd38      	pop	{r3, r4, r5, pc}

080088fa <_GetDevFunc_SetSize>:
 80088fa:	b570      	push	{r4, r5, r6, lr}
 80088fc:	4606      	mov	r6, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	4614      	mov	r4, r2
 8008902:	f7ff ff69 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 8008906:	68b3      	ldr	r3, [r6, #8]
 8008908:	601d      	str	r5, [r3, #0]
 800890a:	605c      	str	r4, [r3, #4]
 800890c:	bd70      	pop	{r4, r5, r6, pc}

0800890e <_GetDevFunc_SetVSize>:
 800890e:	b570      	push	{r4, r5, r6, lr}
 8008910:	4606      	mov	r6, r0
 8008912:	460d      	mov	r5, r1
 8008914:	4614      	mov	r4, r2
 8008916:	f7ff ff5f 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 800891a:	68b3      	ldr	r3, [r6, #8]
 800891c:	609d      	str	r5, [r3, #8]
 800891e:	60dc      	str	r4, [r3, #12]
 8008920:	bd70      	pop	{r4, r5, r6, pc}

08008922 <_GetDevFunc_Off>:
 8008922:	b510      	push	{r4, lr}
 8008924:	4604      	mov	r4, r0
 8008926:	f7ff ff57 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 800892a:	69a0      	ldr	r0, [r4, #24]
 800892c:	2200      	movs	r2, #0
 800892e:	2106      	movs	r1, #6
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008934:	f7f9 bfbc 	b.w	80028b0 <LCD_X_DisplayDriver>

08008938 <_GetDevFunc_On>:
 8008938:	b510      	push	{r4, lr}
 800893a:	4604      	mov	r4, r0
 800893c:	f7ff ff4c 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 8008940:	69a0      	ldr	r0, [r4, #24]
 8008942:	2200      	movs	r2, #0
 8008944:	2105      	movs	r1, #5
 8008946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894a:	f7f9 bfb1 	b.w	80028b0 <LCD_X_DisplayDriver>

0800894e <GUIDRV_FlexColor_Config>:
 800894e:	b538      	push	{r3, r4, r5, lr}
 8008950:	4605      	mov	r5, r0
 8008952:	460c      	mov	r4, r1
 8008954:	f7ff ff40 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 8008958:	68ab      	ldr	r3, [r5, #8]
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	62da      	str	r2, [r3, #44]	; 0x2c
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
 8008962:	68a2      	ldr	r2, [r4, #8]
 8008964:	635a      	str	r2, [r3, #52]	; 0x34
 8008966:	0752      	lsls	r2, r2, #29
 8008968:	d507      	bpl.n	800897a <GUIDRV_FlexColor_Config+0x2c>
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	6859      	ldr	r1, [r3, #4]
 800896e:	e883 0006 	stmia.w	r3, {r1, r2}
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	6099      	str	r1, [r3, #8]
 8008978:	60da      	str	r2, [r3, #12]
 800897a:	89a2      	ldrh	r2, [r4, #12]
 800897c:	849a      	strh	r2, [r3, #36]	; 0x24
 800897e:	6922      	ldr	r2, [r4, #16]
 8008980:	b112      	cbz	r2, 8008988 <GUIDRV_FlexColor_Config+0x3a>
 8008982:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008986:	621a      	str	r2, [r3, #32]
 8008988:	bd38      	pop	{r3, r4, r5, pc}

0800898a <GUIDRV_FlexColor_SetFunc>:
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	4604      	mov	r4, r0
 8008990:	461e      	mov	r6, r3
 8008992:	4617      	mov	r7, r2
 8008994:	4688      	mov	r8, r1
 8008996:	f7ff ff1f 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 800899a:	68a5      	ldr	r5, [r4, #8]
 800899c:	2268      	movs	r2, #104	; 0x68
 800899e:	4641      	mov	r1, r8
 80089a0:	f505 708a 	add.w	r0, r5, #276	; 0x114
 80089a4:	f003 faba 	bl	800bf1c <memcpy>
 80089a8:	4620      	mov	r0, r4
 80089aa:	47b8      	blx	r7
 80089ac:	4620      	mov	r0, r4
 80089ae:	47b0      	blx	r6
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	4798      	blx	r3
 80089b6:	62a8      	str	r0, [r5, #40]	; 0x28
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089bc <_WriteU16_A1>:
 80089bc:	0a0b      	lsrs	r3, r1, #8
 80089be:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 80089c2:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 80089c6:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80089ca:	2102      	movs	r1, #2
 80089cc:	3071      	adds	r0, #113	; 0x71
 80089ce:	4718      	bx	r3

080089d0 <_WriteDataMP>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	4604      	mov	r4, r0
 80089d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80089d8:	460e      	mov	r6, r1
 80089da:	4615      	mov	r5, r2
 80089dc:	2100      	movs	r1, #0
 80089de:	b1a5      	cbz	r5, 8008a0a <_WriteDataMP+0x3a>
 80089e0:	f836 2b02 	ldrh.w	r2, [r6], #2
 80089e4:	4603      	mov	r3, r0
 80089e6:	3101      	adds	r1, #1
 80089e8:	0a17      	lsrs	r7, r2, #8
 80089ea:	29fa      	cmp	r1, #250	; 0xfa
 80089ec:	f803 7b02 	strb.w	r7, [r3], #2
 80089f0:	7042      	strb	r2, [r0, #1]
 80089f2:	d107      	bne.n	8008a04 <_WriteDataMP+0x34>
 80089f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80089f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80089fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80089fe:	4798      	blx	r3
 8008a00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008a02:	2100      	movs	r1, #0
 8008a04:	3d01      	subs	r5, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	e7e9      	b.n	80089de <_WriteDataMP+0xe>
 8008a0a:	b131      	cbz	r1, 8008a1a <_WriteDataMP+0x4a>
 8008a0c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a10:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008a12:	0049      	lsls	r1, r1, #1
 8008a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a18:	4718      	bx	r3
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a1e <_ReadData>:
 8008a1e:	b508      	push	{r3, lr}
 8008a20:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8008a24:	4798      	blx	r3
 8008a26:	bd08      	pop	{r3, pc}

08008a28 <_WriteData>:
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	f7ff bfc7 	b.w	80089bc <_WriteU16_A1>
	...

08008a30 <_FillRect>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	4e3e      	ldr	r6, [pc, #248]	; (8008b30 <_FillRect+0x100>)
 8008a36:	6885      	ldr	r5, [r0, #8]
 8008a38:	4682      	mov	sl, r0
 8008a3a:	6830      	ldr	r0, [r6, #0]
 8008a3c:	7c00      	ldrb	r0, [r0, #16]
 8008a3e:	f010 0f01 	tst.w	r0, #1
 8008a42:	b085      	sub	sp, #20
 8008a44:	4688      	mov	r8, r1
 8008a46:	4614      	mov	r4, r2
 8008a48:	4699      	mov	r9, r3
 8008a4a:	eba3 0001 	sub.w	r0, r3, r1
 8008a4e:	d03d      	beq.n	8008acc <_FillRect+0x9c>
 8008a50:	0043      	lsls	r3, r0, #1
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	1c47      	adds	r7, r0, #1
 8008a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	dc66      	bgt.n	8008b2a <_FillRect+0xfa>
 8008a5c:	f8d5 b0cc 	ldr.w	fp, [r5, #204]	; 0xcc
 8008a60:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8008a62:	f1bb 0f00 	cmp.w	fp, #0
 8008a66:	d101      	bne.n	8008a6c <_FillRect+0x3c>
 8008a68:	46c3      	mov	fp, r8
 8008a6a:	e007      	b.n	8008a7c <_FillRect+0x4c>
 8008a6c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8008a70:	464b      	mov	r3, r9
 8008a72:	4622      	mov	r2, r4
 8008a74:	4641      	mov	r1, r8
 8008a76:	4650      	mov	r0, sl
 8008a78:	47d8      	blx	fp
 8008a7a:	e00d      	b.n	8008a98 <_FillRect+0x68>
 8008a7c:	45cb      	cmp	fp, r9
 8008a7e:	dc0a      	bgt.n	8008a96 <_FillRect+0x66>
 8008a80:	4659      	mov	r1, fp
 8008a82:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8008a86:	4622      	mov	r2, r4
 8008a88:	4650      	mov	r0, sl
 8008a8a:	4798      	blx	r3
 8008a8c:	f10b 0b01 	add.w	fp, fp, #1
 8008a90:	f826 0b02 	strh.w	r0, [r6], #2
 8008a94:	e7f2      	b.n	8008a7c <_FillRect+0x4c>
 8008a96:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8008a98:	9a03      	ldr	r2, [sp, #12]
 8008a9a:	1eb3      	subs	r3, r6, #2
 8008a9c:	4416      	add	r6, r2
 8008a9e:	42b3      	cmp	r3, r6
 8008aa0:	d005      	beq.n	8008aae <_FillRect+0x7e>
 8008aa2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008aa4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8008aa8:	404a      	eors	r2, r1
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	e7f7      	b.n	8008a9e <_FillRect+0x6e>
 8008aae:	9400      	str	r4, [sp, #0]
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8008abc:	47b0      	blx	r6
 8008abe:	463a      	mov	r2, r7
 8008ac0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7ff ff84 	bl	80089d0 <_WriteDataMP>
 8008ac8:	3401      	adds	r4, #1
 8008aca:	e7c4      	b.n	8008a56 <_FillRect+0x26>
 8008acc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008ace:	1abc      	subs	r4, r7, r2
 8008ad0:	1c67      	adds	r7, r4, #1
 8008ad2:	fb00 7707 	mla	r7, r0, r7, r7
 8008ad6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ad8:	9000      	str	r0, [sp, #0]
 8008ada:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47a0      	blx	r4
 8008ae2:	6833      	ldr	r3, [r6, #0]
 8008ae4:	6eae      	ldr	r6, [r5, #104]	; 0x68
 8008ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae8:	681c      	ldr	r4, [r3, #0]
 8008aea:	2301      	movs	r3, #1
 8008aec:	f3c4 2907 	ubfx	r9, r4, #8, #8
 8008af0:	eb06 0a03 	add.w	sl, r6, r3
 8008af4:	b2e4      	uxtb	r4, r4
 8008af6:	b1c7      	cbz	r7, 8008b2a <_FillRect+0xfa>
 8008af8:	2ff9      	cmp	r7, #249	; 0xf9
 8008afa:	46b8      	mov	r8, r7
 8008afc:	bf28      	it	cs
 8008afe:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 8008b02:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8008b06:	b93b      	cbnz	r3, 8008b18 <_FillRect+0xe8>
 8008b08:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	4798      	blx	r3
 8008b10:	ebc8 0707 	rsb	r7, r8, r7
 8008b14:	2300      	movs	r3, #0
 8008b16:	e7ee      	b.n	8008af6 <_FillRect+0xc6>
 8008b18:	4633      	mov	r3, r6
 8008b1a:	1872      	adds	r2, r6, r1
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d0f3      	beq.n	8008b08 <_FillRect+0xd8>
 8008b20:	f883 9001 	strb.w	r9, [r3, #1]
 8008b24:	f803 4f02 	strb.w	r4, [r3, #2]!
 8008b28:	e7f8      	b.n	8008b1c <_FillRect+0xec>
 8008b2a:	b005      	add	sp, #20
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b30:	20000014 	.word	0x20000014

08008b34 <_DrawBitmap>:
 8008b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b38:	b08f      	sub	sp, #60	; 0x3c
 8008b3a:	9303      	str	r3, [sp, #12]
 8008b3c:	6883      	ldr	r3, [r0, #8]
 8008b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b42:	9005      	str	r0, [sp, #20]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	9106      	str	r1, [sp, #24]
 8008b48:	9208      	str	r2, [sp, #32]
 8008b4a:	d80c      	bhi.n	8008b66 <_DrawBitmap+0x32>
 8008b4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b4e:	f44f 738b 	mov.w	r3, #278	; 0x116
 8008b52:	40d3      	lsrs	r3, r2
 8008b54:	07db      	lsls	r3, r3, #31
 8008b56:	d506      	bpl.n	8008b66 <_DrawBitmap+0x32>
 8008b58:	4b98      	ldr	r3, [pc, #608]	; (8008dbc <_DrawBitmap+0x288>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	7c1b      	ldrb	r3, [r3, #16]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d010      	beq.n	8008b88 <_DrawBitmap+0x54>
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b6a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b6c:	1899      	adds	r1, r3, r2
 8008b6e:	9a08      	ldr	r2, [sp, #32]
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	4402      	add	r2, r0
 8008b74:	3a01      	subs	r2, #1
 8008b76:	9200      	str	r2, [sp, #0]
 8008b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b7c:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8008b80:	9a08      	ldr	r2, [sp, #32]
 8008b82:	18cb      	adds	r3, r1, r3
 8008b84:	3b01      	subs	r3, #1
 8008b86:	47a0      	blx	r4
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b8c:	9f08      	ldr	r7, [sp, #32]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	930d      	str	r3, [sp, #52]	; 0x34
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	4413      	add	r3, r2
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	9a04      	ldr	r2, [sp, #16]
 8008b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b9c:	4413      	add	r3, r2
 8008b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ba4:	1afb      	subs	r3, r7, r3
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	f340 8253 	ble.w	8009052 <_DrawBitmap+0x51e>
 8008bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	2b0f      	cmp	r3, #15
 8008bb2:	f200 8248 	bhi.w	8009046 <_DrawBitmap+0x512>
 8008bb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008bba:	0010      	.short	0x0010
 8008bbc:	024600c0 	.word	0x024600c0
 8008bc0:	02460148 	.word	0x02460148
 8008bc4:	02460246 	.word	0x02460246
 8008bc8:	024601d8 	.word	0x024601d8
 8008bcc:	02460246 	.word	0x02460246
 8008bd0:	02460246 	.word	0x02460246
 8008bd4:	02460246 	.word	0x02460246
 8008bd8:	0241      	.short	0x0241
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	689c      	ldr	r4, [r3, #8]
 8008bde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be4:	4b75      	ldr	r3, [pc, #468]	; (8008dbc <_DrawBitmap+0x288>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	7c1b      	ldrb	r3, [r3, #16]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d022      	beq.n	8008c38 <_DrawBitmap+0x104>
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d075      	beq.n	8008ce2 <_DrawBitmap+0x1ae>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d073      	beq.n	8008ce2 <_DrawBitmap+0x1ae>
 8008bfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bfc:	9e03      	ldr	r6, [sp, #12]
 8008bfe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008c00:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8008c04:	f8b3 9000 	ldrh.w	r9, [r3]
 8008c08:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8008c0c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8008c10:	f89b 2000 	ldrb.w	r2, [fp]
 8008c14:	fa48 f305 	asr.w	r3, r8, r5
 8008c18:	421a      	tst	r2, r3
 8008c1a:	bf14      	ite	ne
 8008c1c:	4651      	movne	r1, sl
 8008c1e:	4649      	moveq	r1, r9
 8008c20:	3501      	adds	r5, #1
 8008c22:	4620      	mov	r0, r4
 8008c24:	f7ff feca 	bl	80089bc <_WriteU16_A1>
 8008c28:	2d08      	cmp	r5, #8
 8008c2a:	bf04      	itt	eq
 8008c2c:	f10b 0b01 	addeq.w	fp, fp, #1
 8008c30:	2500      	moveq	r5, #0
 8008c32:	3e01      	subs	r6, #1
 8008c34:	d1ec      	bne.n	8008c10 <_DrawBitmap+0xdc>
 8008c36:	e206      	b.n	8009046 <_DrawBitmap+0x512>
 8008c38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c3a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008c3e:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008c42:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c46:	930a      	str	r3, [sp, #40]	; 0x28
 8008c48:	2500      	movs	r5, #0
 8008c4a:	f8cd b01c 	str.w	fp, [sp, #28]
 8008c4e:	462b      	mov	r3, r5
 8008c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c52:	f892 9000 	ldrb.w	r9, [r2]
 8008c56:	2280      	movs	r2, #128	; 0x80
 8008c58:	fa42 f208 	asr.w	r2, r2, r8
 8008c5c:	ea19 0902 	ands.w	r9, r9, r2
 8008c60:	d00d      	beq.n	8008c7e <_DrawBitmap+0x14a>
 8008c62:	b91b      	cbnz	r3, 8008c6c <_DrawBitmap+0x138>
 8008c64:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008c68:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008c6c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008c70:	f8aa 3000 	strh.w	r3, [sl]
 8008c74:	3501      	adds	r5, #1
 8008c76:	f10a 0a02 	add.w	sl, sl, #2
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e013      	b.n	8008ca6 <_DrawBitmap+0x172>
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d110      	bne.n	8008ca4 <_DrawBitmap+0x170>
 8008c82:	9b07      	ldr	r3, [sp, #28]
 8008c84:	9700      	str	r7, [sp, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	463a      	mov	r2, r7
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8008c92:	47b0      	blx	r6
 8008c94:	462a      	mov	r2, r5
 8008c96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f7ff fe99 	bl	80089d0 <_WriteDataMP>
 8008c9e:	464d      	mov	r5, r9
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	e000      	b.n	8008ca6 <_DrawBitmap+0x172>
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	9a07      	ldr	r2, [sp, #28]
 8008ca8:	9903      	ldr	r1, [sp, #12]
 8008caa:	f108 0801 	add.w	r8, r8, #1
 8008cae:	3201      	adds	r2, #1
 8008cb0:	f1b8 0f08 	cmp.w	r8, #8
 8008cb4:	9207      	str	r2, [sp, #28]
 8008cb6:	bf02      	ittt	eq
 8008cb8:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
 8008cba:	3201      	addeq	r2, #1
 8008cbc:	920a      	streq	r2, [sp, #40]	; 0x28
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	9907      	ldr	r1, [sp, #28]
 8008cc4:	bf08      	it	eq
 8008cc6:	f04f 0800 	moveq.w	r8, #0
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	d1c0      	bne.n	8008c50 <_DrawBitmap+0x11c>
 8008cce:	2d00      	cmp	r5, #0
 8008cd0:	f000 81b9 	beq.w	8009046 <_DrawBitmap+0x512>
 8008cd4:	9700      	str	r7, [sp, #0]
 8008cd6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8008cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cdc:	463a      	mov	r2, r7
 8008cde:	4659      	mov	r1, fp
 8008ce0:	e1a6      	b.n	8009030 <_DrawBitmap+0x4fc>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008ce8:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8008cec:	9307      	str	r3, [sp, #28]
 8008cee:	eb03 0a02 	add.w	sl, r3, r2
 8008cf2:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8008cf6:	9b07      	ldr	r3, [sp, #28]
 8008cf8:	f898 2000 	ldrb.w	r2, [r8]
 8008cfc:	ebc3 090a 	rsb	r9, r3, sl
 8008d00:	fa4b f305 	asr.w	r3, fp, r5
 8008d04:	421a      	tst	r2, r3
 8008d06:	d00d      	beq.n	8008d24 <_DrawBitmap+0x1f0>
 8008d08:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8008d0c:	9805      	ldr	r0, [sp, #20]
 8008d0e:	463a      	mov	r2, r7
 8008d10:	4649      	mov	r1, r9
 8008d12:	4798      	blx	r3
 8008d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d16:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
 8008d1a:	4043      	eors	r3, r0
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4649      	mov	r1, r9
 8008d20:	9805      	ldr	r0, [sp, #20]
 8008d22:	47b0      	blx	r6
 8008d24:	3501      	adds	r5, #1
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	2d08      	cmp	r5, #8
 8008d2a:	bf04      	itt	eq
 8008d2c:	f108 0801 	addeq.w	r8, r8, #1
 8008d30:	2500      	moveq	r5, #0
 8008d32:	3b01      	subs	r3, #1
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	d1de      	bne.n	8008cf6 <_DrawBitmap+0x1c2>
 8008d38:	e185      	b.n	8009046 <_DrawBitmap+0x512>
 8008d3a:	9b05      	ldr	r3, [sp, #20]
 8008d3c:	689c      	ldr	r4, [r3, #8]
 8008d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8180 	beq.w	8009046 <_DrawBitmap+0x512>
 8008d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d48:	f893 b000 	ldrb.w	fp, [r3]
 8008d4c:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <_DrawBitmap+0x288>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	7c1b      	ldrb	r3, [r3, #16]
 8008d52:	f013 0303 	ands.w	r3, r3, #3
 8008d56:	d00f      	beq.n	8008d78 <_DrawBitmap+0x244>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f040 8174 	bne.w	8009046 <_DrawBitmap+0x512>
 8008d5e:	9b04      	ldr	r3, [sp, #16]
 8008d60:	930a      	str	r3, [sp, #40]	; 0x28
 8008d62:	2600      	movs	r6, #0
 8008d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d66:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008d6a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8008d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008d74:	4632      	mov	r2, r6
 8008d76:	e046      	b.n	8008e06 <_DrawBitmap+0x2d2>
 8008d78:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008d7a:	9e03      	ldr	r6, [sp, #12]
 8008d7c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8008d80:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 8008d84:	f1c5 0303 	rsb	r3, r5, #3
 8008d88:	005a      	lsls	r2, r3, #1
 8008d8a:	f1c2 0306 	rsb	r3, r2, #6
 8008d8e:	fa48 f303 	asr.w	r3, r8, r3
 8008d92:	ea03 030b 	and.w	r3, r3, fp
 8008d96:	40d3      	lsrs	r3, r2
 8008d98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008d9a:	3501      	adds	r5, #1
 8008d9c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7ff fe0b 	bl	80089bc <_WriteU16_A1>
 8008da6:	2d04      	cmp	r5, #4
 8008da8:	bf02      	ittt	eq
 8008daa:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 8008dae:	2500      	moveq	r5, #0
 8008db0:	f109 0901 	addeq.w	r9, r9, #1
 8008db4:	3e01      	subs	r6, #1
 8008db6:	d1e5      	bne.n	8008d84 <_DrawBitmap+0x250>
 8008db8:	e145      	b.n	8009046 <_DrawBitmap+0x512>
 8008dba:	bf00      	nop
 8008dbc:	20000014 	.word	0x20000014
 8008dc0:	b91a      	cbnz	r2, 8008dca <_DrawBitmap+0x296>
 8008dc2:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008dc6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008dca:	9a07      	ldr	r2, [sp, #28]
 8008dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	f8aa 3000 	strh.w	r3, [sl]
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	f10a 0a02 	add.w	sl, sl, #2
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f109 0901 	add.w	r9, r9, #1
 8008de2:	f1b9 0f04 	cmp.w	r9, #4
 8008de6:	f108 0801 	add.w	r8, r8, #1
 8008dea:	d106      	bne.n	8008dfa <_DrawBitmap+0x2c6>
 8008dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dee:	f893 b001 	ldrb.w	fp, [r3, #1]
 8008df2:	3301      	adds	r3, #1
 8008df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	9903      	ldr	r1, [sp, #12]
 8008dfe:	440b      	add	r3, r1
 8008e00:	4598      	cmp	r8, r3
 8008e02:	f000 80a6 	beq.w	8008f52 <_DrawBitmap+0x41e>
 8008e06:	f1c9 0503 	rsb	r5, r9, #3
 8008e0a:	006d      	lsls	r5, r5, #1
 8008e0c:	f1c5 0306 	rsb	r3, r5, #6
 8008e10:	21c0      	movs	r1, #192	; 0xc0
 8008e12:	fa41 f303 	asr.w	r3, r1, r3
 8008e16:	ea03 030b 	and.w	r3, r3, fp
 8008e1a:	40eb      	lsrs	r3, r5
 8008e1c:	9307      	str	r3, [sp, #28]
 8008e1e:	d1cf      	bne.n	8008dc0 <_DrawBitmap+0x28c>
 8008e20:	2a01      	cmp	r2, #1
 8008e22:	d110      	bne.n	8008e46 <_DrawBitmap+0x312>
 8008e24:	9700      	str	r7, [sp, #0]
 8008e26:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e2e:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8008e32:	4620      	mov	r0, r4
 8008e34:	47a8      	blx	r5
 8008e36:	4632      	mov	r2, r6
 8008e38:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f7ff fdc8 	bl	80089d0 <_WriteDataMP>
 8008e40:	9e07      	ldr	r6, [sp, #28]
 8008e42:	4632      	mov	r2, r6
 8008e44:	e7cb      	b.n	8008dde <_DrawBitmap+0x2aa>
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	e7c9      	b.n	8008dde <_DrawBitmap+0x2aa>
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	689c      	ldr	r4, [r3, #8]
 8008e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80f8 	beq.w	8009046 <_DrawBitmap+0x512>
 8008e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e58:	f893 b000 	ldrb.w	fp, [r3]
 8008e5c:	4b7e      	ldr	r3, [pc, #504]	; (8009058 <_DrawBitmap+0x524>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	7c1b      	ldrb	r3, [r3, #16]
 8008e62:	f013 0303 	ands.w	r3, r3, #3
 8008e66:	d00f      	beq.n	8008e88 <_DrawBitmap+0x354>
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	f040 80ec 	bne.w	8009046 <_DrawBitmap+0x512>
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	930a      	str	r3, [sp, #40]	; 0x28
 8008e72:	2600      	movs	r6, #0
 8008e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e76:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008e7a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8008e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e80:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e84:	4632      	mov	r2, r6
 8008e86:	e042      	b.n	8008f0e <_DrawBitmap+0x3da>
 8008e88:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008e8a:	9e03      	ldr	r6, [sp, #12]
 8008e8c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8008e90:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 8008e94:	f1c5 0301 	rsb	r3, r5, #1
 8008e98:	009a      	lsls	r2, r3, #2
 8008e9a:	f1c2 0304 	rsb	r3, r2, #4
 8008e9e:	fa48 f303 	asr.w	r3, r8, r3
 8008ea2:	ea03 030b 	and.w	r3, r3, fp
 8008ea6:	40d3      	lsrs	r3, r2
 8008ea8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008eaa:	3501      	adds	r5, #1
 8008eac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f7ff fd83 	bl	80089bc <_WriteU16_A1>
 8008eb6:	2d02      	cmp	r5, #2
 8008eb8:	bf02      	ittt	eq
 8008eba:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 8008ebe:	2500      	moveq	r5, #0
 8008ec0:	f109 0901 	addeq.w	r9, r9, #1
 8008ec4:	3e01      	subs	r6, #1
 8008ec6:	d1e5      	bne.n	8008e94 <_DrawBitmap+0x360>
 8008ec8:	e0bd      	b.n	8009046 <_DrawBitmap+0x512>
 8008eca:	b91a      	cbnz	r2, 8008ed4 <_DrawBitmap+0x3a0>
 8008ecc:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8008ed0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008ed4:	9a07      	ldr	r2, [sp, #28]
 8008ed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	f8aa 3000 	strh.w	r3, [sl]
 8008ee0:	3601      	adds	r6, #1
 8008ee2:	f10a 0a02 	add.w	sl, sl, #2
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f109 0901 	add.w	r9, r9, #1
 8008eec:	f1b9 0f02 	cmp.w	r9, #2
 8008ef0:	f108 0801 	add.w	r8, r8, #1
 8008ef4:	d106      	bne.n	8008f04 <_DrawBitmap+0x3d0>
 8008ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef8:	f893 b001 	ldrb.w	fp, [r3, #1]
 8008efc:	3301      	adds	r3, #1
 8008efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	9904      	ldr	r1, [sp, #16]
 8008f08:	440b      	add	r3, r1
 8008f0a:	4598      	cmp	r8, r3
 8008f0c:	d021      	beq.n	8008f52 <_DrawBitmap+0x41e>
 8008f0e:	f1c9 0501 	rsb	r5, r9, #1
 8008f12:	00ad      	lsls	r5, r5, #2
 8008f14:	f1c5 0304 	rsb	r3, r5, #4
 8008f18:	21f0      	movs	r1, #240	; 0xf0
 8008f1a:	fa41 f303 	asr.w	r3, r1, r3
 8008f1e:	ea03 030b 	and.w	r3, r3, fp
 8008f22:	40eb      	lsrs	r3, r5
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	d1d0      	bne.n	8008eca <_DrawBitmap+0x396>
 8008f28:	2a01      	cmp	r2, #1
 8008f2a:	d110      	bne.n	8008f4e <_DrawBitmap+0x41a>
 8008f2c:	9700      	str	r7, [sp, #0]
 8008f2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f32:	463a      	mov	r2, r7
 8008f34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f36:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	47a8      	blx	r5
 8008f3e:	4632      	mov	r2, r6
 8008f40:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7ff fd44 	bl	80089d0 <_WriteDataMP>
 8008f48:	9e07      	ldr	r6, [sp, #28]
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	e7cc      	b.n	8008ee8 <_DrawBitmap+0x3b4>
 8008f4e:	9a07      	ldr	r2, [sp, #28]
 8008f50:	e7ca      	b.n	8008ee8 <_DrawBitmap+0x3b4>
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	d077      	beq.n	8009046 <_DrawBitmap+0x512>
 8008f56:	9700      	str	r7, [sp, #0]
 8008f58:	463a      	mov	r2, r7
 8008f5a:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8008f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f62:	4620      	mov	r0, r4
 8008f64:	47a8      	blx	r5
 8008f66:	4632      	mov	r2, r6
 8008f68:	e065      	b.n	8009036 <_DrawBitmap+0x502>
 8008f6a:	9b05      	ldr	r3, [sp, #20]
 8008f6c:	689c      	ldr	r4, [r3, #8]
 8008f6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d068      	beq.n	8009046 <_DrawBitmap+0x512>
 8008f74:	4b38      	ldr	r3, [pc, #224]	; (8009058 <_DrawBitmap+0x524>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	7c1b      	ldrb	r3, [r3, #16]
 8008f7a:	f013 0303 	ands.w	r3, r3, #3
 8008f7e:	d00f      	beq.n	8008fa0 <_DrawBitmap+0x46c>
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d160      	bne.n	8009046 <_DrawBitmap+0x512>
 8008f84:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008f88:	9a03      	ldr	r2, [sp, #12]
 8008f8a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8008f8e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8008f92:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f96:	2500      	movs	r5, #0
 8008f98:	4452      	add	r2, sl
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f9e:	e024      	b.n	8008fea <_DrawBitmap+0x4b6>
 8008fa0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	4413      	add	r3, r2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd4b      	ble.n	8009046 <_DrawBitmap+0x512>
 8008fae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8008fba:	f7ff fcff 	bl	80089bc <_WriteU16_A1>
 8008fbe:	e7f0      	b.n	8008fa2 <_DrawBitmap+0x46e>
 8008fc0:	b91b      	cbnz	r3, 8008fca <_DrawBitmap+0x496>
 8008fc2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8008fc6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fcc:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8008fd0:	f8a8 3000 	strh.w	r3, [r8]
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	f108 0802 	add.w	r8, r8, #2
 8008fda:	2301      	movs	r3, #1
 8008fdc:	9a07      	ldr	r2, [sp, #28]
 8008fde:	3201      	adds	r2, #1
 8008fe0:	9207      	str	r2, [sp, #28]
 8008fe2:	9907      	ldr	r1, [sp, #28]
 8008fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe6:	4291      	cmp	r1, r2
 8008fe8:	d019      	beq.n	800901e <_DrawBitmap+0x4ea>
 8008fea:	f81b 9b01 	ldrb.w	r9, [fp], #1
 8008fee:	f1b9 0f00 	cmp.w	r9, #0
 8008ff2:	d1e5      	bne.n	8008fc0 <_DrawBitmap+0x48c>
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d110      	bne.n	800901a <_DrawBitmap+0x4e6>
 8008ff8:	9b07      	ldr	r3, [sp, #28]
 8008ffa:	9700      	str	r7, [sp, #0]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	463a      	mov	r2, r7
 8009000:	4651      	mov	r1, sl
 8009002:	4620      	mov	r0, r4
 8009004:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8009008:	47b0      	blx	r6
 800900a:	462a      	mov	r2, r5
 800900c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff fcde 	bl	80089d0 <_WriteDataMP>
 8009014:	464d      	mov	r5, r9
 8009016:	464b      	mov	r3, r9
 8009018:	e7e0      	b.n	8008fdc <_DrawBitmap+0x4a8>
 800901a:	464b      	mov	r3, r9
 800901c:	e7de      	b.n	8008fdc <_DrawBitmap+0x4a8>
 800901e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009020:	9a06      	ldr	r2, [sp, #24]
 8009022:	4413      	add	r3, r2
 8009024:	b17d      	cbz	r5, 8009046 <_DrawBitmap+0x512>
 8009026:	9700      	str	r7, [sp, #0]
 8009028:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800902c:	463a      	mov	r2, r7
 800902e:	4651      	mov	r1, sl
 8009030:	4620      	mov	r0, r4
 8009032:	47b0      	blx	r6
 8009034:	462a      	mov	r2, r5
 8009036:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009038:	4620      	mov	r0, r4
 800903a:	e002      	b.n	8009042 <_DrawBitmap+0x50e>
 800903c:	9a03      	ldr	r2, [sp, #12]
 800903e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009042:	f7ff fcc5 	bl	80089d0 <_WriteDataMP>
 8009046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009048:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800904a:	4413      	add	r3, r2
 800904c:	931b      	str	r3, [sp, #108]	; 0x6c
 800904e:	3701      	adds	r7, #1
 8009050:	e5a6      	b.n	8008ba0 <_DrawBitmap+0x6c>
 8009052:	b00f      	add	sp, #60	; 0x3c
 8009054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009058:	20000014 	.word	0x20000014

0800905c <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800905c:	b510      	push	{r4, lr}
 800905e:	4604      	mov	r4, r0
 8009060:	f7ff fbba 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 8009064:	68a4      	ldr	r4, [r4, #8]
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 8009068:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800906e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 8009074:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8009078:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800907a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800907e:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 8009080:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 8009086:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800908a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800908e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8009092:	2108      	movs	r1, #8
 8009094:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009098:	4620      	mov	r0, r4
 800909a:	4798      	blx	r3
 800909c:	2310      	movs	r3, #16
 800909e:	63a3      	str	r3, [r4, #56]	; 0x38
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 80090a2:	6463      	str	r3, [r4, #68]	; 0x44
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	bf00      	nop
 80090a8:	08008b35 	.word	0x08008b35
 80090ac:	08008a31 	.word	0x08008a31
 80090b0:	08008727 	.word	0x08008727
 80090b4:	0800869f 	.word	0x0800869f
 80090b8:	08008a1f 	.word	0x08008a1f
 80090bc:	08008a29 	.word	0x08008a29
 80090c0:	08010ac0 	.word	0x08010ac0

080090c4 <_SetPhysRAMAddr>:
 80090c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	460e      	mov	r6, r1
 80090cc:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80090d0:	212a      	movs	r1, #42	; 0x2a
 80090d2:	4615      	mov	r5, r2
 80090d4:	4798      	blx	r3
 80090d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80090dc:	4431      	add	r1, r6
 80090de:	4620      	mov	r0, r4
 80090e0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80090e4:	4798      	blx	r3
 80090e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80090ec:	b2b7      	uxth	r7, r6
 80090ee:	4439      	add	r1, r7
 80090f0:	4620      	mov	r0, r4
 80090f2:	b2c9      	uxtb	r1, r1
 80090f4:	4798      	blx	r3
 80090f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80090fc:	4431      	add	r1, r6
 80090fe:	4620      	mov	r0, r4
 8009100:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009104:	4798      	blx	r3
 8009106:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009108:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800910c:	4439      	add	r1, r7
 800910e:	4620      	mov	r0, r4
 8009110:	b2c9      	uxtb	r1, r1
 8009112:	4798      	blx	r3
 8009114:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009118:	4620      	mov	r0, r4
 800911a:	212b      	movs	r1, #43	; 0x2b
 800911c:	4798      	blx	r3
 800911e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009120:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009124:	4429      	add	r1, r5
 8009126:	4620      	mov	r0, r4
 8009128:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800912c:	4798      	blx	r3
 800912e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009130:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009134:	b2ae      	uxth	r6, r5
 8009136:	4431      	add	r1, r6
 8009138:	4620      	mov	r0, r4
 800913a:	b2c9      	uxtb	r1, r1
 800913c:	4798      	blx	r3
 800913e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009140:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009144:	4429      	add	r1, r5
 8009146:	4620      	mov	r0, r4
 8009148:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800914c:	4798      	blx	r3
 800914e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009150:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009154:	4431      	add	r1, r6
 8009156:	4620      	mov	r0, r4
 8009158:	b2c9      	uxtb	r1, r1
 800915a:	4798      	blx	r3
 800915c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009160:	4620      	mov	r0, r4
 8009162:	212c      	movs	r1, #44	; 0x2c
 8009164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	4718      	bx	r3

0800916a <_SetRect>:
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	4688      	mov	r8, r1
 8009172:	461f      	mov	r7, r3
 8009174:	212a      	movs	r1, #42	; 0x2a
 8009176:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800917a:	9d06      	ldr	r5, [sp, #24]
 800917c:	4616      	mov	r6, r2
 800917e:	4798      	blx	r3
 8009180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009182:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009186:	4441      	add	r1, r8
 8009188:	4620      	mov	r0, r4
 800918a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800918e:	4798      	blx	r3
 8009190:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009192:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009196:	4441      	add	r1, r8
 8009198:	4620      	mov	r0, r4
 800919a:	b2c9      	uxtb	r1, r1
 800919c:	4798      	blx	r3
 800919e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80091a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091a4:	4439      	add	r1, r7
 80091a6:	4620      	mov	r0, r4
 80091a8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80091ac:	4798      	blx	r3
 80091ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80091b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091b4:	4439      	add	r1, r7
 80091b6:	4620      	mov	r0, r4
 80091b8:	b2c9      	uxtb	r1, r1
 80091ba:	4798      	blx	r3
 80091bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80091c0:	4620      	mov	r0, r4
 80091c2:	212b      	movs	r1, #43	; 0x2b
 80091c4:	4798      	blx	r3
 80091c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80091c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091cc:	4431      	add	r1, r6
 80091ce:	4620      	mov	r0, r4
 80091d0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80091d4:	4798      	blx	r3
 80091d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80091d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091dc:	4431      	add	r1, r6
 80091de:	4620      	mov	r0, r4
 80091e0:	b2c9      	uxtb	r1, r1
 80091e2:	4798      	blx	r3
 80091e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80091e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091ea:	4429      	add	r1, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80091f2:	4798      	blx	r3
 80091f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80091f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80091fa:	4429      	add	r1, r5
 80091fc:	4620      	mov	r0, r4
 80091fe:	b2c9      	uxtb	r1, r1
 8009200:	4798      	blx	r3
 8009202:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009206:	4620      	mov	r0, r4
 8009208:	212c      	movs	r1, #44	; 0x2c
 800920a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	4718      	bx	r3

08009210 <_SetOrientation>:
 8009210:	b513      	push	{r0, r1, r4, lr}
 8009212:	4a0e      	ldr	r2, [pc, #56]	; (800924c <_SetOrientation+0x3c>)
 8009214:	4604      	mov	r4, r0
 8009216:	6851      	ldr	r1, [r2, #4]
 8009218:	6810      	ldr	r0, [r2, #0]
 800921a:	466b      	mov	r3, sp
 800921c:	c303      	stmia	r3!, {r0, r1}
 800921e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009222:	4620      	mov	r0, r4
 8009224:	2136      	movs	r1, #54	; 0x36
 8009226:	4798      	blx	r3
 8009228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800922a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800922c:	aa02      	add	r2, sp, #8
 800922e:	4413      	add	r3, r2
 8009230:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8009234:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009238:	4319      	orrs	r1, r3
 800923a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800923e:	b289      	uxth	r1, r1
 8009240:	4620      	mov	r0, r4
 8009242:	b002      	add	sp, #8
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	4718      	bx	r3
 800924a:	bf00      	nop
 800924c:	0800c6d8 	.word	0x0800c6d8

08009250 <_ReadPixel_16bpp_B8>:
 8009250:	b513      	push	{r0, r1, r4, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009258:	202e      	movs	r0, #46	; 0x2e
 800925a:	4798      	blx	r3
 800925c:	6a21      	ldr	r1, [r4, #32]
 800925e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8009262:	4668      	mov	r0, sp
 8009264:	3103      	adds	r1, #3
 8009266:	4798      	blx	r3
 8009268:	6a23      	ldr	r3, [r4, #32]
 800926a:	eb0d 0203 	add.w	r2, sp, r3
 800926e:	f81d 3003 	ldrb.w	r3, [sp, r3]
 8009272:	7850      	ldrb	r0, [r2, #1]
 8009274:	08db      	lsrs	r3, r3, #3
 8009276:	0880      	lsrs	r0, r0, #2
 8009278:	02db      	lsls	r3, r3, #11
 800927a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 800927e:	7890      	ldrb	r0, [r2, #2]
 8009280:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 8009284:	b002      	add	sp, #8
 8009286:	bd10      	pop	{r4, pc}

08009288 <_ReadPixel_16bpp_B16_I>:
 8009288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800928a:	4604      	mov	r4, r0
 800928c:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8009290:	202e      	movs	r0, #46	; 0x2e
 8009292:	4798      	blx	r3
 8009294:	6a21      	ldr	r1, [r4, #32]
 8009296:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800929a:	4668      	mov	r0, sp
 800929c:	3102      	adds	r1, #2
 800929e:	4798      	blx	r3
 80092a0:	6a22      	ldr	r2, [r4, #32]
 80092a2:	eb0d 0342 	add.w	r3, sp, r2, lsl #1
 80092a6:	885b      	ldrh	r3, [r3, #2]
 80092a8:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 80092ac:	115b      	asrs	r3, r3, #5
 80092ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80092b2:	4303      	orrs	r3, r0
 80092b4:	f83d 0012 	ldrh.w	r0, [sp, r2, lsl #1]
 80092b8:	0200      	lsls	r0, r0, #8
 80092ba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80092be:	4318      	orrs	r0, r3
 80092c0:	b004      	add	sp, #16
 80092c2:	bd10      	pop	{r4, pc}

080092c4 <_SetReg_B8>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4605      	mov	r5, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80092ce:	0a08      	lsrs	r0, r1, #8
 80092d0:	4798      	blx	r3
 80092d2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80092d6:	b2e0      	uxtb	r0, r4
 80092d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092dc:	4718      	bx	r3

080092de <_SetReg_B16>:
 80092de:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 80092e2:	4608      	mov	r0, r1
 80092e4:	4718      	bx	r3

080092e6 <_WritePara_B8>:
 80092e6:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80092ea:	b2c8      	uxtb	r0, r1
 80092ec:	4718      	bx	r3

080092ee <_WritePara_B16>:
 80092ee:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 80092f2:	4608      	mov	r0, r1
 80092f4:	4718      	bx	r3
	...

080092f8 <_SetInterface>:
 80092f8:	2908      	cmp	r1, #8
 80092fa:	d002      	beq.n	8009302 <_SetInterface+0xa>
 80092fc:	2910      	cmp	r1, #16
 80092fe:	d005      	beq.n	800930c <_SetInterface+0x14>
 8009300:	4770      	bx	lr
 8009302:	4b06      	ldr	r3, [pc, #24]	; (800931c <_SetInterface+0x24>)
 8009304:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <_SetInterface+0x28>)
 800930a:	e003      	b.n	8009314 <_SetInterface+0x1c>
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <_SetInterface+0x2c>)
 800930e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <_SetInterface+0x30>)
 8009314:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	080092c5 	.word	0x080092c5
 8009320:	080092e7 	.word	0x080092e7
 8009324:	080092df 	.word	0x080092df
 8009328:	080092ef 	.word	0x080092ef

0800932c <_ReadRect_16bpp_B8>:
 800932c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932e:	b085      	sub	sp, #20
 8009330:	6885      	ldr	r5, [r0, #8]
 8009332:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009334:	9700      	str	r7, [sp, #0]
 8009336:	1abc      	subs	r4, r7, r2
 8009338:	1a58      	subs	r0, r3, r1
 800933a:	3401      	adds	r4, #1
 800933c:	fb00 4404 	mla	r4, r0, r4, r4
 8009340:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 8009344:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009346:	4628      	mov	r0, r5
 8009348:	47b8      	blx	r7
 800934a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800934e:	202e      	movs	r0, #46	; 0x2e
 8009350:	4798      	blx	r3
 8009352:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 8009356:	6a29      	ldr	r1, [r5, #32]
 8009358:	a802      	add	r0, sp, #8
 800935a:	4798      	blx	r3
 800935c:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 8009360:	2103      	movs	r1, #3
 8009362:	a802      	add	r0, sp, #8
 8009364:	4798      	blx	r3
 8009366:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800936a:	089a      	lsrs	r2, r3, #2
 800936c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009370:	08db      	lsrs	r3, r3, #3
 8009372:	02db      	lsls	r3, r3, #11
 8009374:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009378:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800937c:	3c01      	subs	r4, #1
 800937e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8009382:	f826 3b02 	strh.w	r3, [r6], #2
 8009386:	d1e9      	bne.n	800935c <_ReadRect_16bpp_B8+0x30>
 8009388:	b005      	add	sp, #20
 800938a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800938c <_ReadRect_16bpp_B16_I>:
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	b087      	sub	sp, #28
 8009390:	6885      	ldr	r5, [r0, #8]
 8009392:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009394:	9700      	str	r7, [sp, #0]
 8009396:	1abc      	subs	r4, r7, r2
 8009398:	1a58      	subs	r0, r3, r1
 800939a:	3401      	adds	r4, #1
 800939c:	fb00 4404 	mla	r4, r0, r4, r4
 80093a0:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 80093a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
 80093ae:	202e      	movs	r0, #46	; 0x2e
 80093b0:	4798      	blx	r3
 80093b2:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 80093b6:	6a29      	ldr	r1, [r5, #32]
 80093b8:	a802      	add	r0, sp, #8
 80093ba:	4798      	blx	r3
 80093bc:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 80093c0:	2102      	movs	r1, #2
 80093c2:	a802      	add	r0, sp, #8
 80093c4:	4798      	blx	r3
 80093c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80093ca:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 80093ce:	115b      	asrs	r3, r3, #5
 80093d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80093da:	0212      	lsls	r2, r2, #8
 80093dc:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80093e0:	4313      	orrs	r3, r2
 80093e2:	3c01      	subs	r4, #1
 80093e4:	f826 3b02 	strh.w	r3, [r6], #2
 80093e8:	d1e8      	bne.n	80093bc <_ReadRect_16bpp_B16_I+0x30>
 80093ea:	b007      	add	sp, #28
 80093ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080093f0 <GUIDRV_FlexColor_SetFunc66709>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	f7ff f9f0 	bl	80087d8 <GUIDRV_FlexColor__InitOnce>
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	4a11      	ldr	r2, [pc, #68]	; (8009440 <GUIDRV_FlexColor_SetFunc66709+0x50>)
 80093fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009400:	4a10      	ldr	r2, [pc, #64]	; (8009444 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8009402:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009406:	4a10      	ldr	r2, [pc, #64]	; (8009448 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8009408:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800940c:	4a0f      	ldr	r2, [pc, #60]	; (800944c <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800940e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009412:	4a0f      	ldr	r2, [pc, #60]	; (8009450 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 8009414:	6810      	ldr	r0, [r2, #0]
 8009416:	6852      	ldr	r2, [r2, #4]
 8009418:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800941c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800941e:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
 8009422:	f022 0203 	bic.w	r2, r2, #3
 8009426:	2100      	movs	r1, #0
 8009428:	480a      	ldr	r0, [pc, #40]	; (8009454 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800942a:	84da      	strh	r2, [r3, #38]	; 0x26
 800942c:	4a0a      	ldr	r2, [pc, #40]	; (8009458 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800942e:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8009432:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 8009436:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 800943a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800943e:	bd10      	pop	{r4, pc}
 8009440:	080090c5 	.word	0x080090c5
 8009444:	0800916b 	.word	0x0800916b
 8009448:	08009211 	.word	0x08009211
 800944c:	08009251 	.word	0x08009251
 8009450:	20000028 	.word	0x20000028
 8009454:	0800932d 	.word	0x0800932d
 8009458:	080092f9 	.word	0x080092f9

0800945c <_GetDevData>:
 800945c:	2901      	cmp	r1, #1
 800945e:	4802      	ldr	r0, [pc, #8]	; (8009468 <_GetDevData+0xc>)
 8009460:	bf18      	it	ne
 8009462:	2000      	movne	r0, #0
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	08010ac0 	.word	0x08010ac0

0800946c <_GetDevFunc>:
 800946c:	2916      	cmp	r1, #22
 800946e:	4802      	ldr	r0, [pc, #8]	; (8009478 <_GetDevFunc+0xc>)
 8009470:	bf18      	it	ne
 8009472:	2000      	movne	r0, #0
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	08009f5d 	.word	0x08009f5d

0800947c <_SetOrg>:
 800947c:	6800      	ldr	r0, [r0, #0]
 800947e:	b110      	cbz	r0, 8009486 <_SetOrg+0xa>
 8009480:	68c3      	ldr	r3, [r0, #12]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	4718      	bx	r3
 8009486:	4770      	bx	lr

08009488 <_GetRect>:
 8009488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800948a:	6880      	ldr	r0, [r0, #8]
 800948c:	460d      	mov	r5, r1
 800948e:	f7fd f969 	bl	8006764 <GUI_ALLOC_LockH>
 8009492:	4602      	mov	r2, r0
 8009494:	a802      	add	r0, sp, #8
 8009496:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800949a:	8914      	ldrh	r4, [r2, #8]
 800949c:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80094a0:	802b      	strh	r3, [r5, #0]
 80094a2:	441c      	add	r4, r3
 80094a4:	8953      	ldrh	r3, [r2, #10]
 80094a6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80094aa:	440b      	add	r3, r1
 80094ac:	3b01      	subs	r3, #1
 80094ae:	3c01      	subs	r4, #1
 80094b0:	8069      	strh	r1, [r5, #2]
 80094b2:	80ac      	strh	r4, [r5, #4]
 80094b4:	80eb      	strh	r3, [r5, #6]
 80094b6:	f7fd f963 	bl	8006780 <GUI_ALLOC_UnlockH>
 80094ba:	b003      	add	sp, #12
 80094bc:	bd30      	pop	{r4, r5, pc}
	...

080094c0 <_XY2PTR>:
 80094c0:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <_XY2PTR+0x3c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c6:	4606      	mov	r6, r0
 80094c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80094ca:	460d      	mov	r5, r1
 80094cc:	f7fd f94a 	bl	8006764 <GUI_ALLOC_LockH>
 80094d0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80094d4:	68c4      	ldr	r4, [r0, #12]
 80094d6:	1a69      	subs	r1, r5, r1
 80094d8:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80094dc:	ab02      	add	r3, sp, #8
 80094de:	1b76      	subs	r6, r6, r5
 80094e0:	0076      	lsls	r6, r6, #1
 80094e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80094e6:	3618      	adds	r6, #24
 80094e8:	fb04 6501 	mla	r5, r4, r1, r6
 80094ec:	1944      	adds	r4, r0, r5
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fd f946 	bl	8006780 <GUI_ALLOC_UnlockH>
 80094f4:	4620      	mov	r0, r4
 80094f6:	b002      	add	sp, #8
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	bf00      	nop
 80094fc:	20000014 	.word	0x20000014

08009500 <_GetPixelIndex>:
 8009500:	b508      	push	{r3, lr}
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
 8009506:	f7ff ffdb 	bl	80094c0 <_XY2PTR>
 800950a:	8800      	ldrh	r0, [r0, #0]
 800950c:	bd08      	pop	{r3, pc}
	...

08009510 <_XorPixel>:
 8009510:	4b14      	ldr	r3, [pc, #80]	; (8009564 <_XorPixel+0x54>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009516:	4607      	mov	r7, r0
 8009518:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800951a:	4616      	mov	r6, r2
 800951c:	460d      	mov	r5, r1
 800951e:	f7fd f921 	bl	8006764 <GUI_ALLOC_LockH>
 8009522:	4631      	mov	r1, r6
 8009524:	9000      	str	r0, [sp, #0]
 8009526:	4628      	mov	r0, r5
 8009528:	f7ff ffca 	bl	80094c0 <_XY2PTR>
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	4604      	mov	r4, r0
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	4798      	blx	r3
 8009534:	8823      	ldrh	r3, [r4, #0]
 8009536:	4058      	eors	r0, r3
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	8020      	strh	r0, [r4, #0]
 800953c:	6958      	ldr	r0, [r3, #20]
 800953e:	b160      	cbz	r0, 800955a <_XorPixel+0x4a>
 8009540:	f7fd f910 	bl	8006764 <GUI_ALLOC_LockH>
 8009544:	ac02      	add	r4, sp, #8
 8009546:	6883      	ldr	r3, [r0, #8]
 8009548:	f844 0d04 	str.w	r0, [r4, #-4]!
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4632      	mov	r2, r6
 8009550:	4629      	mov	r1, r5
 8009552:	4798      	blx	r3
 8009554:	4620      	mov	r0, r4
 8009556:	f7fd f913 	bl	8006780 <GUI_ALLOC_UnlockH>
 800955a:	4668      	mov	r0, sp
 800955c:	f7fd f910 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009560:	b003      	add	sp, #12
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009564:	20000014 	.word	0x20000014

08009568 <_SetPixelIndex>:
 8009568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800956a:	461c      	mov	r4, r3
 800956c:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <_SetPixelIndex+0x48>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009572:	460d      	mov	r5, r1
 8009574:	4616      	mov	r6, r2
 8009576:	f7fd f8f5 	bl	8006764 <GUI_ALLOC_LockH>
 800957a:	4631      	mov	r1, r6
 800957c:	9000      	str	r0, [sp, #0]
 800957e:	4628      	mov	r0, r5
 8009580:	f7ff ff9e 	bl	80094c0 <_XY2PTR>
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	8004      	strh	r4, [r0, #0]
 8009588:	6958      	ldr	r0, [r3, #20]
 800958a:	b160      	cbz	r0, 80095a6 <_SetPixelIndex+0x3e>
 800958c:	f7fd f8ea 	bl	8006764 <GUI_ALLOC_LockH>
 8009590:	ac02      	add	r4, sp, #8
 8009592:	6883      	ldr	r3, [r0, #8]
 8009594:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4632      	mov	r2, r6
 800959c:	4629      	mov	r1, r5
 800959e:	4798      	blx	r3
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7fd f8ed 	bl	8006780 <GUI_ALLOC_UnlockH>
 80095a6:	4668      	mov	r0, sp
 80095a8:	f7fd f8ea 	bl	8006780 <GUI_ALLOC_UnlockH>
 80095ac:	b002      	add	sp, #8
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	20000014 	.word	0x20000014

080095b4 <_DrawVLine>:
 80095b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4c2c      	ldr	r4, [pc, #176]	; (800966c <_DrawVLine+0xb8>)
 80095ba:	461e      	mov	r6, r3
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	4680      	mov	r8, r0
 80095c0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095c2:	460f      	mov	r7, r1
 80095c4:	4615      	mov	r5, r2
 80095c6:	f7fd f8cd 	bl	8006764 <GUI_ALLOC_LockH>
 80095ca:	9000      	str	r0, [sp, #0]
 80095cc:	6940      	ldr	r0, [r0, #20]
 80095ce:	46a1      	mov	r9, r4
 80095d0:	b108      	cbz	r0, 80095d6 <_DrawVLine+0x22>
 80095d2:	f7fd f8c7 	bl	8006764 <GUI_ALLOC_LockH>
 80095d6:	9001      	str	r0, [sp, #4]
 80095d8:	4629      	mov	r1, r5
 80095da:	4638      	mov	r0, r7
 80095dc:	f7ff ff70 	bl	80094c0 <_XY2PTR>
 80095e0:	f8d9 3000 	ldr.w	r3, [r9]
 80095e4:	7c1a      	ldrb	r2, [r3, #16]
 80095e6:	07d2      	lsls	r2, r2, #31
 80095e8:	4604      	mov	r4, r0
 80095ea:	d51f      	bpl.n	800962c <_DrawVLine+0x78>
 80095ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	4798      	blx	r3
 80095f4:	fa1f f880 	uxth.w	r8, r0
 80095f8:	9801      	ldr	r0, [sp, #4]
 80095fa:	b120      	cbz	r0, 8009606 <_DrawVLine+0x52>
 80095fc:	6883      	ldr	r3, [r0, #8]
 80095fe:	462a      	mov	r2, r5
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4639      	mov	r1, r7
 8009604:	4798      	blx	r3
 8009606:	8823      	ldrh	r3, [r4, #0]
 8009608:	ea88 0303 	eor.w	r3, r8, r3
 800960c:	8023      	strh	r3, [r4, #0]
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	3501      	adds	r5, #1
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	42b5      	cmp	r5, r6
 8009616:	441c      	add	r4, r3
 8009618:	ddee      	ble.n	80095f8 <_DrawVLine+0x44>
 800961a:	4668      	mov	r0, sp
 800961c:	f7fd f8b0 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	b303      	cbz	r3, 8009666 <_DrawVLine+0xb2>
 8009624:	a801      	add	r0, sp, #4
 8009626:	f7fd f8ab 	bl	8006780 <GUI_ALLOC_UnlockH>
 800962a:	e01c      	b.n	8009666 <_DrawVLine+0xb2>
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	9a00      	ldr	r2, [sp, #0]
 8009630:	f8d3 9000 	ldr.w	r9, [r3]
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800963a:	b163      	cbz	r3, 8009656 <_DrawVLine+0xa2>
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	6883      	ldr	r3, [r0, #8]
 8009640:	462a      	mov	r2, r5
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4639      	mov	r1, r7
 8009646:	3501      	adds	r5, #1
 8009648:	4798      	blx	r3
 800964a:	42ae      	cmp	r6, r5
 800964c:	f8a4 9000 	strh.w	r9, [r4]
 8009650:	4444      	add	r4, r8
 8009652:	daf3      	bge.n	800963c <_DrawVLine+0x88>
 8009654:	e7e1      	b.n	800961a <_DrawVLine+0x66>
 8009656:	1b75      	subs	r5, r6, r5
 8009658:	3501      	adds	r5, #1
 800965a:	3d01      	subs	r5, #1
 800965c:	f8a4 9000 	strh.w	r9, [r4]
 8009660:	4444      	add	r4, r8
 8009662:	d1fa      	bne.n	800965a <_DrawVLine+0xa6>
 8009664:	e7d9      	b.n	800961a <_DrawVLine+0x66>
 8009666:	b003      	add	sp, #12
 8009668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800966c:	20000014 	.word	0x20000014

08009670 <_FillRect>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	4f2a      	ldr	r7, [pc, #168]	; (8009720 <_FillRect+0xb0>)
 8009676:	461d      	mov	r5, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	4614      	mov	r4, r2
 800967c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800967e:	b087      	sub	sp, #28
 8009680:	6812      	ldr	r2, [r2, #0]
 8009682:	9202      	str	r2, [sp, #8]
 8009684:	4683      	mov	fp, r0
 8009686:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009688:	4689      	mov	r9, r1
 800968a:	f7fd f86b 	bl	8006764 <GUI_ALLOC_LockH>
 800968e:	4621      	mov	r1, r4
 8009690:	9004      	str	r0, [sp, #16]
 8009692:	4648      	mov	r0, r9
 8009694:	f7ff ff14 	bl	80094c0 <_XY2PTR>
 8009698:	9a04      	ldr	r2, [sp, #16]
 800969a:	4606      	mov	r6, r0
 800969c:	6950      	ldr	r0, [r2, #20]
 800969e:	68d3      	ldr	r3, [r2, #12]
 80096a0:	9303      	str	r3, [sp, #12]
 80096a2:	ebc9 0505 	rsb	r5, r9, r5
 80096a6:	f105 0a01 	add.w	sl, r5, #1
 80096aa:	b188      	cbz	r0, 80096d0 <_FillRect+0x60>
 80096ac:	f7fd f85a 	bl	8006764 <GUI_ALLOC_LockH>
 80096b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096b2:	f10d 0818 	add.w	r8, sp, #24
 80096b6:	1b1b      	subs	r3, r3, r4
 80096b8:	f848 0d04 	str.w	r0, [r8, #-4]!
 80096bc:	3301      	adds	r3, #1
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	4622      	mov	r2, r4
 80096c2:	4653      	mov	r3, sl
 80096c4:	4649      	mov	r1, r9
 80096c6:	f000 fbf5 	bl	8009eb4 <GUI_USAGE_AddRect>
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7fd f858 	bl	8006780 <GUI_ALLOC_UnlockH>
 80096d0:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80096d4:	006d      	lsls	r5, r5, #1
 80096d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096d8:	429c      	cmp	r4, r3
 80096da:	dc1a      	bgt.n	8009712 <_FillRect+0xa2>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	7c1b      	ldrb	r3, [r3, #16]
 80096e0:	07db      	lsls	r3, r3, #31
 80096e2:	d50d      	bpl.n	8009700 <_FillRect+0x90>
 80096e4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	4798      	blx	r3
 80096ec:	1eb3      	subs	r3, r6, #2
 80096ee:	b280      	uxth	r0, r0
 80096f0:	1971      	adds	r1, r6, r5
 80096f2:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80096f6:	4042      	eors	r2, r0
 80096f8:	428b      	cmp	r3, r1
 80096fa:	801a      	strh	r2, [r3, #0]
 80096fc:	d1f9      	bne.n	80096f2 <_FillRect+0x82>
 80096fe:	e004      	b.n	800970a <_FillRect+0x9a>
 8009700:	4652      	mov	r2, sl
 8009702:	4641      	mov	r1, r8
 8009704:	4630      	mov	r0, r6
 8009706:	f7fe f873 	bl	80077f0 <GUI__memset16>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	3401      	adds	r4, #1
 800970e:	441e      	add	r6, r3
 8009710:	e7e1      	b.n	80096d6 <_FillRect+0x66>
 8009712:	a804      	add	r0, sp, #16
 8009714:	f7fd f834 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009718:	b007      	add	sp, #28
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	bf00      	nop
 8009720:	20000014 	.word	0x20000014

08009724 <_DrawHLine>:
 8009724:	b507      	push	{r0, r1, r2, lr}
 8009726:	9200      	str	r2, [sp, #0]
 8009728:	f7ff ffa2 	bl	8009670 <_FillRect>
 800972c:	b003      	add	sp, #12
 800972e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009734 <_DrawBitmap>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	4d99      	ldr	r5, [pc, #612]	; (80099a0 <_DrawBitmap+0x26c>)
 800973a:	b091      	sub	sp, #68	; 0x44
 800973c:	460e      	mov	r6, r1
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	900a      	str	r0, [sp, #40]	; 0x28
 8009744:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009746:	9205      	str	r2, [sp, #20]
 8009748:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800974a:	f7fd f80b 	bl	8006764 <GUI_ALLOC_LockH>
 800974e:	900e      	str	r0, [sp, #56]	; 0x38
 8009750:	6940      	ldr	r0, [r0, #20]
 8009752:	b108      	cbz	r0, 8009758 <_DrawBitmap+0x24>
 8009754:	f7fd f806 	bl	8006764 <GUI_ALLOC_LockH>
 8009758:	900f      	str	r0, [sp, #60]	; 0x3c
 800975a:	a810      	add	r0, sp, #64	; 0x40
 800975c:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	9306      	str	r3, [sp, #24]
 8009764:	f7fd f80c 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800976a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800976c:	eb06 0b03 	add.w	fp, r6, r3
 8009770:	b150      	cbz	r0, 8009788 <_DrawBitmap+0x54>
 8009772:	682b      	ldr	r3, [r5, #0]
 8009774:	7c1b      	ldrb	r3, [r3, #16]
 8009776:	0799      	lsls	r1, r3, #30
 8009778:	d106      	bne.n	8009788 <_DrawBitmap+0x54>
 800977a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	9a05      	ldr	r2, [sp, #20]
 8009780:	9b02      	ldr	r3, [sp, #8]
 8009782:	4659      	mov	r1, fp
 8009784:	f000 fb96 	bl	8009eb4 <GUI_USAGE_AddRect>
 8009788:	9905      	ldr	r1, [sp, #20]
 800978a:	4658      	mov	r0, fp
 800978c:	f7ff fe98 	bl	80094c0 <_XY2PTR>
 8009790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009792:	2b10      	cmp	r3, #16
 8009794:	4605      	mov	r5, r0
 8009796:	d134      	bne.n	8009802 <_DrawBitmap+0xce>
 8009798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979a:	b133      	cbz	r3, 80097aa <_DrawBitmap+0x76>
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80099a8 <_DrawBitmap+0x274>
 80097a2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80097a6:	2600      	movs	r6, #0
 80097a8:	e012      	b.n	80097d0 <_DrawBitmap+0x9c>
 80097aa:	4b7e      	ldr	r3, [pc, #504]	; (80099a4 <_DrawBitmap+0x270>)
 80097ac:	681e      	ldr	r6, [r3, #0]
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d0f4      	beq.n	800979c <_DrawBitmap+0x68>
 80097b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	9a02      	ldr	r2, [sp, #8]
 80097bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80097be:	4621      	mov	r1, r4
 80097c0:	47b0      	blx	r6
 80097c2:	e352      	b.n	8009e6a <_DrawBitmap+0x736>
 80097c4:	b944      	cbnz	r4, 80097d8 <_DrawBitmap+0xa4>
 80097c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80097c8:	441c      	add	r4, r3
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	3601      	adds	r6, #1
 80097ce:	441d      	add	r5, r3
 80097d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80097d2:	429e      	cmp	r6, r3
 80097d4:	dbf6      	blt.n	80097c4 <_DrawBitmap+0x90>
 80097d6:	e343      	b.n	8009e60 <_DrawBitmap+0x72c>
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d0f4      	beq.n	80097c6 <_DrawBitmap+0x92>
 80097dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80097de:	f8d9 3000 	ldr.w	r3, [r9]
 80097e2:	4642      	mov	r2, r8
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	4798      	blx	r3
 80097ea:	2f00      	cmp	r7, #0
 80097ec:	d0eb      	beq.n	80097c6 <_DrawBitmap+0x92>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	9a05      	ldr	r2, [sp, #20]
 80097f2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80097f6:	9b02      	ldr	r3, [sp, #8]
 80097f8:	4432      	add	r2, r6
 80097fa:	4659      	mov	r1, fp
 80097fc:	4638      	mov	r0, r7
 80097fe:	47d0      	blx	sl
 8009800:	e7e1      	b.n	80097c6 <_DrawBitmap+0x92>
 8009802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009804:	2b17      	cmp	r3, #23
 8009806:	dd44      	ble.n	8009892 <_DrawBitmap+0x15e>
 8009808:	f06f 0303 	mvn.w	r3, #3
 800980c:	fb03 f30b 	mul.w	r3, r3, fp
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	f06f 0301 	mvn.w	r3, #1
 8009816:	fb03 f30b 	mul.w	r3, r3, fp
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	9b02      	ldr	r3, [sp, #8]
 800981e:	445b      	add	r3, fp
 8009820:	f04f 0800 	mov.w	r8, #0
 8009824:	9308      	str	r3, [sp, #32]
 8009826:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009828:	4598      	cmp	r8, r3
 800982a:	f280 8319 	bge.w	8009e60 <_DrawBitmap+0x72c>
 800982e:	9b05      	ldr	r3, [sp, #20]
 8009830:	eb03 0908 	add.w	r9, r3, r8
 8009834:	b934      	cbnz	r4, 8009844 <_DrawBitmap+0x110>
 8009836:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009838:	441c      	add	r4, r3
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	f108 0801 	add.w	r8, r8, #1
 8009840:	441d      	add	r5, r3
 8009842:	e7f0      	b.n	8009826 <_DrawBitmap+0xf2>
 8009844:	2d00      	cmp	r5, #0
 8009846:	d0f6      	beq.n	8009836 <_DrawBitmap+0x102>
 8009848:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800984a:	b137      	cbz	r7, 800985a <_DrawBitmap+0x126>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	464a      	mov	r2, r9
 8009850:	685e      	ldr	r6, [r3, #4]
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	4659      	mov	r1, fp
 8009856:	4638      	mov	r0, r7
 8009858:	47b0      	blx	r6
 800985a:	9b07      	ldr	r3, [sp, #28]
 800985c:	eb04 0a03 	add.w	sl, r4, r3
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	18eb      	adds	r3, r5, r3
 8009864:	9303      	str	r3, [sp, #12]
 8009866:	465e      	mov	r6, fp
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4798      	blx	r3
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 800987a:	b12f      	cbz	r7, 8009888 <_DrawBitmap+0x154>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	464a      	mov	r2, r9
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4631      	mov	r1, r6
 8009884:	4638      	mov	r0, r7
 8009886:	4798      	blx	r3
 8009888:	9b08      	ldr	r3, [sp, #32]
 800988a:	3601      	adds	r6, #1
 800988c:	429e      	cmp	r6, r3
 800988e:	d1eb      	bne.n	8009868 <_DrawBitmap+0x134>
 8009890:	e7d1      	b.n	8009836 <_DrawBitmap+0x102>
 8009892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009894:	2b08      	cmp	r3, #8
 8009896:	f040 8089 	bne.w	80099ac <_DrawBitmap+0x278>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	9e05      	ldr	r6, [sp, #20]
 800989e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80099a0 <_DrawBitmap+0x26c>
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	f06f 0301 	mvn.w	r3, #1
 80098aa:	fb03 f30b 	mul.w	r3, r3, fp
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	445b      	add	r3, fp
 80098b4:	3c01      	subs	r4, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098bc:	1af3      	subs	r3, r6, r3
 80098be:	429a      	cmp	r2, r3
 80098c0:	f104 0101 	add.w	r1, r4, #1
 80098c4:	f340 82cc 	ble.w	8009e60 <_DrawBitmap+0x72c>
 80098c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d036      	beq.n	800993c <_DrawBitmap+0x208>
 80098ce:	f8d9 3000 	ldr.w	r3, [r9]
 80098d2:	7c1b      	ldrb	r3, [r3, #16]
 80098d4:	f013 0303 	ands.w	r3, r3, #3
 80098d8:	d009      	beq.n	80098ee <_DrawBitmap+0x1ba>
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d15a      	bne.n	8009994 <_DrawBitmap+0x260>
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80098e4:	18eb      	adds	r3, r5, r3
 80098e6:	9308      	str	r3, [sp, #32]
 80098e8:	46a2      	mov	sl, r4
 80098ea:	465f      	mov	r7, fp
 80098ec:	e021      	b.n	8009932 <_DrawBitmap+0x1fe>
 80098ee:	9b07      	ldr	r3, [sp, #28]
 80098f0:	4622      	mov	r2, r4
 80098f2:	18e9      	adds	r1, r5, r3
 80098f4:	462b      	mov	r3, r5
 80098f6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80098fa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80098fc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8009900:	f823 0b02 	strh.w	r0, [r3], #2
 8009904:	428b      	cmp	r3, r1
 8009906:	d1f6      	bne.n	80098f6 <_DrawBitmap+0x1c2>
 8009908:	e044      	b.n	8009994 <_DrawBitmap+0x260>
 800990a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800990c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009910:	9a08      	ldr	r2, [sp, #32]
 8009912:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8009916:	f1b8 0f00 	cmp.w	r8, #0
 800991a:	d006      	beq.n	800992a <_DrawBitmap+0x1f6>
 800991c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009920:	4632      	mov	r2, r6
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4639      	mov	r1, r7
 8009926:	4640      	mov	r0, r8
 8009928:	4798      	blx	r3
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	3701      	adds	r7, #1
 800992e:	42bb      	cmp	r3, r7
 8009930:	d030      	beq.n	8009994 <_DrawBitmap+0x260>
 8009932:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f7      	beq.n	800992a <_DrawBitmap+0x1f6>
 800993a:	e7e6      	b.n	800990a <_DrawBitmap+0x1d6>
 800993c:	f8d9 3000 	ldr.w	r3, [r9]
 8009940:	7c1b      	ldrb	r3, [r3, #16]
 8009942:	f013 0303 	ands.w	r3, r3, #3
 8009946:	d009      	beq.n	800995c <_DrawBitmap+0x228>
 8009948:	2b02      	cmp	r3, #2
 800994a:	d123      	bne.n	8009994 <_DrawBitmap+0x260>
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8009952:	18eb      	adds	r3, r5, r3
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	46a2      	mov	sl, r4
 8009958:	465f      	mov	r7, fp
 800995a:	e016      	b.n	800998a <_DrawBitmap+0x256>
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <_DrawBitmap+0x274>)
 800995e:	9a02      	ldr	r2, [sp, #8]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4628      	mov	r0, r5
 8009964:	4798      	blx	r3
 8009966:	e015      	b.n	8009994 <_DrawBitmap+0x260>
 8009968:	9a08      	ldr	r2, [sp, #32]
 800996a:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 800996e:	f1b8 0f00 	cmp.w	r8, #0
 8009972:	d006      	beq.n	8009982 <_DrawBitmap+0x24e>
 8009974:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009978:	4632      	mov	r2, r6
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4639      	mov	r1, r7
 800997e:	4640      	mov	r0, r8
 8009980:	4798      	blx	r3
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	3701      	adds	r7, #1
 8009986:	429f      	cmp	r7, r3
 8009988:	d004      	beq.n	8009994 <_DrawBitmap+0x260>
 800998a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0f7      	beq.n	8009982 <_DrawBitmap+0x24e>
 8009992:	e7e9      	b.n	8009968 <_DrawBitmap+0x234>
 8009994:	9b06      	ldr	r3, [sp, #24]
 8009996:	441d      	add	r5, r3
 8009998:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800999a:	3601      	adds	r6, #1
 800999c:	441c      	add	r4, r3
 800999e:	e78b      	b.n	80098b8 <_DrawBitmap+0x184>
 80099a0:	20000014 	.word	0x20000014
 80099a4:	200001b8 	.word	0x200001b8
 80099a8:	20000018 	.word	0x20000018
 80099ac:	4bad      	ldr	r3, [pc, #692]	; (8009c64 <_DrawBitmap+0x530>)
 80099ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	bf08      	it	eq
 80099b4:	461a      	moveq	r2, r3
 80099b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80099b8:	921f      	str	r2, [sp, #124]	; 0x7c
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80099be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	930c      	str	r3, [sp, #48]	; 0x30
 80099c4:	1c63      	adds	r3, r4, #1
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	1c83      	adds	r3, r0, #2
 80099ca:	9307      	str	r3, [sp, #28]
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	9b07      	ldr	r3, [sp, #28]
 80099d2:	9a05      	ldr	r2, [sp, #20]
 80099d4:	1e9c      	subs	r4, r3, #2
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099e2:	429a      	cmp	r2, r3
 80099e4:	f340 823c 	ble.w	8009e60 <_DrawBitmap+0x72c>
 80099e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	f000 80c5 	beq.w	8009b7a <_DrawBitmap+0x446>
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	f000 8160 	beq.w	8009cb6 <_DrawBitmap+0x582>
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	f040 8226 	bne.w	8009e48 <_DrawBitmap+0x714>
 80099fc:	4b9a      	ldr	r3, [pc, #616]	; (8009c68 <_DrawBitmap+0x534>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009a02:	f7fc feaf 	bl	8006764 <GUI_ALLOC_LockH>
 8009a06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a08:	4a98      	ldr	r2, [pc, #608]	; (8009c6c <_DrawBitmap+0x538>)
 8009a0a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a0c:	f1c3 0508 	rsb	r5, r3, #8
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8009a16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a1a:	9f02      	ldr	r7, [sp, #8]
 8009a1c:	5cd6      	ldrb	r6, [r2, r3]
 8009a1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a20:	411e      	asrs	r6, r3
 8009a22:	4b91      	ldr	r3, [pc, #580]	; (8009c68 <_DrawBitmap+0x534>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	7c1b      	ldrb	r3, [r3, #16]
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d01f      	beq.n	8009a70 <_DrawBitmap+0x33c>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d057      	beq.n	8009ae4 <_DrawBitmap+0x3b0>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d055      	beq.n	8009ae4 <_DrawBitmap+0x3b0>
 8009a38:	42bd      	cmp	r5, r7
 8009a3a:	bf28      	it	cs
 8009a3c:	463d      	movcs	r5, r7
 8009a3e:	1b7f      	subs	r7, r7, r5
 8009a40:	462b      	mov	r3, r5
 8009a42:	4622      	mov	r2, r4
 8009a44:	f006 0101 	and.w	r1, r6, #1
 8009a48:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8009a50:	f822 1b02 	strh.w	r1, [r2], #2
 8009a54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a58:	d1f4      	bne.n	8009a44 <_DrawBitmap+0x310>
 8009a5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	f000 8087 	beq.w	8009b72 <_DrawBitmap+0x43e>
 8009a64:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8009a68:	4a80      	ldr	r2, [pc, #512]	; (8009c6c <_DrawBitmap+0x538>)
 8009a6a:	2508      	movs	r5, #8
 8009a6c:	5cd6      	ldrb	r6, [r2, r3]
 8009a6e:	e7e3      	b.n	8009a38 <_DrawBitmap+0x304>
 8009a70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a72:	889b      	ldrh	r3, [r3, #4]
 8009a74:	9308      	str	r3, [sp, #32]
 8009a76:	46d8      	mov	r8, fp
 8009a78:	42bd      	cmp	r5, r7
 8009a7a:	bf28      	it	cs
 8009a7c:	463d      	movcs	r5, r7
 8009a7e:	1b7f      	subs	r7, r7, r5
 8009a80:	f1b9 0f00 	cmp.w	r9, #0
 8009a84:	d022      	beq.n	8009acc <_DrawBitmap+0x398>
 8009a86:	b91e      	cbnz	r6, 8009a90 <_DrawBitmap+0x35c>
 8009a88:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009a8c:	44a8      	add	r8, r5
 8009a8e:	e021      	b.n	8009ad4 <_DrawBitmap+0x3a0>
 8009a90:	07f2      	lsls	r2, r6, #31
 8009a92:	d509      	bpl.n	8009aa8 <_DrawBitmap+0x374>
 8009a94:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009a98:	9a04      	ldr	r2, [sp, #16]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	4648      	mov	r0, r9
 8009aa0:	4798      	blx	r3
 8009aa2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009aa6:	8023      	strh	r3, [r4, #0]
 8009aa8:	3d01      	subs	r5, #1
 8009aaa:	f108 0801 	add.w	r8, r8, #1
 8009aae:	f104 0402 	add.w	r4, r4, #2
 8009ab2:	d00f      	beq.n	8009ad4 <_DrawBitmap+0x3a0>
 8009ab4:	0876      	lsrs	r6, r6, #1
 8009ab6:	e7e6      	b.n	8009a86 <_DrawBitmap+0x352>
 8009ab8:	07f3      	lsls	r3, r6, #31
 8009aba:	bf44      	itt	mi
 8009abc:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 8009ac0:	8023      	strhmi	r3, [r4, #0]
 8009ac2:	3d01      	subs	r5, #1
 8009ac4:	f104 0402 	add.w	r4, r4, #2
 8009ac8:	d004      	beq.n	8009ad4 <_DrawBitmap+0x3a0>
 8009aca:	0876      	lsrs	r6, r6, #1
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	d1f3      	bne.n	8009ab8 <_DrawBitmap+0x384>
 8009ad0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009ad4:	2f00      	cmp	r7, #0
 8009ad6:	d04c      	beq.n	8009b72 <_DrawBitmap+0x43e>
 8009ad8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8009adc:	4a63      	ldr	r2, [pc, #396]	; (8009c6c <_DrawBitmap+0x538>)
 8009ade:	2508      	movs	r5, #8
 8009ae0:	5cd6      	ldrb	r6, [r2, r3]
 8009ae2:	e7c9      	b.n	8009a78 <_DrawBitmap+0x344>
 8009ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	4798      	blx	r3
 8009aec:	b283      	uxth	r3, r0
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	9b03      	ldr	r3, [sp, #12]
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	46d8      	mov	r8, fp
 8009af6:	42bd      	cmp	r5, r7
 8009af8:	bf28      	it	cs
 8009afa:	463d      	movcs	r5, r7
 8009afc:	1b7f      	subs	r7, r7, r5
 8009afe:	f1b9 0f00 	cmp.w	r9, #0
 8009b02:	d01c      	beq.n	8009b3e <_DrawBitmap+0x40a>
 8009b04:	eb08 0305 	add.w	r3, r8, r5
 8009b08:	46a2      	mov	sl, r4
 8009b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b0c:	07f0      	lsls	r0, r6, #31
 8009b0e:	d50c      	bpl.n	8009b2a <_DrawBitmap+0x3f6>
 8009b10:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009b14:	9a04      	ldr	r2, [sp, #16]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4641      	mov	r1, r8
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	4798      	blx	r3
 8009b1e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b24:	4053      	eors	r3, r2
 8009b26:	f8aa 3000 	strh.w	r3, [sl]
 8009b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b2c:	f108 0801 	add.w	r8, r8, #1
 8009b30:	4598      	cmp	r8, r3
 8009b32:	f10a 0a02 	add.w	sl, sl, #2
 8009b36:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b3a:	d1e7      	bne.n	8009b0c <_DrawBitmap+0x3d8>
 8009b3c:	e00d      	b.n	8009b5a <_DrawBitmap+0x426>
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4623      	mov	r3, r4
 8009b42:	07f1      	lsls	r1, r6, #31
 8009b44:	bf41      	itttt	mi
 8009b46:	8819      	ldrhmi	r1, [r3, #0]
 8009b48:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8009b4a:	4041      	eormi	r1, r0
 8009b4c:	8019      	strhmi	r1, [r3, #0]
 8009b4e:	3a01      	subs	r2, #1
 8009b50:	f103 0302 	add.w	r3, r3, #2
 8009b54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b58:	d1f3      	bne.n	8009b42 <_DrawBitmap+0x40e>
 8009b5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009b5e:	b147      	cbz	r7, 8009b72 <_DrawBitmap+0x43e>
 8009b60:	9b08      	ldr	r3, [sp, #32]
 8009b62:	4a42      	ldr	r2, [pc, #264]	; (8009c6c <_DrawBitmap+0x538>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	5cd6      	ldrb	r6, [r2, r3]
 8009b68:	9b08      	ldr	r3, [sp, #32]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	9308      	str	r3, [sp, #32]
 8009b6e:	2508      	movs	r5, #8
 8009b70:	e7c1      	b.n	8009af6 <_DrawBitmap+0x3c2>
 8009b72:	a80e      	add	r0, sp, #56	; 0x38
 8009b74:	f7fc fe04 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009b78:	e166      	b.n	8009e48 <_DrawBitmap+0x714>
 8009b7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b7c:	f1c3 0504 	rsb	r5, r3, #4
 8009b80:	9b03      	ldr	r3, [sp, #12]
 8009b82:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8009b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b88:	409e      	lsls	r6, r3
 8009b8a:	4b37      	ldr	r3, [pc, #220]	; (8009c68 <_DrawBitmap+0x534>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	7c1b      	ldrb	r3, [r3, #16]
 8009b90:	f003 0303 	and.w	r3, r3, #3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	b2ed      	uxtb	r5, r5
 8009b98:	b2f6      	uxtb	r6, r6
 8009b9a:	d009      	beq.n	8009bb0 <_DrawBitmap+0x47c>
 8009b9c:	d30a      	bcc.n	8009bb4 <_DrawBitmap+0x480>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	f040 8152 	bne.w	8009e48 <_DrawBitmap+0x714>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba6:	9308      	str	r3, [sp, #32]
 8009ba8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009bac:	465f      	mov	r7, fp
 8009bae:	e036      	b.n	8009c1e <_DrawBitmap+0x4ea>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	e079      	b.n	8009ca8 <_DrawBitmap+0x574>
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	429d      	cmp	r5, r3
 8009bb8:	bfc8      	it	gt
 8009bba:	b2dd      	uxtbgt	r5, r3
 8009bbc:	1b5b      	subs	r3, r3, r5
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	09b0      	lsrs	r0, r6, #6
 8009bc4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009bc6:	3a01      	subs	r2, #1
 8009bc8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8009bcc:	f821 0b02 	strh.w	r0, [r1], #2
 8009bd0:	00b6      	lsls	r6, r6, #2
 8009bd2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009bd6:	b2f6      	uxtb	r6, r6
 8009bd8:	d1f3      	bne.n	8009bc2 <_DrawBitmap+0x48e>
 8009bda:	3d01      	subs	r5, #1
 8009bdc:	b2ed      	uxtb	r5, r5
 8009bde:	3501      	adds	r5, #1
 8009be0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 812f 	beq.w	8009e48 <_DrawBitmap+0x714>
 8009bea:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8009bee:	2504      	movs	r5, #4
 8009bf0:	e7e1      	b.n	8009bb6 <_DrawBitmap+0x482>
 8009bf2:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8009bf6:	d124      	bne.n	8009c42 <_DrawBitmap+0x50e>
 8009bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bfa:	f109 0901 	add.w	r9, r9, #1
 8009bfe:	00b6      	lsls	r6, r6, #2
 8009c00:	4599      	cmp	r9, r3
 8009c02:	b2f6      	uxtb	r6, r6
 8009c04:	d1f5      	bne.n	8009bf2 <_DrawBitmap+0x4be>
 8009c06:	1c6b      	adds	r3, r5, #1
 8009c08:	3701      	adds	r7, #1
 8009c0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009c0e:	442f      	add	r7, r5
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	f000 8118 	beq.w	8009e48 <_DrawBitmap+0x714>
 8009c18:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8009c1c:	2504      	movs	r5, #4
 8009c1e:	4545      	cmp	r5, r8
 8009c20:	bfc8      	it	gt
 8009c22:	fa5f f588 	uxtbgt.w	r5, r8
 8009c26:	ebc5 0808 	rsb	r8, r5, r8
 8009c2a:	3d01      	subs	r5, #1
 8009c2c:	b2ed      	uxtb	r5, r5
 8009c2e:	1c7b      	adds	r3, r7, #1
 8009c30:	442b      	add	r3, r5
 8009c32:	930d      	str	r3, [sp, #52]	; 0x34
 8009c34:	f06f 0301 	mvn.w	r3, #1
 8009c38:	fb03 4307 	mla	r3, r3, r7, r4
 8009c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3e:	46b9      	mov	r9, r7
 8009c40:	e7d7      	b.n	8009bf2 <_DrawBitmap+0x4be>
 8009c42:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c44:	09b3      	lsrs	r3, r6, #6
 8009c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c4c:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0d0      	beq.n	8009bf8 <_DrawBitmap+0x4c4>
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	9a04      	ldr	r2, [sp, #16]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	9808      	ldr	r0, [sp, #32]
 8009c5e:	4649      	mov	r1, r9
 8009c60:	4798      	blx	r3
 8009c62:	e7c9      	b.n	8009bf8 <_DrawBitmap+0x4c4>
 8009c64:	08010af4 	.word	0x08010af4
 8009c68:	20000014 	.word	0x20000014
 8009c6c:	08010b4c 	.word	0x08010b4c
 8009c70:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8009c74:	bf18      	it	ne
 8009c76:	8808      	ldrhne	r0, [r1, #0]
 8009c78:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c7c:	bf1c      	itt	ne
 8009c7e:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8009c82:	8008      	strhne	r0, [r1, #0]
 8009c84:	00b6      	lsls	r6, r6, #2
 8009c86:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009c8a:	f101 0102 	add.w	r1, r1, #2
 8009c8e:	b2f6      	uxtb	r6, r6
 8009c90:	d1ee      	bne.n	8009c70 <_DrawBitmap+0x53c>
 8009c92:	3d01      	subs	r5, #1
 8009c94:	b2ed      	uxtb	r5, r5
 8009c96:	3501      	adds	r5, #1
 8009c98:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80d3 	beq.w	8009e48 <_DrawBitmap+0x714>
 8009ca2:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8009ca6:	2504      	movs	r5, #4
 8009ca8:	429d      	cmp	r5, r3
 8009caa:	bfc8      	it	gt
 8009cac:	b2dd      	uxtbgt	r5, r3
 8009cae:	1b5b      	subs	r3, r3, r5
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	e7dc      	b.n	8009c70 <_DrawBitmap+0x53c>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cbe:	4093      	lsls	r3, r2
 8009cc0:	4a6b      	ldr	r2, [pc, #428]	; (8009e70 <_DrawBitmap+0x73c>)
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	7c12      	ldrb	r2, [r2, #16]
 8009cc6:	f002 0203 	and.w	r2, r2, #3
 8009cca:	2a01      	cmp	r2, #1
 8009ccc:	b2dd      	uxtb	r5, r3
 8009cce:	d003      	beq.n	8009cd8 <_DrawBitmap+0x5a4>
 8009cd0:	d308      	bcc.n	8009ce4 <_DrawBitmap+0x5b0>
 8009cd2:	2a02      	cmp	r2, #2
 8009cd4:	d03b      	beq.n	8009d4e <_DrawBitmap+0x61a>
 8009cd6:	e0b7      	b.n	8009e48 <_DrawBitmap+0x714>
 8009cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cda:	9a02      	ldr	r2, [sp, #8]
 8009cdc:	f1c3 0302 	rsb	r3, r3, #2
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	e0aa      	b.n	8009e3a <_DrawBitmap+0x706>
 8009ce4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ce6:	b15b      	cbz	r3, 8009d00 <_DrawBitmap+0x5cc>
 8009ce8:	092d      	lsrs	r5, r5, #4
 8009cea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cec:	9a03      	ldr	r2, [sp, #12]
 8009cee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009cf2:	8023      	strh	r3, [r4, #0]
 8009cf4:	9b02      	ldr	r3, [sp, #8]
 8009cf6:	9c07      	ldr	r4, [sp, #28]
 8009cf8:	7815      	ldrb	r5, [r2, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4692      	mov	sl, r2
 8009cfe:	e000      	b.n	8009d02 <_DrawBitmap+0x5ce>
 8009d00:	9b02      	ldr	r3, [sp, #8]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	dd1a      	ble.n	8009d3c <_DrawBitmap+0x608>
 8009d06:	1059      	asrs	r1, r3, #1
 8009d08:	1d22      	adds	r2, r4, #4
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	eb0a 0001 	add.w	r0, sl, r1
 8009d12:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009d14:	092e      	lsrs	r6, r5, #4
 8009d16:	f005 050f 	and.w	r5, r5, #15
 8009d1a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8009d1e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8009d22:	f822 6c04 	strh.w	r6, [r2, #-4]
 8009d26:	f822 5c02 	strh.w	r5, [r2, #-2]
 8009d2a:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8009d2e:	4582      	cmp	sl, r0
 8009d30:	463e      	mov	r6, r7
 8009d32:	f102 0204 	add.w	r2, r2, #4
 8009d36:	d1ec      	bne.n	8009d12 <_DrawBitmap+0x5de>
 8009d38:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 8083 	beq.w	8009e48 <_DrawBitmap+0x714>
 8009d42:	092d      	lsrs	r5, r5, #4
 8009d44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d46:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009d4a:	8023      	strh	r3, [r4, #0]
 8009d4c:	e07c      	b.n	8009e48 <_DrawBitmap+0x714>
 8009d4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d50:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8009d52:	b1c2      	cbz	r2, 8009d86 <_DrawBitmap+0x652>
 8009d54:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8009d58:	d00b      	beq.n	8009d72 <_DrawBitmap+0x63e>
 8009d5a:	092d      	lsrs	r5, r5, #4
 8009d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009d62:	8023      	strh	r3, [r4, #0]
 8009d64:	b12e      	cbz	r6, 8009d72 <_DrawBitmap+0x63e>
 8009d66:	68b3      	ldr	r3, [r6, #8]
 8009d68:	9a04      	ldr	r2, [sp, #16]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	4630      	mov	r0, r6
 8009d70:	4798      	blx	r3
 8009d72:	9b02      	ldr	r3, [sp, #8]
 8009d74:	9c07      	ldr	r4, [sp, #28]
 8009d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	f10b 0701 	add.w	r7, fp, #1
 8009d80:	781d      	ldrb	r5, [r3, #0]
 8009d82:	469a      	mov	sl, r3
 8009d84:	e00f      	b.n	8009da6 <_DrawBitmap+0x672>
 8009d86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d8a:	465f      	mov	r7, fp
 8009d8c:	e00b      	b.n	8009da6 <_DrawBitmap+0x672>
 8009d8e:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8009d92:	d10c      	bne.n	8009dae <_DrawBitmap+0x67a>
 8009d94:	f015 050f 	ands.w	r5, r5, #15
 8009d98:	d117      	bne.n	8009dca <_DrawBitmap+0x696>
 8009d9a:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8009d9e:	3404      	adds	r4, #4
 8009da0:	3702      	adds	r7, #2
 8009da2:	f1a8 0802 	sub.w	r8, r8, #2
 8009da6:	f1b8 0f01 	cmp.w	r8, #1
 8009daa:	dcf0      	bgt.n	8009d8e <_DrawBitmap+0x65a>
 8009dac:	e01a      	b.n	8009de4 <_DrawBitmap+0x6b0>
 8009dae:	092b      	lsrs	r3, r5, #4
 8009db0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db6:	8023      	strh	r3, [r4, #0]
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	d0eb      	beq.n	8009d94 <_DrawBitmap+0x660>
 8009dbc:	68b3      	ldr	r3, [r6, #8]
 8009dbe:	9a04      	ldr	r2, [sp, #16]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	4798      	blx	r3
 8009dc8:	e7e4      	b.n	8009d94 <_DrawBitmap+0x660>
 8009dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dcc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009dd0:	8063      	strh	r3, [r4, #2]
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d0e1      	beq.n	8009d9a <_DrawBitmap+0x666>
 8009dd6:	68b3      	ldr	r3, [r6, #8]
 8009dd8:	9a04      	ldr	r2, [sp, #16]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	1c79      	adds	r1, r7, #1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4798      	blx	r3
 8009de2:	e7da      	b.n	8009d9a <_DrawBitmap+0x666>
 8009de4:	f1b8 0f00 	cmp.w	r8, #0
 8009de8:	d02e      	beq.n	8009e48 <_DrawBitmap+0x714>
 8009dea:	092d      	lsrs	r5, r5, #4
 8009dec:	d02c      	beq.n	8009e48 <_DrawBitmap+0x714>
 8009dee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009df0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009df4:	8023      	strh	r3, [r4, #0]
 8009df6:	b33e      	cbz	r6, 8009e48 <_DrawBitmap+0x714>
 8009df8:	68b3      	ldr	r3, [r6, #8]
 8009dfa:	9a04      	ldr	r2, [sp, #16]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	4798      	blx	r3
 8009e04:	e020      	b.n	8009e48 <_DrawBitmap+0x714>
 8009e06:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009e0a:	bf18      	it	ne
 8009e0c:	8806      	ldrhne	r6, [r0, #0]
 8009e0e:	f101 31ff 	add.w	r1, r1, #4294967295
 8009e12:	bf1c      	itt	ne
 8009e14:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 8009e18:	8006      	strhne	r6, [r0, #0]
 8009e1a:	012d      	lsls	r5, r5, #4
 8009e1c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009e20:	f100 0002 	add.w	r0, r0, #2
 8009e24:	b2ed      	uxtb	r5, r5
 8009e26:	d1ee      	bne.n	8009e06 <_DrawBitmap+0x6d2>
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009e32:	b14a      	cbz	r2, 8009e48 <_DrawBitmap+0x714>
 8009e34:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8009e38:	2302      	movs	r3, #2
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	bfc8      	it	gt
 8009e3e:	b2d3      	uxtbgt	r3, r2
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	4619      	mov	r1, r3
 8009e44:	4620      	mov	r0, r4
 8009e46:	e7de      	b.n	8009e06 <_DrawBitmap+0x6d2>
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	9304      	str	r3, [sp, #16]
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	9303      	str	r3, [sp, #12]
 8009e56:	9a06      	ldr	r2, [sp, #24]
 8009e58:	9b07      	ldr	r3, [sp, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	9307      	str	r3, [sp, #28]
 8009e5e:	e5b7      	b.n	80099d0 <_DrawBitmap+0x29c>
 8009e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e62:	b113      	cbz	r3, 8009e6a <_DrawBitmap+0x736>
 8009e64:	a80f      	add	r0, sp, #60	; 0x3c
 8009e66:	f7fc fc8b 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009e6a:	b011      	add	sp, #68	; 0x44
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	20000014 	.word	0x20000014

08009e74 <_GetDevProp>:
 8009e74:	2908      	cmp	r1, #8
 8009e76:	d004      	beq.n	8009e82 <_GetDevProp+0xe>
 8009e78:	6800      	ldr	r0, [r0, #0]
 8009e7a:	b120      	cbz	r0, 8009e86 <_GetDevProp+0x12>
 8009e7c:	68c3      	ldr	r3, [r0, #12]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	4718      	bx	r3
 8009e82:	2010      	movs	r0, #16
 8009e84:	4770      	bx	lr
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	4770      	bx	lr

08009e8c <GUI_USAGE_DecUseCnt>:
 8009e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e8e:	4605      	mov	r5, r0
 8009e90:	f7fc fc68 	bl	8006764 <GUI_ALLOC_LockH>
 8009e94:	ab02      	add	r3, sp, #8
 8009e96:	8984      	ldrh	r4, [r0, #12]
 8009e98:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009e9c:	3c01      	subs	r4, #1
 8009e9e:	b224      	sxth	r4, r4
 8009ea0:	8184      	strh	r4, [r0, #12]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fc fc6c 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009ea8:	b914      	cbnz	r4, 8009eb0 <GUI_USAGE_DecUseCnt+0x24>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f7fc fc88 	bl	80067c0 <GUI_ALLOC_Free>
 8009eb0:	b003      	add	sp, #12
 8009eb2:	bd30      	pop	{r4, r5, pc}

08009eb4 <GUI_USAGE_AddRect>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	9c08      	ldr	r4, [sp, #32]
 8009eba:	4605      	mov	r5, r0
 8009ebc:	4688      	mov	r8, r1
 8009ebe:	4699      	mov	r9, r3
 8009ec0:	4414      	add	r4, r2
 8009ec2:	68ab      	ldr	r3, [r5, #8]
 8009ec4:	1c56      	adds	r6, r2, #1
 8009ec6:	685f      	ldr	r7, [r3, #4]
 8009ec8:	4641      	mov	r1, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	4628      	mov	r0, r5
 8009ece:	47b8      	blx	r7
 8009ed0:	42b4      	cmp	r4, r6
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	d1f5      	bne.n	8009ec2 <GUI_USAGE_AddRect+0xe>
 8009ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009eda <_Convert16>:
 8009eda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ede:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009ee2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009ee6:	4681      	mov	r9, r0
 8009ee8:	460d      	mov	r5, r1
 8009eea:	4616      	mov	r6, r2
 8009eec:	461f      	mov	r7, r3
 8009eee:	4614      	mov	r4, r2
 8009ef0:	4688      	mov	r8, r1
 8009ef2:	f839 0b02 	ldrh.w	r0, [r9], #2
 8009ef6:	47d8      	blx	fp
 8009ef8:	47d0      	blx	sl
 8009efa:	3c01      	subs	r4, #1
 8009efc:	f848 0b04 	str.w	r0, [r8], #4
 8009f00:	d1f7      	bne.n	8009ef2 <_Convert16+0x18>
 8009f02:	2f1f      	cmp	r7, #31
 8009f04:	d806      	bhi.n	8009f14 <_Convert16+0x3a>
 8009f06:	463a      	mov	r2, r7
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	f001 be40 	b.w	800bb94 <GUI__CompactPixelIndices>
 8009f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f18 <_Convert8>:
 8009f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009f20:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009f24:	4680      	mov	r8, r0
 8009f26:	460d      	mov	r5, r1
 8009f28:	4616      	mov	r6, r2
 8009f2a:	461f      	mov	r7, r3
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	4604      	mov	r4, r0
 8009f30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f34:	47d8      	blx	fp
 8009f36:	47d0      	blx	sl
 8009f38:	1b33      	subs	r3, r6, r4
 8009f3a:	eb18 0f03 	cmn.w	r8, r3
 8009f3e:	f849 0b04 	str.w	r0, [r9], #4
 8009f42:	d1f5      	bne.n	8009f30 <_Convert8+0x18>
 8009f44:	2f1f      	cmp	r7, #31
 8009f46:	d806      	bhi.n	8009f56 <_Convert8+0x3e>
 8009f48:	463a      	mov	r2, r7
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f52:	f001 be1f 	b.w	800bb94 <GUI__CompactPixelIndices>
 8009f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009f5c <GUI_MEMDEV__WriteToActiveOpaque>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	b09b      	sub	sp, #108	; 0x6c
 8009f62:	4605      	mov	r5, r0
 8009f64:	9108      	str	r1, [sp, #32]
 8009f66:	9209      	str	r2, [sp, #36]	; 0x24
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f000 8399 	beq.w	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8009f6e:	f7fc fbf9 	bl	8006764 <GUI_ALLOC_LockH>
 8009f72:	ab1a      	add	r3, sp, #104	; 0x68
 8009f74:	6944      	ldr	r4, [r0, #20]
 8009f76:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fc fc00 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009f80:	4628      	mov	r0, r5
 8009f82:	f001 ff45 	bl	800be10 <GUI_MEMDEV_GetBitsPerPixel>
 8009f86:	2808      	cmp	r0, #8
 8009f88:	4607      	mov	r7, r0
 8009f8a:	4ea5      	ldr	r6, [pc, #660]	; (800a220 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8009f8c:	dd02      	ble.n	8009f94 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	f000 81c9 	beq.w	800a326 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8009f94:	2301      	movs	r3, #1
 8009f96:	2700      	movs	r7, #0
 8009f98:	4628      	mov	r0, r5
 8009f9a:	9319      	str	r3, [sp, #100]	; 0x64
 8009f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9e:	9718      	str	r7, [sp, #96]	; 0x60
 8009fa0:	f7fc fbe0 	bl	8006764 <GUI_ALLOC_LockH>
 8009fa4:	6802      	ldr	r2, [r0, #0]
 8009fa6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8009faa:	6912      	ldr	r2, [r2, #16]
 8009fac:	930e      	str	r3, [sp, #56]	; 0x38
 8009fae:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8009fb2:	6853      	ldr	r3, [r2, #4]
 8009fb4:	6832      	ldr	r2, [r6, #0]
 8009fb6:	f849 0d14 	str.w	r0, [r9, #-20]!
 8009fba:	6904      	ldr	r4, [r0, #16]
 8009fbc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8009fc0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009fc4:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8009fc8:	7c50      	ldrb	r0, [r2, #17]
 8009fca:	930c      	str	r3, [sp, #48]	; 0x30
 8009fcc:	f7fe f8c4 	bl	8008158 <GUI_GetBitsPerPixelEx>
 8009fd0:	6832      	ldr	r2, [r6, #0]
 8009fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fd4:	7c50      	ldrb	r0, [r2, #17]
 8009fd6:	f7fe f8dd 	bl	8008194 <GUI_GetpfIndex2ColorEx>
 8009fda:	900a      	str	r0, [sp, #40]	; 0x28
 8009fdc:	4648      	mov	r0, r9
 8009fde:	f7fc fbcf 	bl	8006780 <GUI_ALLOC_UnlockH>
 8009fe2:	2c08      	cmp	r4, #8
 8009fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe8:	d904      	bls.n	8009ff4 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 8009fea:	2c10      	cmp	r4, #16
 8009fec:	bf8c      	ite	hi
 8009fee:	2304      	movhi	r3, #4
 8009ff0:	2302      	movls	r3, #2
 8009ff2:	e005      	b.n	800a000 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8009ff4:	2c01      	cmp	r4, #1
 8009ff6:	d103      	bne.n	800a000 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8009ff8:	ab18      	add	r3, sp, #96	; 0x60
 8009ffa:	940d      	str	r4, [sp, #52]	; 0x34
 8009ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8009ffe:	e001      	b.n	800a004 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 800a000:	930d      	str	r3, [sp, #52]	; 0x34
 800a002:	970a      	str	r7, [sp, #40]	; 0x28
 800a004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a006:	4293      	cmp	r3, r2
 800a008:	f000 80df 	beq.w	800a1ca <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	7c58      	ldrb	r0, [r3, #17]
 800a010:	f7fe f8c8 	bl	80081a4 <GUI_GetpfColor2IndexEx>
 800a014:	900f      	str	r0, [sp, #60]	; 0x3c
 800a016:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800a01a:	f7fc fd31 	bl	8006a80 <GUI_ALLOC_AllocNoInit>
 800a01e:	9010      	str	r0, [sp, #64]	; 0x40
 800a020:	2800      	cmp	r0, #0
 800a022:	f000 833d 	beq.w	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a026:	4628      	mov	r0, r5
 800a028:	f001 ff2a 	bl	800be80 <GUI_MEMDEV_GetDataPtr>
 800a02c:	4605      	mov	r5, r0
 800a02e:	f1b8 0f00 	cmp.w	r8, #0
 800a032:	f000 80b9 	beq.w	800a1a8 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 800a036:	4640      	mov	r0, r8
 800a038:	f7fc fb94 	bl	8006764 <GUI_ALLOC_LockH>
 800a03c:	eb05 030a 	add.w	r3, r5, sl
 800a040:	9311      	str	r3, [sp, #68]	; 0x44
 800a042:	2300      	movs	r3, #0
 800a044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a048:	9016      	str	r0, [sp, #88]	; 0x58
 800a04a:	9309      	str	r3, [sp, #36]	; 0x24
 800a04c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a050:	ebca 0703 	rsb	r7, sl, r3
 800a054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a056:	4293      	cmp	r3, r2
 800a058:	f340 80a2 	ble.w	800a1a0 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 800a05c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a060:	2300      	movs	r3, #0
 800a062:	9317      	str	r3, [sp, #92]	; 0x5c
 800a064:	6883      	ldr	r3, [r0, #8]
 800a066:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	4641      	mov	r1, r8
 800a06e:	4798      	blx	r3
 800a070:	4583      	cmp	fp, r0
 800a072:	4605      	mov	r5, r0
 800a074:	d128      	bne.n	800a0c8 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 800a076:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a078:	f7fc fb74 	bl	8006764 <GUI_ALLOC_LockH>
 800a07c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	2c08      	cmp	r4, #8
 800a082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a084:	9014      	str	r0, [sp, #80]	; 0x50
 800a086:	4601      	mov	r1, r0
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	465a      	mov	r2, fp
 800a08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08e:	4638      	mov	r0, r7
 800a090:	d902      	bls.n	800a098 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 800a092:	f7ff ff22 	bl	8009eda <_Convert16>
 800a096:	e001      	b.n	800a09c <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 800a098:	f7ff ff3e 	bl	8009f18 <_Convert8>
 800a09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09e:	9305      	str	r3, [sp, #20]
 800a0a0:	ad1a      	add	r5, sp, #104	; 0x68
 800a0a2:	9808      	ldr	r0, [sp, #32]
 800a0a4:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b0:	9302      	str	r3, [sp, #8]
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	465a      	mov	r2, fp
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7fd fd7e 	bl	8007bbc <LCD_DrawBitmap>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7fc fb5d 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a0c6:	e062      	b.n	800a18e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a0c8:	2c01      	cmp	r4, #1
 800a0ca:	d002      	beq.n	800a0d2 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800a0cc:	f04f 0801 	mov.w	r8, #1
 800a0d0:	e057      	b.n	800a182 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 800a0d2:	2d00      	cmp	r5, #0
 800a0d4:	d05b      	beq.n	800a18e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a0d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a0d8:	9e08      	ldr	r6, [sp, #32]
 800a0da:	f8cd a00c 	str.w	sl, [sp, #12]
 800a0de:	f000 0307 	and.w	r3, r0, #7
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e6:	9305      	str	r3, [sp, #20]
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	fb90 f3f3 	sdiv	r3, r0, r3
 800a0ee:	443b      	add	r3, r7
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	4430      	add	r0, r6
 800a100:	f7fd fc70 	bl	80079e4 <LCD__DrawBitmap_1bpp>
 800a104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a106:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a10a:	441d      	add	r5, r3
 800a10c:	6883      	ldr	r3, [r0, #8]
 800a10e:	9517      	str	r5, [sp, #92]	; 0x5c
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	4641      	mov	r1, r8
 800a114:	4798      	blx	r3
 800a116:	4605      	mov	r5, r0
 800a118:	e7db      	b.n	800a0d2 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800a11a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a11c:	f7fc fb22 	bl	8006764 <GUI_ALLOC_LockH>
 800a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a122:	9014      	str	r0, [sp, #80]	; 0x50
 800a124:	4601      	mov	r1, r0
 800a126:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a128:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	2c08      	cmp	r4, #8
 800a12e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462a      	mov	r2, r5
 800a134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a136:	fb00 7006 	mla	r0, r0, r6, r7
 800a13a:	d925      	bls.n	800a188 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800a13c:	f7ff fecd 	bl	8009eda <_Convert16>
 800a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a14a:	9e08      	ldr	r6, [sp, #32]
 800a14c:	f8cd 8004 	str.w	r8, [sp, #4]
 800a150:	2300      	movs	r3, #0
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a156:	9302      	str	r3, [sp, #8]
 800a158:	462a      	mov	r2, r5
 800a15a:	2301      	movs	r3, #1
 800a15c:	4649      	mov	r1, r9
 800a15e:	4430      	add	r0, r6
 800a160:	f8cd 8000 	str.w	r8, [sp]
 800a164:	f7fd fd2a 	bl	8007bbc <LCD_DrawBitmap>
 800a168:	a814      	add	r0, sp, #80	; 0x50
 800a16a:	f7fc fb09 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a16e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a170:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a174:	441d      	add	r5, r3
 800a176:	6883      	ldr	r3, [r0, #8]
 800a178:	9517      	str	r5, [sp, #92]	; 0x5c
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	a917      	add	r1, sp, #92	; 0x5c
 800a17e:	4798      	blx	r3
 800a180:	4605      	mov	r5, r0
 800a182:	2d00      	cmp	r5, #0
 800a184:	d1c9      	bne.n	800a11a <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 800a186:	e002      	b.n	800a18e <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800a188:	f7ff fec6 	bl	8009f18 <_Convert8>
 800a18c:	e7d8      	b.n	800a140 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	3301      	adds	r3, #1
 800a192:	9309      	str	r3, [sp, #36]	; 0x24
 800a194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a196:	4453      	add	r3, sl
 800a198:	9311      	str	r3, [sp, #68]	; 0x44
 800a19a:	f109 0901 	add.w	r9, r9, #1
 800a19e:	e755      	b.n	800a04c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800a1a0:	a816      	add	r0, sp, #88	; 0x58
 800a1a2:	f7fc faed 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a1a6:	e00e      	b.n	800a1c6 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 800a1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	9004      	str	r0, [sp, #16]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	f8cd a00c 	str.w	sl, [sp, #12]
 800a1b8:	9402      	str	r4, [sp, #8]
 800a1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1be:	9808      	ldr	r0, [sp, #32]
 800a1c0:	465a      	mov	r2, fp
 800a1c2:	f7fd fcfb 	bl	8007bbc <LCD_DrawBitmap>
 800a1c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1c8:	e268      	b.n	800a69c <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f001 fe58 	bl	800be80 <GUI_MEMDEV_GetDataPtr>
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	f1b8 0f00 	cmp.w	r8, #0
 800a1d6:	f000 809a 	beq.w	800a30e <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7fc fac2 	bl	8006764 <GUI_ALLOC_LockH>
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	9016      	str	r0, [sp, #88]	; 0x58
 800a1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e6:	42ab      	cmp	r3, r5
 800a1e8:	f340 808d 	ble.w	800a306 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 800a1ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1f2:	6883      	ldr	r3, [r0, #8]
 800a1f4:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	4798      	blx	r3
 800a200:	4583      	cmp	fp, r0
 800a202:	4606      	mov	r6, r0
 800a204:	d126      	bne.n	800a254 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 800a206:	462e      	mov	r6, r5
 800a208:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a20a:	6883      	ldr	r3, [r0, #8]
 800a20c:	f106 0901 	add.w	r9, r6, #1
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	464a      	mov	r2, r9
 800a214:	4641      	mov	r1, r8
 800a216:	4798      	blx	r3
 800a218:	4583      	cmp	fp, r0
 800a21a:	d103      	bne.n	800a224 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 800a21c:	464e      	mov	r6, r9
 800a21e:	e7f3      	b.n	800a208 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 800a220:	20000014 	.word	0x20000014
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	ebc5 0806 	rsb	r8, r5, r6
 800a22e:	2301      	movs	r3, #1
 800a230:	f108 0801 	add.w	r8, r8, #1
 800a234:	9704      	str	r7, [sp, #16]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4429      	add	r1, r5
 800a23c:	f8cd a00c 	str.w	sl, [sp, #12]
 800a240:	9402      	str	r4, [sp, #8]
 800a242:	4643      	mov	r3, r8
 800a244:	465a      	mov	r2, fp
 800a246:	9808      	ldr	r0, [sp, #32]
 800a248:	f7fd fcb8 	bl	8007bbc <LCD_DrawBitmap>
 800a24c:	fb0a 7708 	mla	r7, sl, r8, r7
 800a250:	4635      	mov	r5, r6
 800a252:	e056      	b.n	800a302 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800a254:	2c01      	cmp	r4, #1
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	d004      	beq.n	800a264 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 800a25a:	442b      	add	r3, r5
 800a25c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25e:	f04f 0901 	mov.w	r9, #1
 800a262:	e02b      	b.n	800a2bc <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800a264:	eb03 0905 	add.w	r9, r3, r5
 800a268:	46a0      	mov	r8, r4
 800a26a:	b32e      	cbz	r6, 800a2b8 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800a26c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800a270:	9808      	ldr	r0, [sp, #32]
 800a272:	f8cd a00c 	str.w	sl, [sp, #12]
 800a276:	f00e 0307 	and.w	r3, lr, #7
 800a27a:	9306      	str	r3, [sp, #24]
 800a27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	2308      	movs	r3, #8
 800a282:	fb9e f3f3 	sdiv	r3, lr, r3
 800a286:	443b      	add	r3, r7
 800a288:	4632      	mov	r2, r6
 800a28a:	4470      	add	r0, lr
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	4649      	mov	r1, r9
 800a290:	2301      	movs	r3, #1
 800a292:	f8cd 8008 	str.w	r8, [sp, #8]
 800a296:	f8cd 8004 	str.w	r8, [sp, #4]
 800a29a:	f8cd 8000 	str.w	r8, [sp]
 800a29e:	f7fd fba1 	bl	80079e4 <LCD__DrawBitmap_1bpp>
 800a2a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a2a6:	441e      	add	r6, r3
 800a2a8:	6883      	ldr	r3, [r0, #8]
 800a2aa:	9617      	str	r6, [sp, #92]	; 0x5c
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	a917      	add	r1, sp, #92	; 0x5c
 800a2b2:	4798      	blx	r3
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	e7d8      	b.n	800a26a <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 800a2b8:	4457      	add	r7, sl
 800a2ba:	e022      	b.n	800a302 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800a2bc:	2e00      	cmp	r6, #0
 800a2be:	d0fb      	beq.n	800a2b8 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c2:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ca:	9808      	ldr	r0, [sp, #32]
 800a2cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2ce:	f8cd a00c 	str.w	sl, [sp, #12]
 800a2d2:	fb03 730e 	mla	r3, r3, lr, r7
 800a2d6:	4632      	mov	r2, r6
 800a2d8:	4470      	add	r0, lr
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	9402      	str	r4, [sp, #8]
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2e4:	f8cd 9000 	str.w	r9, [sp]
 800a2e8:	f7fd fc68 	bl	8007bbc <LCD_DrawBitmap>
 800a2ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a2f0:	441e      	add	r6, r3
 800a2f2:	6883      	ldr	r3, [r0, #8]
 800a2f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4641      	mov	r1, r8
 800a2fc:	4798      	blx	r3
 800a2fe:	4606      	mov	r6, r0
 800a300:	e7dc      	b.n	800a2bc <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800a302:	3501      	adds	r5, #1
 800a304:	e76e      	b.n	800a1e4 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800a306:	a816      	add	r0, sp, #88	; 0x58
 800a308:	f7fc fa3a 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a30c:	e1c8      	b.n	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	2301      	movs	r3, #1
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	9004      	str	r0, [sp, #16]
 800a31a:	f8cd a00c 	str.w	sl, [sp, #12]
 800a31e:	9402      	str	r4, [sp, #8]
 800a320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a322:	465a      	mov	r2, fp
 800a324:	e03a      	b.n	800a39c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800a326:	4628      	mov	r0, r5
 800a328:	f7fc fa1c 	bl	8006764 <GUI_ALLOC_LockH>
 800a32c:	4683      	mov	fp, r0
 800a32e:	a81a      	add	r0, sp, #104	; 0x68
 800a330:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 800a334:	f840 bd10 	str.w	fp, [r0, #-16]!
 800a338:	f8db 2000 	ldr.w	r2, [fp]
 800a33c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a33e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800a342:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800a346:	930c      	str	r3, [sp, #48]	; 0x30
 800a348:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800a34c:	f7fc fa18 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a350:	6832      	ldr	r2, [r6, #0]
 800a352:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800a356:	7c50      	ldrb	r0, [r2, #17]
 800a358:	4aa1      	ldr	r2, [pc, #644]	; (800a5e0 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 800a35a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800a35e:	6916      	ldr	r6, [r2, #16]
 800a360:	6833      	ldr	r3, [r6, #0]
 800a362:	930a      	str	r3, [sp, #40]	; 0x28
 800a364:	f7fd fef8 	bl	8008158 <GUI_GetBitsPerPixelEx>
 800a368:	2808      	cmp	r0, #8
 800a36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36c:	d906      	bls.n	800a37c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800a36e:	2810      	cmp	r0, #16
 800a370:	bf8c      	ite	hi
 800a372:	f04f 0a04 	movhi.w	sl, #4
 800a376:	f04f 0a02 	movls.w	sl, #2
 800a37a:	e001      	b.n	800a380 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 800a37c:	f04f 0a01 	mov.w	sl, #1
 800a380:	45b0      	cmp	r8, r6
 800a382:	d110      	bne.n	800a3a6 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 800a384:	9303      	str	r3, [sp, #12]
 800a386:	2301      	movs	r3, #1
 800a388:	2200      	movs	r2, #0
 800a38a:	f10b 0018 	add.w	r0, fp, #24
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a394:	9205      	str	r2, [sp, #20]
 800a396:	9004      	str	r0, [sp, #16]
 800a398:	9702      	str	r7, [sp, #8]
 800a39a:	4622      	mov	r2, r4
 800a39c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a39e:	9808      	ldr	r0, [sp, #32]
 800a3a0:	f7fd fc0c 	bl	8007bbc <LCD_DrawBitmap>
 800a3a4:	e17c      	b.n	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a3a6:	2f20      	cmp	r7, #32
 800a3a8:	f040 80a2 	bne.w	800a4f0 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 800a3ac:	fb0a f004 	mul.w	r0, sl, r4
 800a3b0:	f7fc fb66 	bl	8006a80 <GUI_ALLOC_AllocNoInit>
 800a3b4:	900d      	str	r0, [sp, #52]	; 0x34
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f000 8172 	beq.w	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a3bc:	f7fc f9d2 	bl	8006764 <GUI_ALLOC_LockH>
 800a3c0:	9018      	str	r0, [sp, #96]	; 0x60
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f7fc f9ce 	bl	8006764 <GUI_ALLOC_LockH>
 800a3c8:	9016      	str	r0, [sp, #88]	; 0x58
 800a3ca:	6933      	ldr	r3, [r6, #16]
 800a3cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3d0:	f100 0518 	add.w	r5, r0, #24
 800a3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a3d8:	920c      	str	r2, [sp, #48]	; 0x30
 800a3da:	b373      	cbz	r3, 800a43a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800a3dc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a3e0:	f04f 0901 	mov.w	r9, #1
 800a3e4:	f1ba 0f02 	cmp.w	sl, #2
 800a3e8:	d005      	beq.n	800a3f6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800a3ea:	f1ba 0f04 	cmp.w	sl, #4
 800a3ee:	d002      	beq.n	800a3f6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800a3f0:	f1ba 0f01 	cmp.w	sl, #1
 800a3f4:	d106      	bne.n	800a404 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	6937      	ldr	r7, [r6, #16]
 800a3fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3fc:	4653      	mov	r3, sl
 800a3fe:	4622      	mov	r2, r4
 800a400:	47b8      	blx	r7
 800a402:	445d      	add	r5, fp
 800a404:	2300      	movs	r3, #0
 800a406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a408:	9305      	str	r3, [sp, #20]
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a40e:	9204      	str	r2, [sp, #16]
 800a410:	9302      	str	r3, [sp, #8]
 800a412:	4622      	mov	r2, r4
 800a414:	2301      	movs	r3, #1
 800a416:	f8cd 9004 	str.w	r9, [sp, #4]
 800a41a:	f8cd 9000 	str.w	r9, [sp]
 800a41e:	4641      	mov	r1, r8
 800a420:	9808      	ldr	r0, [sp, #32]
 800a422:	f7fd fbcb 	bl	8007bbc <LCD_DrawBitmap>
 800a426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42a:	f108 0701 	add.w	r7, r8, #1
 800a42e:	4413      	add	r3, r2
 800a430:	429f      	cmp	r7, r3
 800a432:	f000 812c 	beq.w	800a68e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800a436:	46b8      	mov	r8, r7
 800a438:	e7d4      	b.n	800a3e4 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 800a43a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a43c:	461e      	mov	r6, r3
 800a43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a440:	443b      	add	r3, r7
 800a442:	f04f 0901 	mov.w	r9, #1
 800a446:	9309      	str	r3, [sp, #36]	; 0x24
 800a448:	f1ba 0f02 	cmp.w	sl, #2
 800a44c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a450:	d016      	beq.n	800a480 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 800a452:	f1ba 0f04 	cmp.w	sl, #4
 800a456:	d024      	beq.n	800a4a2 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 800a458:	f1ba 0f01 	cmp.w	sl, #1
 800a45c:	d130      	bne.n	800a4c0 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 800a45e:	4643      	mov	r3, r8
 800a460:	462a      	mov	r2, r5
 800a462:	f852 0b04 	ldr.w	r0, [r2], #4
 800a466:	930e      	str	r3, [sp, #56]	; 0x38
 800a468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a46c:	4798      	blx	r3
 800a46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a472:	f803 0b01 	strb.w	r0, [r3], #1
 800a476:	1ae1      	subs	r1, r4, r3
 800a478:	eb18 0f01 	cmn.w	r8, r1
 800a47c:	d1f1      	bne.n	800a462 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800a47e:	e01e      	b.n	800a4be <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800a480:	4643      	mov	r3, r8
 800a482:	462a      	mov	r2, r5
 800a484:	46a0      	mov	r8, r4
 800a486:	f852 0b04 	ldr.w	r0, [r2], #4
 800a48a:	930e      	str	r3, [sp, #56]	; 0x38
 800a48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a490:	4798      	blx	r3
 800a492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a496:	f823 0b02 	strh.w	r0, [r3], #2
 800a49a:	f1b8 0801 	subs.w	r8, r8, #1
 800a49e:	d1f2      	bne.n	800a486 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 800a4a0:	e00d      	b.n	800a4be <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	f852 0b04 	ldr.w	r0, [r2], #4
 800a4aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4b0:	4798      	blx	r3
 800a4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4b4:	f848 0b04 	str.w	r0, [r8], #4
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4bc:	d1f3      	bne.n	800a4a6 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 800a4be:	445d      	add	r5, fp
 800a4c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4c2:	9304      	str	r3, [sp, #16]
 800a4c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	9605      	str	r6, [sp, #20]
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	9603      	str	r6, [sp, #12]
 800a4ce:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4d2:	f8cd 9000 	str.w	r9, [sp]
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4639      	mov	r1, r7
 800a4da:	9808      	ldr	r0, [sp, #32]
 800a4dc:	f7fd fb6e 	bl	8007bbc <LCD_DrawBitmap>
 800a4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e2:	f107 0801 	add.w	r8, r7, #1
 800a4e6:	4543      	cmp	r3, r8
 800a4e8:	f000 80d1 	beq.w	800a68e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800a4ec:	4647      	mov	r7, r8
 800a4ee:	e7ab      	b.n	800a448 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 800a4f0:	2f10      	cmp	r7, #16
 800a4f2:	f040 80d5 	bne.w	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a4f6:	fb04 f00a 	mul.w	r0, r4, sl
 800a4fa:	f7fc fac1 	bl	8006a80 <GUI_ALLOC_AllocNoInit>
 800a4fe:	900d      	str	r0, [sp, #52]	; 0x34
 800a500:	2800      	cmp	r0, #0
 800a502:	f000 80cd 	beq.w	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800a506:	f7fc f92d 	bl	8006764 <GUI_ALLOC_LockH>
 800a50a:	9018      	str	r0, [sp, #96]	; 0x60
 800a50c:	4628      	mov	r0, r5
 800a50e:	f7fc f929 	bl	8006764 <GUI_ALLOC_LockH>
 800a512:	9016      	str	r0, [sp, #88]	; 0x58
 800a514:	6933      	ldr	r3, [r6, #16]
 800a516:	f100 0718 	add.w	r7, r0, #24
 800a51a:	b113      	cbz	r3, 800a522 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 800a51c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a520:	b953      	cbnz	r3, 800a538 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 800a522:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a526:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a528:	930c      	str	r3, [sp, #48]	; 0x30
 800a52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52c:	442b      	add	r3, r5
 800a52e:	0066      	lsls	r6, r4, #1
 800a530:	f04f 0b00 	mov.w	fp, #0
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	e083      	b.n	800a640 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 800a538:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800a53c:	0080      	lsls	r0, r0, #2
 800a53e:	f7fc fa9f 	bl	8006a80 <GUI_ALLOC_AllocNoInit>
 800a542:	900c      	str	r0, [sp, #48]	; 0x30
 800a544:	b118      	cbz	r0, 800a54e <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 800a546:	f7fc f90d 	bl	8006764 <GUI_ALLOC_LockH>
 800a54a:	9017      	str	r0, [sp, #92]	; 0x5c
 800a54c:	e001      	b.n	800a552 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800a54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a550:	9317      	str	r3, [sp, #92]	; 0x5c
 800a552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 809a 	beq.w	800a68e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800a55a:	0063      	lsls	r3, r4, #1
 800a55c:	930a      	str	r3, [sp, #40]	; 0x28
 800a55e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800a562:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a566:	930e      	str	r3, [sp, #56]	; 0x38
 800a568:	f1ba 0f02 	cmp.w	sl, #2
 800a56c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800a570:	d006      	beq.n	800a580 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 800a572:	f1ba 0f04 	cmp.w	sl, #4
 800a576:	d005      	beq.n	800a584 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800a578:	f1ba 0f01 	cmp.w	sl, #1
 800a57c:	d111      	bne.n	800a5a2 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 800a57e:	e001      	b.n	800a584 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800a580:	4653      	mov	r3, sl
 800a582:	e000      	b.n	800a586 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 800a584:	2302      	movs	r3, #2
 800a586:	4638      	mov	r0, r7
 800a588:	4622      	mov	r2, r4
 800a58a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a58c:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800a590:	47a8      	blx	r5
 800a592:	4653      	mov	r3, sl
 800a594:	4622      	mov	r2, r4
 800a596:	4649      	mov	r1, r9
 800a598:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a59a:	6935      	ldr	r5, [r6, #16]
 800a59c:	47a8      	blx	r5
 800a59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a0:	441f      	add	r7, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	9303      	str	r3, [sp, #12]
 800a5a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5ac:	9302      	str	r3, [sp, #8]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	9204      	str	r2, [sp, #16]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	4659      	mov	r1, fp
 800a5ba:	9808      	ldr	r0, [sp, #32]
 800a5bc:	f7fd fafe 	bl	8007bbc <LCD_DrawBitmap>
 800a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c4:	f10b 0901 	add.w	r9, fp, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	4599      	cmp	r9, r3
 800a5cc:	d001      	beq.n	800a5d2 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 800a5ce:	46cb      	mov	fp, r9
 800a5d0:	e7ca      	b.n	800a568 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800a5d2:	a817      	add	r0, sp, #92	; 0x5c
 800a5d4:	f7fc f8d4 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a5d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5da:	f7fc f8f1 	bl	80067c0 <GUI_ALLOC_Free>
 800a5de:	e056      	b.n	800a68e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800a5e0:	200083e8 	.word	0x200083e8
 800a5e4:	f1ba 0f04 	cmp.w	sl, #4
 800a5e8:	d041      	beq.n	800a66e <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 800a5ea:	f1ba 0f01 	cmp.w	sl, #1
 800a5ee:	d111      	bne.n	800a614 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	463a      	mov	r2, r7
 800a5f4:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a5f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a5fa:	930e      	str	r3, [sp, #56]	; 0x38
 800a5fc:	47c8      	blx	r9
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	4798      	blx	r3
 800a602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a606:	f803 0b01 	strb.w	r0, [r3], #1
 800a60a:	1ae1      	subs	r1, r4, r3
 800a60c:	eb18 0f01 	cmn.w	r8, r1
 800a610:	d1f0      	bne.n	800a5f4 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 800a612:	4437      	add	r7, r6
 800a614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a61a:	9302      	str	r3, [sp, #8]
 800a61c:	2301      	movs	r3, #1
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	f8cd b014 	str.w	fp, [sp, #20]
 800a626:	f8cd b00c 	str.w	fp, [sp, #12]
 800a62a:	4622      	mov	r2, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	9808      	ldr	r0, [sp, #32]
 800a630:	f7fd fac4 	bl	8007bbc <LCD_DrawBitmap>
 800a634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a636:	f105 0801 	add.w	r8, r5, #1
 800a63a:	4543      	cmp	r3, r8
 800a63c:	d027      	beq.n	800a68e <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800a63e:	4645      	mov	r5, r8
 800a640:	f1ba 0f02 	cmp.w	sl, #2
 800a644:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a648:	d1cc      	bne.n	800a5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 800a64a:	4643      	mov	r3, r8
 800a64c:	463a      	mov	r2, r7
 800a64e:	46a0      	mov	r8, r4
 800a650:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a654:	920b      	str	r2, [sp, #44]	; 0x2c
 800a656:	930e      	str	r3, [sp, #56]	; 0x38
 800a658:	47c8      	blx	r9
 800a65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65c:	4798      	blx	r3
 800a65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a662:	f823 0b02 	strh.w	r0, [r3], #2
 800a666:	f1b8 0801 	subs.w	r8, r8, #1
 800a66a:	d1f1      	bne.n	800a650 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 800a66c:	e7d1      	b.n	800a612 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800a66e:	463a      	mov	r2, r7
 800a670:	4623      	mov	r3, r4
 800a672:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a676:	920b      	str	r2, [sp, #44]	; 0x2c
 800a678:	930e      	str	r3, [sp, #56]	; 0x38
 800a67a:	47c8      	blx	r9
 800a67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67e:	4798      	blx	r3
 800a680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a682:	f848 0b04 	str.w	r0, [r8], #4
 800a686:	3b01      	subs	r3, #1
 800a688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a68a:	d1f2      	bne.n	800a672 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 800a68c:	e7c1      	b.n	800a612 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800a68e:	a816      	add	r0, sp, #88	; 0x58
 800a690:	f7fc f876 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a694:	a818      	add	r0, sp, #96	; 0x60
 800a696:	f7fc f873 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a69a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a69c:	f7fc f890 	bl	80067c0 <GUI_ALLOC_Free>
 800a6a0:	b01b      	add	sp, #108	; 0x6c
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	bf00      	nop

0800a6a8 <_OnExit>:
 800a6a8:	4b18      	ldr	r3, [pc, #96]	; (800a70c <_OnExit+0x64>)
 800a6aa:	4819      	ldr	r0, [pc, #100]	; (800a710 <_OnExit+0x68>)
 800a6ac:	4a19      	ldr	r2, [pc, #100]	; (800a714 <_OnExit+0x6c>)
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	2400      	movs	r4, #0
 800a6b2:	601c      	str	r4, [r3, #0]
 800a6b4:	4b18      	ldr	r3, [pc, #96]	; (800a718 <_OnExit+0x70>)
 800a6b6:	4d19      	ldr	r5, [pc, #100]	; (800a71c <_OnExit+0x74>)
 800a6b8:	601c      	str	r4, [r3, #0]
 800a6ba:	605c      	str	r4, [r3, #4]
 800a6bc:	4b18      	ldr	r3, [pc, #96]	; (800a720 <_OnExit+0x78>)
 800a6be:	7004      	strb	r4, [r0, #0]
 800a6c0:	601c      	str	r4, [r3, #0]
 800a6c2:	4b18      	ldr	r3, [pc, #96]	; (800a724 <_OnExit+0x7c>)
 800a6c4:	6044      	str	r4, [r0, #4]
 800a6c6:	601c      	str	r4, [r3, #0]
 800a6c8:	4b17      	ldr	r3, [pc, #92]	; (800a728 <_OnExit+0x80>)
 800a6ca:	6014      	str	r4, [r2, #0]
 800a6cc:	601c      	str	r4, [r3, #0]
 800a6ce:	4b17      	ldr	r3, [pc, #92]	; (800a72c <_OnExit+0x84>)
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	601c      	str	r4, [r3, #0]
 800a6d4:	6084      	str	r4, [r0, #8]
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	4621      	mov	r1, r4
 800a6da:	2218      	movs	r2, #24
 800a6dc:	300c      	adds	r0, #12
 800a6de:	4798      	blx	r3
 800a6e0:	4b13      	ldr	r3, [pc, #76]	; (800a730 <_OnExit+0x88>)
 800a6e2:	4814      	ldr	r0, [pc, #80]	; (800a734 <_OnExit+0x8c>)
 800a6e4:	601c      	str	r4, [r3, #0]
 800a6e6:	4b14      	ldr	r3, [pc, #80]	; (800a738 <_OnExit+0x90>)
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	601c      	str	r4, [r3, #0]
 800a6ec:	605c      	str	r4, [r3, #4]
 800a6ee:	2210      	movs	r2, #16
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	4798      	blx	r3
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	4811      	ldr	r0, [pc, #68]	; (800a73c <_OnExit+0x94>)
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	4798      	blx	r3
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	480f      	ldr	r0, [pc, #60]	; (800a740 <_OnExit+0x98>)
 800a702:	4621      	mov	r1, r4
 800a704:	2210      	movs	r2, #16
 800a706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a70a:	4718      	bx	r3
 800a70c:	20008440 	.word	0x20008440
 800a710:	200001bc 	.word	0x200001bc
 800a714:	20008414 	.word	0x20008414
 800a718:	20008448 	.word	0x20008448
 800a71c:	2000001c 	.word	0x2000001c
 800a720:	20008454 	.word	0x20008454
 800a724:	20008400 	.word	0x20008400
 800a728:	20008434 	.word	0x20008434
 800a72c:	20008444 	.word	0x20008444
 800a730:	20008410 	.word	0x20008410
 800a734:	20008478 	.word	0x20008478
 800a738:	20008404 	.word	0x20008404
 800a73c:	20008468 	.word	0x20008468
 800a740:	20008458 	.word	0x20008458

0800a744 <_Findy1>:
 800a744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a746:	b085      	sub	sp, #20
 800a748:	4607      	mov	r7, r0
 800a74a:	460c      	mov	r4, r1
 800a74c:	4616      	mov	r6, r2
 800a74e:	ad02      	add	r5, sp, #8
 800a750:	2f00      	cmp	r7, #0
 800a752:	d048      	beq.n	800a7e6 <_Findy1+0xa2>
 800a754:	4638      	mov	r0, r7
 800a756:	f7fc f805 	bl	8006764 <GUI_ALLOC_LockH>
 800a75a:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a75c:	9001      	str	r0, [sp, #4]
 800a75e:	07bb      	lsls	r3, r7, #30
 800a760:	4601      	mov	r1, r0
 800a762:	d53a      	bpl.n	800a7da <_Findy1+0x96>
 800a764:	b126      	cbz	r6, 800a770 <_Findy1+0x2c>
 800a766:	4632      	mov	r2, r6
 800a768:	4628      	mov	r0, r5
 800a76a:	f7fd f816 	bl	800779a <GUI__IntersectRects>
 800a76e:	e002      	b.n	800a776 <_Findy1+0x32>
 800a770:	c803      	ldmia	r0, {r0, r1}
 800a772:	e885 0003 	stmia.w	r5, {r0, r1}
 800a776:	4629      	mov	r1, r5
 800a778:	4620      	mov	r0, r4
 800a77a:	f7fc faa3 	bl	8006cc4 <GUI_RectsIntersect>
 800a77e:	b360      	cbz	r0, 800a7da <_Findy1+0x96>
 800a780:	f017 0f01 	tst.w	r7, #1
 800a784:	9b01      	ldr	r3, [sp, #4]
 800a786:	d11c      	bne.n	800a7c2 <_Findy1+0x7e>
 800a788:	b13e      	cbz	r6, 800a79a <_Findy1+0x56>
 800a78a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a78e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800a792:	4293      	cmp	r3, r2
 800a794:	bfb8      	it	lt
 800a796:	4613      	movlt	r3, r2
 800a798:	e001      	b.n	800a79e <_Findy1+0x5a>
 800a79a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a79e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a7a8:	dd05      	ble.n	800a7b6 <_Findy1+0x72>
 800a7aa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	db13      	blt.n	800a7da <_Findy1+0x96>
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	e003      	b.n	800a7be <_Findy1+0x7a>
 800a7b6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	dd0d      	ble.n	800a7da <_Findy1+0x96>
 800a7be:	80e3      	strh	r3, [r4, #6]
 800a7c0:	e00b      	b.n	800a7da <_Findy1+0x96>
 800a7c2:	69df      	ldr	r7, [r3, #28]
 800a7c4:	b14f      	cbz	r7, 800a7da <_Findy1+0x96>
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	f7ff ffba 	bl	800a744 <_Findy1>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7fb ffbd 	bl	8006750 <GUI_ALLOC_h2p>
 800a7d6:	6a07      	ldr	r7, [r0, #32]
 800a7d8:	e7f4      	b.n	800a7c4 <_Findy1+0x80>
 800a7da:	9b01      	ldr	r3, [sp, #4]
 800a7dc:	a801      	add	r0, sp, #4
 800a7de:	6a1f      	ldr	r7, [r3, #32]
 800a7e0:	f7fb ffce 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a7e4:	e7b4      	b.n	800a750 <_Findy1+0xc>
 800a7e6:	b005      	add	sp, #20
 800a7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7ea <_Findx0>:
 800a7ea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	4690      	mov	r8, r2
 800a7f4:	2500      	movs	r5, #0
 800a7f6:	ac02      	add	r4, sp, #8
 800a7f8:	2e00      	cmp	r6, #0
 800a7fa:	d035      	beq.n	800a868 <_Findx0+0x7e>
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7fb ffb1 	bl	8006764 <GUI_ALLOC_LockH>
 800a802:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a804:	9001      	str	r0, [sp, #4]
 800a806:	07b2      	lsls	r2, r6, #30
 800a808:	4601      	mov	r1, r0
 800a80a:	d527      	bpl.n	800a85c <_Findx0+0x72>
 800a80c:	f1b8 0f00 	cmp.w	r8, #0
 800a810:	d004      	beq.n	800a81c <_Findx0+0x32>
 800a812:	4642      	mov	r2, r8
 800a814:	4620      	mov	r0, r4
 800a816:	f7fc ffc0 	bl	800779a <GUI__IntersectRects>
 800a81a:	e002      	b.n	800a822 <_Findx0+0x38>
 800a81c:	c803      	ldmia	r0, {r0, r1}
 800a81e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a822:	4621      	mov	r1, r4
 800a824:	4638      	mov	r0, r7
 800a826:	f7fc fa4d 	bl	8006cc4 <GUI_RectsIntersect>
 800a82a:	b1b8      	cbz	r0, 800a85c <_Findx0+0x72>
 800a82c:	07f3      	lsls	r3, r6, #31
 800a82e:	d405      	bmi.n	800a83c <_Findx0+0x52>
 800a830:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a834:	3301      	adds	r3, #1
 800a836:	803b      	strh	r3, [r7, #0]
 800a838:	2501      	movs	r5, #1
 800a83a:	e00f      	b.n	800a85c <_Findx0+0x72>
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	69de      	ldr	r6, [r3, #28]
 800a840:	b166      	cbz	r6, 800a85c <_Findx0+0x72>
 800a842:	4622      	mov	r2, r4
 800a844:	4639      	mov	r1, r7
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ffcf 	bl	800a7ea <_Findx0>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	4630      	mov	r0, r6
 800a850:	bf18      	it	ne
 800a852:	2501      	movne	r5, #1
 800a854:	f7fb ff7c 	bl	8006750 <GUI_ALLOC_h2p>
 800a858:	6a06      	ldr	r6, [r0, #32]
 800a85a:	e7f1      	b.n	800a840 <_Findx0+0x56>
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	a801      	add	r0, sp, #4
 800a860:	6a1e      	ldr	r6, [r3, #32]
 800a862:	f7fb ff8d 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a866:	e7c7      	b.n	800a7f8 <_Findx0+0xe>
 800a868:	4628      	mov	r0, r5
 800a86a:	b004      	add	sp, #16
 800a86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a870 <_Findx1>:
 800a870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a872:	b085      	sub	sp, #20
 800a874:	4605      	mov	r5, r0
 800a876:	460e      	mov	r6, r1
 800a878:	4617      	mov	r7, r2
 800a87a:	ac02      	add	r4, sp, #8
 800a87c:	b37d      	cbz	r5, 800a8de <_Findx1+0x6e>
 800a87e:	4628      	mov	r0, r5
 800a880:	f7fb ff70 	bl	8006764 <GUI_ALLOC_LockH>
 800a884:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a886:	9001      	str	r0, [sp, #4]
 800a888:	07aa      	lsls	r2, r5, #30
 800a88a:	4601      	mov	r1, r0
 800a88c:	d521      	bpl.n	800a8d2 <_Findx1+0x62>
 800a88e:	b127      	cbz	r7, 800a89a <_Findx1+0x2a>
 800a890:	463a      	mov	r2, r7
 800a892:	4620      	mov	r0, r4
 800a894:	f7fc ff81 	bl	800779a <GUI__IntersectRects>
 800a898:	e002      	b.n	800a8a0 <_Findx1+0x30>
 800a89a:	c803      	ldmia	r0, {r0, r1}
 800a89c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7fc fa0e 	bl	8006cc4 <GUI_RectsIntersect>
 800a8a8:	b198      	cbz	r0, 800a8d2 <_Findx1+0x62>
 800a8aa:	07eb      	lsls	r3, r5, #31
 800a8ac:	d404      	bmi.n	800a8b8 <_Findx1+0x48>
 800a8ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	80b3      	strh	r3, [r6, #4]
 800a8b6:	e00c      	b.n	800a8d2 <_Findx1+0x62>
 800a8b8:	9b01      	ldr	r3, [sp, #4]
 800a8ba:	69dd      	ldr	r5, [r3, #28]
 800a8bc:	b14d      	cbz	r5, 800a8d2 <_Findx1+0x62>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	f7ff ffd4 	bl	800a870 <_Findx1>
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7fb ff41 	bl	8006750 <GUI_ALLOC_h2p>
 800a8ce:	6a05      	ldr	r5, [r0, #32]
 800a8d0:	e7f4      	b.n	800a8bc <_Findx1+0x4c>
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	a801      	add	r0, sp, #4
 800a8d6:	6a1d      	ldr	r5, [r3, #32]
 800a8d8:	f7fb ff52 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a8dc:	e7ce      	b.n	800a87c <_Findx1+0xc>
 800a8de:	b005      	add	sp, #20
 800a8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a8e4 <WM__ClipAtParentBorders>:
 800a8e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f7fb ff3a 	bl	8006764 <GUI_ALLOC_LockH>
 800a8f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a8f2:	9001      	str	r0, [sp, #4]
 800a8f4:	f013 0402 	ands.w	r4, r3, #2
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	d104      	bne.n	800a906 <WM__ClipAtParentBorders+0x22>
 800a8fc:	a801      	add	r0, sp, #4
 800a8fe:	f7fb ff3f 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a902:	4620      	mov	r0, r4
 800a904:	e016      	b.n	800a934 <WM__ClipAtParentBorders+0x50>
 800a906:	4630      	mov	r0, r6
 800a908:	f7fc ff2a 	bl	8007760 <GUI__IntersectRect>
 800a90c:	9b01      	ldr	r3, [sp, #4]
 800a90e:	699c      	ldr	r4, [r3, #24]
 800a910:	a801      	add	r0, sp, #4
 800a912:	b954      	cbnz	r4, 800a92a <WM__ClipAtParentBorders+0x46>
 800a914:	f7fb ff34 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a918:	4b07      	ldr	r3, [pc, #28]	; (800a938 <WM__ClipAtParentBorders+0x54>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4295      	cmp	r5, r2
 800a91e:	d008      	beq.n	800a932 <WM__ClipAtParentBorders+0x4e>
 800a920:	6858      	ldr	r0, [r3, #4]
 800a922:	1b43      	subs	r3, r0, r5
 800a924:	4258      	negs	r0, r3
 800a926:	4158      	adcs	r0, r3
 800a928:	e004      	b.n	800a934 <WM__ClipAtParentBorders+0x50>
 800a92a:	f7fb ff29 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a92e:	4625      	mov	r5, r4
 800a930:	e7db      	b.n	800a8ea <WM__ClipAtParentBorders+0x6>
 800a932:	2001      	movs	r0, #1
 800a934:	b002      	add	sp, #8
 800a936:	bd70      	pop	{r4, r5, r6, pc}
 800a938:	20008404 	.word	0x20008404

0800a93c <WM__InsertWindowIntoList>:
 800a93c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a940:	4606      	mov	r6, r0
 800a942:	460c      	mov	r4, r1
 800a944:	2900      	cmp	r1, #0
 800a946:	d04c      	beq.n	800a9e2 <WM__InsertWindowIntoList+0xa6>
 800a948:	f7fb ff0c 	bl	8006764 <GUI_ALLOC_LockH>
 800a94c:	2300      	movs	r3, #0
 800a94e:	6184      	str	r4, [r0, #24]
 800a950:	9001      	str	r0, [sp, #4]
 800a952:	6203      	str	r3, [r0, #32]
 800a954:	4620      	mov	r0, r4
 800a956:	f7fb ff05 	bl	8006764 <GUI_ALLOC_LockH>
 800a95a:	ac04      	add	r4, sp, #16
 800a95c:	69c7      	ldr	r7, [r0, #28]
 800a95e:	f844 0d08 	str.w	r0, [r4, #-8]!
 800a962:	b92f      	cbnz	r7, 800a970 <WM__InsertWindowIntoList+0x34>
 800a964:	61c6      	str	r6, [r0, #28]
 800a966:	a801      	add	r0, sp, #4
 800a968:	f7fb ff0a 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a96c:	4620      	mov	r0, r4
 800a96e:	e036      	b.n	800a9de <WM__InsertWindowIntoList+0xa2>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	4638      	mov	r0, r7
 800a974:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800a976:	f7fb fef5 	bl	8006764 <GUI_ALLOC_LockH>
 800a97a:	f10d 0810 	add.w	r8, sp, #16
 800a97e:	f005 0508 	and.w	r5, r5, #8
 800a982:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a986:	b975      	cbnz	r5, 800a9a6 <WM__InsertWindowIntoList+0x6a>
 800a988:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a98a:	071a      	lsls	r2, r3, #28
 800a98c:	d50b      	bpl.n	800a9a6 <WM__InsertWindowIntoList+0x6a>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	621f      	str	r7, [r3, #32]
 800a992:	9b02      	ldr	r3, [sp, #8]
 800a994:	a801      	add	r0, sp, #4
 800a996:	61de      	str	r6, [r3, #28]
 800a998:	f7fb fef2 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7fb feef 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	e01b      	b.n	800a9de <WM__InsertWindowIntoList+0xa2>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7fb feea 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	f7fb fee7 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f7fb fecc 	bl	8006750 <GUI_ALLOC_h2p>
 800a9b8:	9003      	str	r0, [sp, #12]
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	6a1c      	ldr	r4, [r3, #32]
 800a9be:	b90c      	cbnz	r4, 800a9c4 <WM__InsertWindowIntoList+0x88>
 800a9c0:	621e      	str	r6, [r3, #32]
 800a9c2:	e00b      	b.n	800a9dc <WM__InsertWindowIntoList+0xa0>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7fb fec3 	bl	8006750 <GUI_ALLOC_h2p>
 800a9ca:	2d00      	cmp	r5, #0
 800a9cc:	d1f4      	bne.n	800a9b8 <WM__InsertWindowIntoList+0x7c>
 800a9ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a9d0:	071b      	lsls	r3, r3, #28
 800a9d2:	d5f1      	bpl.n	800a9b8 <WM__InsertWindowIntoList+0x7c>
 800a9d4:	9b03      	ldr	r3, [sp, #12]
 800a9d6:	621e      	str	r6, [r3, #32]
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	621c      	str	r4, [r3, #32]
 800a9dc:	a801      	add	r0, sp, #4
 800a9de:	f7fb fecf 	bl	8006780 <GUI_ALLOC_UnlockH>
 800a9e2:	b004      	add	sp, #16
 800a9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9e8 <WM__Client2Screen>:
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a9f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a9f4:	f7fc b94d 	b.w	8006c92 <GUI_MoveRect>

0800a9f8 <_SetClipRectUserIntersect>:
 800a9f8:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <_SetClipRectUserIntersect+0x48>)
 800a9fa:	b530      	push	{r4, r5, lr}
 800a9fc:	681c      	ldr	r4, [r3, #0]
 800a9fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aa00:	b085      	sub	sp, #20
 800aa02:	4605      	mov	r5, r0
 800aa04:	b1ba      	cbz	r2, 800aa36 <_SetClipRectUserIntersect+0x3e>
 800aa06:	6810      	ldr	r0, [r2, #0]
 800aa08:	6851      	ldr	r1, [r2, #4]
 800aa0a:	ab02      	add	r3, sp, #8
 800aa0c:	c303      	stmia	r3!, {r0, r1}
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <_SetClipRectUserIntersect+0x4c>)
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	b900      	cbnz	r0, 800aa16 <_SetClipRectUserIntersect+0x1e>
 800aa14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aa16:	f7fb fea5 	bl	8006764 <GUI_ALLOC_LockH>
 800aa1a:	ac04      	add	r4, sp, #16
 800aa1c:	a902      	add	r1, sp, #8
 800aa1e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800aa22:	f7ff ffe1 	bl	800a9e8 <WM__Client2Screen>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7fb feaa 	bl	8006780 <GUI_ALLOC_UnlockH>
 800aa2c:	a802      	add	r0, sp, #8
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7fc fe96 	bl	8007760 <GUI__IntersectRect>
 800aa34:	a802      	add	r0, sp, #8
 800aa36:	f001 f9d3 	bl	800bde0 <LCD_SetClipRectEx>
 800aa3a:	b005      	add	sp, #20
 800aa3c:	bd30      	pop	{r4, r5, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000014 	.word	0x20000014
 800aa44:	20008400 	.word	0x20008400

0800aa48 <WM__ActivateClipRect>:
 800aa48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <WM__ActivateClipRect+0x3c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800aa52:	b10a      	cbz	r2, 800aa58 <WM__ActivateClipRect+0x10>
 800aa54:	480c      	ldr	r0, [pc, #48]	; (800aa88 <WM__ActivateClipRect+0x40>)
 800aa56:	e011      	b.n	800aa7c <WM__ActivateClipRect+0x34>
 800aa58:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aa5a:	f7fb fe83 	bl	8006764 <GUI_ALLOC_LockH>
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	c803      	ldmia	r0, {r0, r1}
 800aa62:	ac02      	add	r4, sp, #8
 800aa64:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa68:	a801      	add	r0, sp, #4
 800aa6a:	f7fb fe89 	bl	8006780 <GUI_ALLOC_UnlockH>
 800aa6e:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <WM__ActivateClipRect+0x44>)
 800aa70:	6819      	ldr	r1, [r3, #0]
 800aa72:	b111      	cbz	r1, 800aa7a <WM__ActivateClipRect+0x32>
 800aa74:	4620      	mov	r0, r4
 800aa76:	f7ff ff35 	bl	800a8e4 <WM__ClipAtParentBorders>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff ffbc 	bl	800a9f8 <_SetClipRectUserIntersect>
 800aa80:	b004      	add	sp, #16
 800aa82:	bd10      	pop	{r4, pc}
 800aa84:	20000014 	.word	0x20000014
 800aa88:	200001d0 	.word	0x200001d0
 800aa8c:	20008400 	.word	0x20008400

0800aa90 <WM__InvalidateDrawAndDescs>:
 800aa90:	b513      	push	{r0, r1, r4, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	b300      	cbz	r0, 800aad8 <WM__InvalidateDrawAndDescs+0x48>
 800aa96:	f7fb fe65 	bl	8006764 <GUI_ALLOC_LockH>
 800aa9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aa9c:	9001      	str	r0, [sp, #4]
 800aa9e:	079b      	lsls	r3, r3, #30
 800aaa0:	d517      	bpl.n	800aad2 <WM__InvalidateDrawAndDescs+0x42>
 800aaa2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800aaa4:	b140      	cbz	r0, 800aab8 <WM__InvalidateDrawAndDescs+0x28>
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <WM__InvalidateDrawAndDescs+0x4c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	429c      	cmp	r4, r3
 800aaac:	d004      	beq.n	800aab8 <WM__InvalidateDrawAndDescs+0x28>
 800aaae:	f001 f9c5 	bl	800be3c <GUI_MEMDEV_Delete>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	625a      	str	r2, [r3, #36]	; 0x24
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fc4f 	bl	800b35c <WM_GetFirstChild>
 800aabe:	4604      	mov	r4, r0
 800aac0:	b13c      	cbz	r4, 800aad2 <WM__InvalidateDrawAndDescs+0x42>
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff ffe4 	bl	800aa90 <WM__InvalidateDrawAndDescs>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7fb fe41 	bl	8006750 <GUI_ALLOC_h2p>
 800aace:	6a04      	ldr	r4, [r0, #32]
 800aad0:	e7f6      	b.n	800aac0 <WM__InvalidateDrawAndDescs+0x30>
 800aad2:	a801      	add	r0, sp, #4
 800aad4:	f7fb fe54 	bl	8006780 <GUI_ALLOC_UnlockH>
 800aad8:	b002      	add	sp, #8
 800aada:	bd10      	pop	{r4, pc}
 800aadc:	20008450 	.word	0x20008450

0800aae0 <WM__RectIsNZ>:
 800aae0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800aae4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	dc08      	bgt.n	800aafe <WM__RectIsNZ+0x1e>
 800aaec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800aaf0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800aaf4:	4283      	cmp	r3, r0
 800aaf6:	bfcc      	ite	gt
 800aaf8:	2000      	movgt	r0, #0
 800aafa:	2001      	movle	r0, #1
 800aafc:	4770      	bx	lr
 800aafe:	2000      	movs	r0, #0
 800ab00:	4770      	bx	lr

0800ab02 <WM__SendMsgNoData>:
 800ab02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab04:	ab04      	add	r3, sp, #16
 800ab06:	9001      	str	r0, [sp, #4]
 800ab08:	f843 1d10 	str.w	r1, [r3, #-16]!
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	f000 fca3 	bl	800b458 <WM__SendMessage>
 800ab12:	b005      	add	sp, #20
 800ab14:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab18 <WM__GetClientRectWin>:
 800ab18:	2300      	movs	r3, #0
 800ab1a:	800b      	strh	r3, [r1, #0]
 800ab1c:	8802      	ldrh	r2, [r0, #0]
 800ab1e:	804b      	strh	r3, [r1, #2]
 800ab20:	8883      	ldrh	r3, [r0, #4]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	808b      	strh	r3, [r1, #4]
 800ab26:	8842      	ldrh	r2, [r0, #2]
 800ab28:	88c3      	ldrh	r3, [r0, #6]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	80cb      	strh	r3, [r1, #6]
 800ab2e:	4770      	bx	lr

0800ab30 <WM__GetTopLevelLayer>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	f7fb fe0c 	bl	8006750 <GUI_ALLOC_h2p>
 800ab38:	6980      	ldr	r0, [r0, #24]
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d1f9      	bne.n	800ab32 <WM__GetTopLevelLayer+0x2>
 800ab3e:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <WM__GetTopLevelLayer+0x24>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4294      	cmp	r4, r2
 800ab44:	d005      	beq.n	800ab52 <WM__GetTopLevelLayer+0x22>
 800ab46:	6858      	ldr	r0, [r3, #4]
 800ab48:	4284      	cmp	r4, r0
 800ab4a:	bf0c      	ite	eq
 800ab4c:	2001      	moveq	r0, #1
 800ab4e:	f04f 30ff 	movne.w	r0, #4294967295
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	20008404 	.word	0x20008404

0800ab58 <_Invalidate1Abs>:
 800ab58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	4606      	mov	r6, r0
 800ab60:	4617      	mov	r7, r2
 800ab62:	f7fb fdf5 	bl	8006750 <GUI_ALLOC_h2p>
 800ab66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ab68:	9001      	str	r0, [sp, #4]
 800ab6a:	078b      	lsls	r3, r1, #30
 800ab6c:	d53e      	bpl.n	800abec <_Invalidate1Abs+0x94>
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f7ff ffb6 	bl	800aae0 <WM__RectIsNZ>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d039      	beq.n	800abec <_Invalidate1Abs+0x94>
 800ab78:	f640 0301 	movw	r3, #2049	; 0x801
 800ab7c:	400b      	ands	r3, r1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d034      	beq.n	800abec <_Invalidate1Abs+0x94>
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7fb fdee 	bl	8006764 <GUI_ALLOC_LockH>
 800ab88:	ac02      	add	r4, sp, #8
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	9001      	str	r0, [sp, #4]
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7fc fe02 	bl	800779a <GUI__IntersectRects>
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7ff ffa2 	bl	800aae0 <WM__RectIsNZ>
 800ab9c:	b318      	cbz	r0, 800abe6 <_Invalidate1Abs+0x8e>
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aba2:	f244 0120 	movw	r1, #16416	; 0x4020
 800aba6:	4011      	ands	r1, r2
 800aba8:	f103 0508 	add.w	r5, r3, #8
 800abac:	b129      	cbz	r1, 800abba <_Invalidate1Abs+0x62>
 800abae:	4622      	mov	r2, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	4628      	mov	r0, r5
 800abb4:	f7fc f842 	bl	8006c3c <GUI_MergeRect>
 800abb8:	e015      	b.n	800abe6 <_Invalidate1Abs+0x8e>
 800abba:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abbe:	433a      	orrs	r2, r7
 800abc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800abc4:	629a      	str	r2, [r3, #40]	; 0x28
 800abc6:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <_Invalidate1Abs+0x98>)
 800abc8:	8813      	ldrh	r3, [r2, #0]
 800abca:	4630      	mov	r0, r6
 800abcc:	3301      	adds	r3, #1
 800abce:	8013      	strh	r3, [r2, #0]
 800abd0:	f7ff ffae 	bl	800ab30 <WM__GetTopLevelLayer>
 800abd4:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <_Invalidate1Abs+0x9c>)
 800abd6:	2301      	movs	r3, #1
 800abd8:	fa03 f000 	lsl.w	r0, r3, r0
 800abdc:	6813      	ldr	r3, [r2, #0]
 800abde:	4303      	orrs	r3, r0
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	f7fc fdb5 	bl	8007750 <GUI_SignalEvent>
 800abe6:	a801      	add	r0, sp, #4
 800abe8:	f7fb fdca 	bl	8006780 <GUI_ALLOC_UnlockH>
 800abec:	b005      	add	sp, #20
 800abee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf0:	2000841c 	.word	0x2000841c
 800abf4:	2000842c 	.word	0x2000842c

0800abf8 <WM__Invalidate1Abs>:
 800abf8:	2220      	movs	r2, #32
 800abfa:	f7ff bfad 	b.w	800ab58 <_Invalidate1Abs>

0800abfe <WM_InvalidateWindowAndDescsEx>:
 800abfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac00:	460f      	mov	r7, r1
 800ac02:	b085      	sub	sp, #20
 800ac04:	4615      	mov	r5, r2
 800ac06:	4606      	mov	r6, r0
 800ac08:	b348      	cbz	r0, 800ac5e <WM_InvalidateWindowAndDescsEx+0x60>
 800ac0a:	f7fb fdab 	bl	8006764 <GUI_ALLOC_LockH>
 800ac0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ac10:	ac04      	add	r4, sp, #16
 800ac12:	079b      	lsls	r3, r3, #30
 800ac14:	4602      	mov	r2, r0
 800ac16:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800ac1a:	d403      	bmi.n	800ac24 <WM_InvalidateWindowAndDescsEx+0x26>
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7fb fdaf 	bl	8006780 <GUI_ALLOC_UnlockH>
 800ac22:	e01c      	b.n	800ac5e <WM_InvalidateWindowAndDescsEx+0x60>
 800ac24:	4639      	mov	r1, r7
 800ac26:	a802      	add	r0, sp, #8
 800ac28:	f7fc fdb7 	bl	800779a <GUI__IntersectRects>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d0f5      	beq.n	800ac1c <WM_InvalidateWindowAndDescsEx+0x1e>
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7fb fda5 	bl	8006780 <GUI_ALLOC_UnlockH>
 800ac36:	462a      	mov	r2, r5
 800ac38:	a902      	add	r1, sp, #8
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7ff ff8c 	bl	800ab58 <_Invalidate1Abs>
 800ac40:	4630      	mov	r0, r6
 800ac42:	f000 fb8b 	bl	800b35c <WM_GetFirstChild>
 800ac46:	4604      	mov	r4, r0
 800ac48:	b14c      	cbz	r4, 800ac5e <WM_InvalidateWindowAndDescsEx+0x60>
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	462a      	mov	r2, r5
 800ac4e:	a902      	add	r1, sp, #8
 800ac50:	f7ff ffd5 	bl	800abfe <WM_InvalidateWindowAndDescsEx>
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7fb fd7b 	bl	8006750 <GUI_ALLOC_h2p>
 800ac5a:	6a04      	ldr	r4, [r0, #32]
 800ac5c:	e7f4      	b.n	800ac48 <WM_InvalidateWindowAndDescsEx+0x4a>
 800ac5e:	b005      	add	sp, #20
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac62 <WM__InvalidateRect>:
 800ac62:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ac66:	4680      	mov	r8, r0
 800ac68:	4617      	mov	r7, r2
 800ac6a:	461d      	mov	r5, r3
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	b381      	cbz	r1, 800acd2 <WM__InvalidateRect+0x70>
 800ac70:	4608      	mov	r0, r1
 800ac72:	f7fb fd77 	bl	8006764 <GUI_ALLOC_LockH>
 800ac76:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ac78:	9001      	str	r0, [sp, #4]
 800ac7a:	07b3      	lsls	r3, r6, #30
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	d525      	bpl.n	800accc <WM__InvalidateRect+0x6a>
 800ac80:	4641      	mov	r1, r8
 800ac82:	a802      	add	r0, sp, #8
 800ac84:	f7fc fd89 	bl	800779a <GUI__IntersectRects>
 800ac88:	b300      	cbz	r0, 800accc <WM__InvalidateRect+0x6a>
 800ac8a:	f640 0301 	movw	r3, #2049	; 0x801
 800ac8e:	4033      	ands	r3, r6
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d107      	bne.n	800aca4 <WM__InvalidateRect+0x42>
 800ac94:	9901      	ldr	r1, [sp, #4]
 800ac96:	462b      	mov	r3, r5
 800ac98:	6a0a      	ldr	r2, [r1, #32]
 800ac9a:	6989      	ldr	r1, [r1, #24]
 800ac9c:	a802      	add	r0, sp, #8
 800ac9e:	f7ff ffe0 	bl	800ac62 <WM__InvalidateRect>
 800aca2:	e004      	b.n	800acae <WM__InvalidateRect+0x4c>
 800aca4:	462a      	mov	r2, r5
 800aca6:	a902      	add	r1, sp, #8
 800aca8:	4620      	mov	r0, r4
 800acaa:	f7ff ff55 	bl	800ab58 <_Invalidate1Abs>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	69dc      	ldr	r4, [r3, #28]
 800acb2:	b15c      	cbz	r4, 800accc <WM__InvalidateRect+0x6a>
 800acb4:	42bc      	cmp	r4, r7
 800acb6:	d009      	beq.n	800accc <WM__InvalidateRect+0x6a>
 800acb8:	4620      	mov	r0, r4
 800acba:	462a      	mov	r2, r5
 800acbc:	a902      	add	r1, sp, #8
 800acbe:	f7ff ff9e 	bl	800abfe <WM_InvalidateWindowAndDescsEx>
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7fb fd44 	bl	8006750 <GUI_ALLOC_h2p>
 800acc8:	6a04      	ldr	r4, [r0, #32]
 800acca:	e7f2      	b.n	800acb2 <WM__InvalidateRect+0x50>
 800accc:	a801      	add	r0, sp, #4
 800acce:	f7fb fd57 	bl	8006780 <GUI_ALLOC_UnlockH>
 800acd2:	b004      	add	sp, #16
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acd8 <WM__InvalidateRectEx>:
 800acd8:	2320      	movs	r3, #32
 800acda:	f7ff bfc2 	b.w	800ac62 <WM__InvalidateRect>

0800acde <WM_InvalidateRect>:
 800acde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace0:	460f      	mov	r7, r1
 800ace2:	b087      	sub	sp, #28
 800ace4:	4605      	mov	r5, r0
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d033      	beq.n	800ad52 <WM_InvalidateRect+0x74>
 800acea:	f7fb fd3b 	bl	8006764 <GUI_ALLOC_LockH>
 800acee:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800acf0:	9001      	str	r0, [sp, #4]
 800acf2:	07b2      	lsls	r2, r6, #30
 800acf4:	d52a      	bpl.n	800ad4c <WM_InvalidateRect+0x6e>
 800acf6:	c803      	ldmia	r0, {r0, r1}
 800acf8:	ac04      	add	r4, sp, #16
 800acfa:	03f3      	lsls	r3, r6, #15
 800acfc:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad00:	d502      	bpl.n	800ad08 <WM_InvalidateRect+0x2a>
 800ad02:	4628      	mov	r0, r5
 800ad04:	f7ff fec4 	bl	800aa90 <WM__InvalidateDrawAndDescs>
 800ad08:	b15f      	cbz	r7, 800ad22 <WM_InvalidateRect+0x44>
 800ad0a:	6838      	ldr	r0, [r7, #0]
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	ab02      	add	r3, sp, #8
 800ad10:	c303      	stmia	r3!, {r0, r1}
 800ad12:	a902      	add	r1, sp, #8
 800ad14:	9801      	ldr	r0, [sp, #4]
 800ad16:	f7ff fe67 	bl	800a9e8 <WM__Client2Screen>
 800ad1a:	a902      	add	r1, sp, #8
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7fc fd1f 	bl	8007760 <GUI__IntersectRect>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7ff fddd 	bl	800a8e4 <WM__ClipAtParentBorders>
 800ad2a:	b178      	cbz	r0, 800ad4c <WM_InvalidateRect+0x6e>
 800ad2c:	f640 0301 	movw	r3, #2049	; 0x801
 800ad30:	4033      	ands	r3, r6
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d106      	bne.n	800ad44 <WM_InvalidateRect+0x66>
 800ad36:	9b01      	ldr	r3, [sp, #4]
 800ad38:	4620      	mov	r0, r4
 800ad3a:	6a1a      	ldr	r2, [r3, #32]
 800ad3c:	6999      	ldr	r1, [r3, #24]
 800ad3e:	f7ff ffcb 	bl	800acd8 <WM__InvalidateRectEx>
 800ad42:	e003      	b.n	800ad4c <WM_InvalidateRect+0x6e>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7ff ff56 	bl	800abf8 <WM__Invalidate1Abs>
 800ad4c:	a801      	add	r0, sp, #4
 800ad4e:	f7fb fd17 	bl	8006780 <GUI_ALLOC_UnlockH>
 800ad52:	b007      	add	sp, #28
 800ad54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad56 <WM_InvalidateWindow>:
 800ad56:	2100      	movs	r1, #0
 800ad58:	f7ff bfc1 	b.w	800acde <WM_InvalidateRect>

0800ad5c <WM__SelectTopLevelLayer>:
 800ad5c:	b508      	push	{r3, lr}
 800ad5e:	f7ff fee7 	bl	800ab30 <WM__GetTopLevelLayer>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	db03      	blt.n	800ad6e <WM__SelectTopLevelLayer+0x12>
 800ad66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad6a:	f000 bed7 	b.w	800bb1c <GUI_SelectLayer>
 800ad6e:	bd08      	pop	{r3, pc}

0800ad70 <WM_SelectWindow>:
 800ad70:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <WM_SelectWindow+0x38>)
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800ad78:	4604      	mov	r4, r0
 800ad7a:	461d      	mov	r5, r3
 800ad7c:	b908      	cbnz	r0, 800ad82 <WM_SelectWindow+0x12>
 800ad7e:	4b0b      	ldr	r3, [pc, #44]	; (800adac <WM_SelectWindow+0x3c>)
 800ad80:	681c      	ldr	r4, [r3, #0]
 800ad82:	6494      	str	r4, [r2, #72]	; 0x48
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7ff ffe9 	bl	800ad5c <WM__SelectTopLevelLayer>
 800ad8a:	f7fd f829 	bl	8007de0 <LCD_SetClipRectMax>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7fb fcde 	bl	8006750 <GUI_ALLOC_h2p>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ad9a:	64da      	str	r2, [r3, #76]	; 0x4c
 800ad9c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ada0:	651a      	str	r2, [r3, #80]	; 0x50
 800ada2:	4630      	mov	r0, r6
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
 800ada6:	bf00      	nop
 800ada8:	20000014 	.word	0x20000014
 800adac:	20008420 	.word	0x20008420

0800adb0 <WM_CreateWindowAsChild>:
 800adb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adb8:	4698      	mov	r8, r3
 800adba:	4b4e      	ldr	r3, [pc, #312]	; (800aef4 <WM_CreateWindowAsChild+0x144>)
 800adbc:	4605      	mov	r5, r0
 800adbe:	460e      	mov	r6, r1
 800adc0:	4617      	mov	r7, r2
 800adc2:	f8d3 9000 	ldr.w	r9, [r3]
 800adc6:	f1ba 0f00 	cmp.w	sl, #0
 800adca:	d128      	bne.n	800ae1e <WM_CreateWindowAsChild+0x6e>
 800adcc:	4b4a      	ldr	r3, [pc, #296]	; (800aef8 <WM_CreateWindowAsChild+0x148>)
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b353      	cbz	r3, 800ae28 <WM_CreateWindowAsChild+0x78>
 800add2:	4b4a      	ldr	r3, [pc, #296]	; (800aefc <WM_CreateWindowAsChild+0x14c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	7c5a      	ldrb	r2, [r3, #17]
 800add8:	4b49      	ldr	r3, [pc, #292]	; (800af00 <WM_CreateWindowAsChild+0x150>)
 800adda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	2a01      	cmp	r2, #1
 800ade2:	d921      	bls.n	800ae28 <WM_CreateWindowAsChild+0x78>
 800ade4:	469a      	mov	sl, r3
 800ade6:	4650      	mov	r0, sl
 800ade8:	f7fb fcbc 	bl	8006764 <GUI_ALLOC_LockH>
 800adec:	f9b0 1000 	ldrsh.w	r1, [r0]
 800adf0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800adf4:	9001      	str	r0, [sp, #4]
 800adf6:	440d      	add	r5, r1
 800adf8:	4416      	add	r6, r2
 800adfa:	b91f      	cbnz	r7, 800ae04 <WM_CreateWindowAsChild+0x54>
 800adfc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ae00:	1a5f      	subs	r7, r3, r1
 800ae02:	3701      	adds	r7, #1
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	d105      	bne.n	800ae16 <WM_CreateWindowAsChild+0x66>
 800ae0a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ae0e:	ebc2 0803 	rsb	r8, r2, r3
 800ae12:	f108 0801 	add.w	r8, r8, #1
 800ae16:	a801      	add	r0, sp, #4
 800ae18:	f7fb fcb2 	bl	8006780 <GUI_ALLOC_UnlockH>
 800ae1c:	e004      	b.n	800ae28 <WM_CreateWindowAsChild+0x78>
 800ae1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ae22:	d1e0      	bne.n	800ade6 <WM_CreateWindowAsChild+0x36>
 800ae24:	f04f 0a00 	mov.w	sl, #0
 800ae28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ae2a:	302c      	adds	r0, #44	; 0x2c
 800ae2c:	f7fb fe2c 	bl	8006a88 <GUI_ALLOC_AllocZero>
 800ae30:	4604      	mov	r4, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d059      	beq.n	800aeea <WM_CreateWindowAsChild+0x13a>
 800ae36:	4a30      	ldr	r2, [pc, #192]	; (800aef8 <WM_CreateWindowAsChild+0x148>)
 800ae38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3a:	ea49 0903 	orr.w	r9, r9, r3
 800ae3e:	8813      	ldrh	r3, [r2, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	8013      	strh	r3, [r2, #0]
 800ae44:	f7fb fc8e 	bl	8006764 <GUI_ALLOC_LockH>
 800ae48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae4a:	6103      	str	r3, [r0, #16]
 800ae4c:	f10d 0b08 	add.w	fp, sp, #8
 800ae50:	4b2c      	ldr	r3, [pc, #176]	; (800af04 <WM_CreateWindowAsChild+0x154>)
 800ae52:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ae54:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800ae58:	ea09 0303 	and.w	r3, r9, r3
 800ae5c:	8005      	strh	r5, [r0, #0]
 800ae5e:	8046      	strh	r6, [r0, #2]
 800ae60:	443d      	add	r5, r7
 800ae62:	4446      	add	r6, r8
 800ae64:	4313      	orrs	r3, r2
 800ae66:	3d01      	subs	r5, #1
 800ae68:	3e01      	subs	r6, #1
 800ae6a:	6283      	str	r3, [r0, #40]	; 0x28
 800ae6c:	8085      	strh	r5, [r0, #4]
 800ae6e:	80c6      	strh	r6, [r0, #6]
 800ae70:	4658      	mov	r0, fp
 800ae72:	f7fb fc85 	bl	8006780 <GUI_ALLOC_UnlockH>
 800ae76:	4b24      	ldr	r3, [pc, #144]	; (800af08 <WM_CreateWindowAsChild+0x158>)
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	b148      	cbz	r0, 800ae90 <WM_CreateWindowAsChild+0xe0>
 800ae7c:	f7fb fc68 	bl	8006750 <GUI_ALLOC_h2p>
 800ae80:	4605      	mov	r5, r0
 800ae82:	4620      	mov	r0, r4
 800ae84:	f7fb fc64 	bl	8006750 <GUI_ALLOC_h2p>
 800ae88:	696b      	ldr	r3, [r5, #20]
 800ae8a:	6143      	str	r3, [r0, #20]
 800ae8c:	616c      	str	r4, [r5, #20]
 800ae8e:	e000      	b.n	800ae92 <WM_CreateWindowAsChild+0xe2>
 800ae90:	601c      	str	r4, [r3, #0]
 800ae92:	4651      	mov	r1, sl
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7ff fd51 	bl	800a93c <WM__InsertWindowIntoList>
 800ae9a:	f019 0f20 	tst.w	r9, #32
 800ae9e:	d002      	beq.n	800aea6 <WM_CreateWindowAsChild+0xf6>
 800aea0:	4620      	mov	r0, r4
 800aea2:	f7ff ff65 	bl	800ad70 <WM_SelectWindow>
 800aea6:	f019 0f01 	tst.w	r9, #1
 800aeaa:	bf1f      	itttt	ne
 800aeac:	4a17      	ldrne	r2, [pc, #92]	; (800af0c <WM_CreateWindowAsChild+0x15c>)
 800aeae:	6813      	ldrne	r3, [r2, #0]
 800aeb0:	3301      	addne	r3, #1
 800aeb2:	6013      	strne	r3, [r2, #0]
 800aeb4:	f019 0f40 	tst.w	r9, #64	; 0x40
 800aeb8:	d002      	beq.n	800aec0 <WM_CreateWindowAsChild+0x110>
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 fa5e 	bl	800b37c <WM_BringToBottom>
 800aec0:	f019 0f02 	tst.w	r9, #2
 800aec4:	d00d      	beq.n	800aee2 <WM_CreateWindowAsChild+0x132>
 800aec6:	4620      	mov	r0, r4
 800aec8:	f7fb fc4c 	bl	8006764 <GUI_ALLOC_LockH>
 800aecc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aece:	9000      	str	r0, [sp, #0]
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	6283      	str	r3, [r0, #40]	; 0x28
 800aed6:	4658      	mov	r0, fp
 800aed8:	f7fb fc52 	bl	8006780 <GUI_ALLOC_UnlockH>
 800aedc:	4620      	mov	r0, r4
 800aede:	f7ff ff3a 	bl	800ad56 <WM_InvalidateWindow>
 800aee2:	2101      	movs	r1, #1
 800aee4:	4620      	mov	r0, r4
 800aee6:	f7ff fe0c 	bl	800ab02 <WM__SendMsgNoData>
 800aeea:	4620      	mov	r0, r4
 800aeec:	b003      	add	sp, #12
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	bf00      	nop
 800aef4:	20008434 	.word	0x20008434
 800aef8:	200083fc 	.word	0x200083fc
 800aefc:	20000014 	.word	0x20000014
 800af00:	20008404 	.word	0x20008404
 800af04:	003f3f9f 	.word	0x003f3f9f
 800af08:	20008420 	.word	0x20008420
 800af0c:	20008454 	.word	0x20008454

0800af10 <WM__GetNextIVR>:
 800af10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800af14:	4f5d      	ldr	r7, [pc, #372]	; (800b08c <WM__GetNextIVR+0x17c>)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f000 80b1 	beq.w	800b084 <WM__GetNextIVR+0x174>
 800af22:	4a5b      	ldr	r2, [pc, #364]	; (800b090 <WM__GetNextIVR+0x180>)
 800af24:	6a13      	ldr	r3, [r2, #32]
 800af26:	2b01      	cmp	r3, #1
 800af28:	4614      	mov	r4, r2
 800af2a:	dd03      	ble.n	800af34 <WM__GetNextIVR+0x24>
 800af2c:	3b01      	subs	r3, #1
 800af2e:	6213      	str	r3, [r2, #32]
 800af30:	2000      	movs	r0, #0
 800af32:	e0a7      	b.n	800b084 <WM__GetNextIVR+0x174>
 800af34:	f102 0614 	add.w	r6, r2, #20
 800af38:	69d3      	ldr	r3, [r2, #28]
 800af3a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800af3e:	3301      	adds	r3, #1
 800af40:	ad02      	add	r5, sp, #8
 800af42:	61d3      	str	r3, [r2, #28]
 800af44:	e885 0003 	stmia.w	r5, {r0, r1}
 800af48:	b923      	cbnz	r3, 800af54 <WM__GetNextIVR+0x44>
 800af4a:	8993      	ldrh	r3, [r2, #12]
 800af4c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af50:	89d3      	ldrh	r3, [r2, #14]
 800af52:	e010      	b.n	800af76 <WM__GetNextIVR+0x66>
 800af54:	8b13      	ldrh	r3, [r2, #24]
 800af56:	8ad2      	ldrh	r2, [r2, #22]
 800af58:	f8ad 200a 	strh.w	r2, [sp, #10]
 800af5c:	3301      	adds	r3, #1
 800af5e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800af62:	b21b      	sxth	r3, r3
 800af64:	429a      	cmp	r2, r3
 800af66:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af6a:	da06      	bge.n	800af7a <WM__GetNextIVR+0x6a>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af72:	8b63      	ldrh	r3, [r4, #26]
 800af74:	3301      	adds	r3, #1
 800af76:	f8ad 300a 	strh.w	r3, [sp, #10]
 800af7a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800af7e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800af82:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800b090 <WM__GetNextIVR+0x180>
 800af86:	429a      	cmp	r2, r3
 800af88:	dd04      	ble.n	800af94 <WM__GetNextIVR+0x84>
 800af8a:	6a23      	ldr	r3, [r4, #32]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	2000      	movs	r0, #0
 800af90:	6223      	str	r3, [r4, #32]
 800af92:	e077      	b.n	800b084 <WM__GetNextIVR+0x174>
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800af98:	f7fb fbe4 	bl	8006764 <GUI_ALLOC_LockH>
 800af9c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800afa0:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800afa4:	9001      	str	r0, [sp, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d11c      	bne.n	800afe4 <WM__GetNextIVR+0xd4>
 800afaa:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800afae:	f8ad 300e 	strh.w	r3, [sp, #14]
 800afb2:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800afb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800afba:	4b34      	ldr	r3, [pc, #208]	; (800b08c <WM__GetNextIVR+0x17c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afc0:	b15a      	cbz	r2, 800afda <WM__GetNextIVR+0xca>
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7fb fbc4 	bl	8006750 <GUI_ALLOC_h2p>
 800afc8:	4680      	mov	r8, r0
 800afca:	2200      	movs	r2, #0
 800afcc:	4629      	mov	r1, r5
 800afce:	6a00      	ldr	r0, [r0, #32]
 800afd0:	f7ff fbb8 	bl	800a744 <_Findy1>
 800afd4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800afd8:	e7f2      	b.n	800afc0 <WM__GetNextIVR+0xb0>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	4629      	mov	r1, r5
 800afde:	69d8      	ldr	r0, [r3, #28]
 800afe0:	f7ff fbb0 	bl	800a744 <_Findy1>
 800afe4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800afe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aff0:	b16a      	cbz	r2, 800b00e <WM__GetNextIVR+0xfe>
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fb fbac 	bl	8006750 <GUI_ALLOC_h2p>
 800aff8:	2200      	movs	r2, #0
 800affa:	4680      	mov	r8, r0
 800affc:	4629      	mov	r1, r5
 800affe:	6a00      	ldr	r0, [r0, #32]
 800b000:	f7ff fbf3 	bl	800a7ea <_Findx0>
 800b004:	2800      	cmp	r0, #0
 800b006:	d1ed      	bne.n	800afe4 <WM__GetNextIVR+0xd4>
 800b008:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b00c:	e7f0      	b.n	800aff0 <WM__GetNextIVR+0xe0>
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	4629      	mov	r1, r5
 800b012:	69d8      	ldr	r0, [r3, #28]
 800b014:	f7ff fbe9 	bl	800a7ea <_Findx0>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1e3      	bne.n	800afe4 <WM__GetNextIVR+0xd4>
 800b01c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800b020:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800b024:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b028:	429a      	cmp	r2, r3
 800b02a:	dd07      	ble.n	800b03c <WM__GetNextIVR+0x12c>
 800b02c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b030:	e886 0003 	stmia.w	r6, {r0, r1}
 800b034:	a801      	add	r0, sp, #4
 800b036:	f7fb fba3 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b03a:	e797      	b.n	800af6c <WM__GetNextIVR+0x5c>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b040:	b152      	cbz	r2, 800b058 <WM__GetNextIVR+0x148>
 800b042:	4610      	mov	r0, r2
 800b044:	f7fb fb84 	bl	8006750 <GUI_ALLOC_h2p>
 800b048:	4607      	mov	r7, r0
 800b04a:	2200      	movs	r2, #0
 800b04c:	4629      	mov	r1, r5
 800b04e:	6a00      	ldr	r0, [r0, #32]
 800b050:	f7ff fc0e 	bl	800a870 <_Findx1>
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	e7f3      	b.n	800b040 <WM__GetNextIVR+0x130>
 800b058:	af04      	add	r7, sp, #16
 800b05a:	4629      	mov	r1, r5
 800b05c:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800b060:	69d8      	ldr	r0, [r3, #28]
 800b062:	f7ff fc05 	bl	800a870 <_Findx1>
 800b066:	4638      	mov	r0, r7
 800b068:	f7fb fb8a 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b06c:	69e2      	ldr	r2, [r4, #28]
 800b06e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b072:	429a      	cmp	r2, r3
 800b074:	dc89      	bgt.n	800af8a <WM__GetNextIVR+0x7a>
 800b076:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b07a:	e886 0003 	stmia.w	r6, {r0, r1}
 800b07e:	f7ff fce3 	bl	800aa48 <WM__ActivateClipRect>
 800b082:	2001      	movs	r0, #1
 800b084:	b004      	add	sp, #16
 800b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08a:	bf00      	nop
 800b08c:	20000014 	.word	0x20000014
 800b090:	200001bc 	.word	0x200001bc

0800b094 <WM__InitIVRSearch>:
 800b094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b098:	4e39      	ldr	r6, [pc, #228]	; (800b180 <WM__InitIVRSearch+0xec>)
 800b09a:	6832      	ldr	r2, [r6, #0]
 800b09c:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800b0a0:	b086      	sub	sp, #24
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	b913      	cbnz	r3, 800b0ac <WM__InitIVRSearch+0x18>
 800b0a6:	f7ff fccf 	bl	800aa48 <WM__ActivateClipRect>
 800b0aa:	e064      	b.n	800b176 <WM__InitIVRSearch+0xe2>
 800b0ac:	4f35      	ldr	r7, [pc, #212]	; (800b184 <WM__InitIVRSearch+0xf0>)
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	623b      	str	r3, [r7, #32]
 800b0b6:	463d      	mov	r5, r7
 800b0b8:	dc5d      	bgt.n	800b176 <WM__InitIVRSearch+0xe2>
 800b0ba:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800b0bc:	f7fb fb52 	bl	8006764 <GUI_ALLOC_LockH>
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c4:	61fb      	str	r3, [r7, #28]
 800b0c6:	4b30      	ldr	r3, [pc, #192]	; (800b188 <WM__InitIVRSearch+0xf4>)
 800b0c8:	9000      	str	r0, [sp, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	b113      	cbz	r3, 800b0d4 <WM__InitIVRSearch+0x40>
 800b0ce:	ab02      	add	r3, sp, #8
 800b0d0:	3008      	adds	r0, #8
 800b0d2:	e004      	b.n	800b0de <WM__InitIVRSearch+0x4a>
 800b0d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b0d6:	f013 0402 	ands.w	r4, r3, #2
 800b0da:	d00c      	beq.n	800b0f6 <WM__InitIVRSearch+0x62>
 800b0dc:	ab02      	add	r3, sp, #8
 800b0de:	c803      	ldmia	r0, {r0, r1}
 800b0e0:	ac02      	add	r4, sp, #8
 800b0e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b0e6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ea:	d00c      	beq.n	800b106 <WM__InitIVRSearch+0x72>
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7fc fb36 	bl	8007760 <GUI__IntersectRect>
 800b0f4:	e007      	b.n	800b106 <WM__InitIVRSearch+0x72>
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	4668      	mov	r0, sp
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	623b      	str	r3, [r7, #32]
 800b0fe:	f7fb fb3f 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b102:	4620      	mov	r0, r4
 800b104:	e038      	b.n	800b178 <WM__InitIVRSearch+0xe4>
 800b106:	6833      	ldr	r3, [r6, #0]
 800b108:	4f20      	ldr	r7, [pc, #128]	; (800b18c <WM__InitIVRSearch+0xf8>)
 800b10a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b10c:	b1c2      	cbz	r2, 800b140 <WM__InitIVRSearch+0xac>
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	6810      	ldr	r0, [r2, #0]
 800b112:	6851      	ldr	r1, [r2, #4]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	ab04      	add	r3, sp, #16
 800b118:	c303      	stmia	r3!, {r0, r1}
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	b133      	cbz	r3, 800b12c <WM__InitIVRSearch+0x98>
 800b11e:	a801      	add	r0, sp, #4
 800b120:	f7fb fb2e 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b124:	6838      	ldr	r0, [r7, #0]
 800b126:	f7fb fb1d 	bl	8006764 <GUI_ALLOC_LockH>
 800b12a:	9001      	str	r0, [sp, #4]
 800b12c:	a904      	add	r1, sp, #16
 800b12e:	9801      	ldr	r0, [sp, #4]
 800b130:	f7ff fc5a 	bl	800a9e8 <WM__Client2Screen>
 800b134:	4620      	mov	r0, r4
 800b136:	a904      	add	r1, sp, #16
 800b138:	f7fc fb12 	bl	8007760 <GUI__IntersectRect>
 800b13c:	a801      	add	r0, sp, #4
 800b13e:	e000      	b.n	800b142 <WM__InitIVRSearch+0xae>
 800b140:	4668      	mov	r0, sp
 800b142:	f7fb fb1d 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	b119      	cbz	r1, 800b152 <WM__InitIVRSearch+0xbe>
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff fbca 	bl	800a8e4 <WM__ClipAtParentBorders>
 800b150:	b128      	cbz	r0, 800b15e <WM__InitIVRSearch+0xca>
 800b152:	6833      	ldr	r3, [r6, #0]
 800b154:	4620      	mov	r0, r4
 800b156:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b158:	f7ff fbc4 	bl	800a8e4 <WM__ClipAtParentBorders>
 800b15c:	b918      	cbnz	r0, 800b166 <WM__InitIVRSearch+0xd2>
 800b15e:	6a2b      	ldr	r3, [r5, #32]
 800b160:	3b01      	subs	r3, #1
 800b162:	622b      	str	r3, [r5, #32]
 800b164:	e008      	b.n	800b178 <WM__InitIVRSearch+0xe4>
 800b166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b16a:	4b09      	ldr	r3, [pc, #36]	; (800b190 <WM__InitIVRSearch+0xfc>)
 800b16c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b170:	f7ff fece 	bl	800af10 <WM__GetNextIVR>
 800b174:	e000      	b.n	800b178 <WM__InitIVRSearch+0xe4>
 800b176:	2001      	movs	r0, #1
 800b178:	b006      	add	sp, #24
 800b17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17e:	bf00      	nop
 800b180:	20000014 	.word	0x20000014
 800b184:	200001bc 	.word	0x200001bc
 800b188:	20008430 	.word	0x20008430
 800b18c:	20008400 	.word	0x20008400
 800b190:	200001c8 	.word	0x200001c8

0800b194 <WM_Activate>:
 800b194:	4b02      	ldr	r3, [pc, #8]	; (800b1a0 <WM_Activate+0xc>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b19e:	4770      	bx	lr
 800b1a0:	20000014 	.word	0x20000014

0800b1a4 <WM_DefaultProc>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	6840      	ldr	r0, [r0, #4]
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	2b17      	cmp	r3, #23
 800b1ae:	d010      	beq.n	800b1d2 <WM_DefaultProc+0x2e>
 800b1b0:	dc07      	bgt.n	800b1c2 <WM_DefaultProc+0x1e>
 800b1b2:	2b0e      	cmp	r3, #14
 800b1b4:	d00f      	beq.n	800b1d6 <WM_DefaultProc+0x32>
 800b1b6:	2b14      	cmp	r3, #20
 800b1b8:	d115      	bne.n	800b1e6 <WM_DefaultProc+0x42>
 800b1ba:	68e1      	ldr	r1, [r4, #12]
 800b1bc:	f000 f972 	bl	800b4a4 <WM__GetClientRectEx>
 800b1c0:	e011      	b.n	800b1e6 <WM_DefaultProc+0x42>
 800b1c2:	2b22      	cmp	r3, #34	; 0x22
 800b1c4:	d00c      	beq.n	800b1e0 <WM_DefaultProc+0x3c>
 800b1c6:	2b28      	cmp	r3, #40	; 0x28
 800b1c8:	d10d      	bne.n	800b1e6 <WM_DefaultProc+0x42>
 800b1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ce:	f7ff bdc2 	b.w	800ad56 <WM_InvalidateWindow>
 800b1d2:	60e0      	str	r0, [r4, #12]
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1dc:	f000 b911 	b.w	800b402 <WM_SendToParent>
 800b1e0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b1e4:	e000      	b.n	800b1e8 <WM_DefaultProc+0x44>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60e3      	str	r3, [r4, #12]
 800b1ea:	bd10      	pop	{r4, pc}

0800b1ec <_cbBackWin>:
 800b1ec:	6803      	ldr	r3, [r0, #0]
 800b1ee:	2b0e      	cmp	r3, #14
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	d002      	beq.n	800b1fc <_cbBackWin+0x10>
 800b1f6:	2b0f      	cmp	r3, #15
 800b1f8:	d009      	beq.n	800b20e <_cbBackWin+0x22>
 800b1fa:	e020      	b.n	800b23e <_cbBackWin+0x52>
 800b1fc:	68c3      	ldr	r3, [r0, #12]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	2a01      	cmp	r2, #1
 800b202:	d121      	bne.n	800b248 <_cbBackWin+0x5c>
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20a:	f7fc b9f5 	b.w	80075f8 <GUI_StoreKey>
 800b20e:	4a0f      	ldr	r2, [pc, #60]	; (800b24c <_cbBackWin+0x60>)
 800b210:	6843      	ldr	r3, [r0, #4]
 800b212:	6811      	ldr	r1, [r2, #0]
 800b214:	428b      	cmp	r3, r1
 800b216:	d006      	beq.n	800b226 <_cbBackWin+0x3a>
 800b218:	6852      	ldr	r2, [r2, #4]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	bf0c      	ite	eq
 800b21e:	2301      	moveq	r3, #1
 800b220:	f04f 33ff 	movne.w	r3, #4294967295
 800b224:	e000      	b.n	800b228 <_cbBackWin+0x3c>
 800b226:	2300      	movs	r3, #0
 800b228:	4a09      	ldr	r2, [pc, #36]	; (800b250 <_cbBackWin+0x64>)
 800b22a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b22e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b232:	4298      	cmp	r0, r3
 800b234:	d003      	beq.n	800b23e <_cbBackWin+0x52>
 800b236:	f7fb fd84 	bl	8006d42 <GUI_SetBkColor>
 800b23a:	f7fb fe55 	bl	8006ee8 <GUI_Clear>
 800b23e:	4620      	mov	r0, r4
 800b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b244:	f7ff bfae 	b.w	800b1a4 <WM_DefaultProc>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	bf00      	nop
 800b24c:	20008404 	.word	0x20008404
 800b250:	20008438 	.word	0x20008438

0800b254 <WM_Init>:
 800b254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b258:	4d2a      	ldr	r5, [pc, #168]	; (800b304 <WM_Init+0xb0>)
 800b25a:	7828      	ldrb	r0, [r5, #0]
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d14d      	bne.n	800b2fc <WM_Init+0xa8>
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <WM_Init+0xb4>)
 800b262:	4e2a      	ldr	r6, [pc, #168]	; (800b30c <WM_Init+0xb8>)
 800b264:	6018      	str	r0, [r3, #0]
 800b266:	4b2a      	ldr	r3, [pc, #168]	; (800b310 <WM_Init+0xbc>)
 800b268:	4f2a      	ldr	r7, [pc, #168]	; (800b314 <WM_Init+0xc0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b340 <WM_Init+0xec>
 800b270:	6458      	str	r0, [r3, #68]	; 0x44
 800b272:	4b29      	ldr	r3, [pc, #164]	; (800b318 <WM_Init+0xc4>)
 800b274:	60a8      	str	r0, [r5, #8]
 800b276:	8018      	strh	r0, [r3, #0]
 800b278:	4b28      	ldr	r3, [pc, #160]	; (800b31c <WM_Init+0xc8>)
 800b27a:	4604      	mov	r4, r0
 800b27c:	8018      	strh	r0, [r3, #0]
 800b27e:	4620      	mov	r0, r4
 800b280:	f7fb ff1c 	bl	80070bc <GUI_DEVICE__GetpDriver>
 800b284:	b1a8      	cbz	r0, 800b2b2 <WM_Init+0x5e>
 800b286:	f04f 32ff 	mov.w	r2, #4294967295
 800b28a:	2302      	movs	r3, #2
 800b28c:	2100      	movs	r1, #0
 800b28e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b292:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800b296:	461a      	mov	r2, r3
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	9602      	str	r6, [sp, #8]
 800b29c:	4608      	mov	r0, r1
 800b29e:	f7ff fd87 	bl	800adb0 <WM_CreateWindowAsChild>
 800b2a2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b2a6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800b2aa:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800b2ae:	f7ff fd52 	bl	800ad56 <WM_InvalidateWindow>
 800b2b2:	3401      	adds	r4, #1
 800b2b4:	2c02      	cmp	r4, #2
 800b2b6:	d1e2      	bne.n	800b27e <WM_Init+0x2a>
 800b2b8:	4819      	ldr	r0, [pc, #100]	; (800b320 <WM_Init+0xcc>)
 800b2ba:	f000 f8eb 	bl	800b494 <WM__AddCriticalHandle>
 800b2be:	4819      	ldr	r0, [pc, #100]	; (800b324 <WM_Init+0xd0>)
 800b2c0:	f000 f8e8 	bl	800b494 <WM__AddCriticalHandle>
 800b2c4:	4818      	ldr	r0, [pc, #96]	; (800b328 <WM_Init+0xd4>)
 800b2c6:	f000 f8e5 	bl	800b494 <WM__AddCriticalHandle>
 800b2ca:	4818      	ldr	r0, [pc, #96]	; (800b32c <WM_Init+0xd8>)
 800b2cc:	f000 f8e2 	bl	800b494 <WM__AddCriticalHandle>
 800b2d0:	4817      	ldr	r0, [pc, #92]	; (800b330 <WM_Init+0xdc>)
 800b2d2:	f000 f8df 	bl	800b494 <WM__AddCriticalHandle>
 800b2d6:	4817      	ldr	r0, [pc, #92]	; (800b334 <WM_Init+0xe0>)
 800b2d8:	f000 f8dc 	bl	800b494 <WM__AddCriticalHandle>
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <WM_Init+0xc0>)
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	f7ff fd46 	bl	800ad70 <WM_SelectWindow>
 800b2e4:	f7ff ff56 	bl	800b194 <WM_Activate>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	702b      	strb	r3, [r5, #0]
 800b2ec:	4812      	ldr	r0, [pc, #72]	; (800b338 <WM_Init+0xe4>)
 800b2ee:	4b13      	ldr	r3, [pc, #76]	; (800b33c <WM_Init+0xe8>)
 800b2f0:	626b      	str	r3, [r5, #36]	; 0x24
 800b2f2:	b004      	add	sp, #16
 800b2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	f7fb becc 	b.w	8007094 <GUI__RegisterExit>
 800b2fc:	b004      	add	sp, #16
 800b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b302:	bf00      	nop
 800b304:	200001bc 	.word	0x200001bc
 800b308:	20008420 	.word	0x20008420
 800b30c:	0800b1ed 	.word	0x0800b1ed
 800b310:	20000014 	.word	0x20000014
 800b314:	20008404 	.word	0x20008404
 800b318:	2000841c 	.word	0x2000841c
 800b31c:	200083fc 	.word	0x200083fc
 800b320:	20008478 	.word	0x20008478
 800b324:	20008468 	.word	0x20008468
 800b328:	20008458 	.word	0x20008458
 800b32c:	20008480 	.word	0x20008480
 800b330:	20008470 	.word	0x20008470
 800b334:	20008460 	.word	0x20008460
 800b338:	200001e0 	.word	0x200001e0
 800b33c:	0800a6a9 	.word	0x0800a6a9
 800b340:	20008438 	.word	0x20008438

0800b344 <WM_GetDesktopWindow>:
 800b344:	4b03      	ldr	r3, [pc, #12]	; (800b354 <WM_GetDesktopWindow+0x10>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	7c5a      	ldrb	r2, [r3, #17]
 800b34a:	4b03      	ldr	r3, [pc, #12]	; (800b358 <WM_GetDesktopWindow+0x14>)
 800b34c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	20000014 	.word	0x20000014
 800b358:	20008404 	.word	0x20008404

0800b35c <WM_GetFirstChild>:
 800b35c:	b508      	push	{r3, lr}
 800b35e:	4603      	mov	r3, r0
 800b360:	b110      	cbz	r0, 800b368 <WM_GetFirstChild+0xc>
 800b362:	f7fb f9f5 	bl	8006750 <GUI_ALLOC_h2p>
 800b366:	69c3      	ldr	r3, [r0, #28]
 800b368:	4618      	mov	r0, r3
 800b36a:	bd08      	pop	{r3, pc}

0800b36c <WM_GetParent>:
 800b36c:	b508      	push	{r3, lr}
 800b36e:	4603      	mov	r3, r0
 800b370:	b110      	cbz	r0, 800b378 <WM_GetParent+0xc>
 800b372:	f7fb f9ed 	bl	8006750 <GUI_ALLOC_h2p>
 800b376:	6983      	ldr	r3, [r0, #24]
 800b378:	4618      	mov	r0, r3
 800b37a:	bd08      	pop	{r3, pc}

0800b37c <WM_BringToBottom>:
 800b37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b380:	4604      	mov	r4, r0
 800b382:	b087      	sub	sp, #28
 800b384:	2800      	cmp	r0, #0
 800b386:	d039      	beq.n	800b3fc <WM_BringToBottom+0x80>
 800b388:	f7fb f9ec 	bl	8006764 <GUI_ALLOC_LockH>
 800b38c:	4603      	mov	r3, r0
 800b38e:	9001      	str	r0, [sp, #4]
 800b390:	c803      	ldmia	r0, {r0, r1}
 800b392:	ad04      	add	r5, sp, #16
 800b394:	e885 0003 	stmia.w	r5, {r0, r1}
 800b398:	a801      	add	r0, sp, #4
 800b39a:	6a1e      	ldr	r6, [r3, #32]
 800b39c:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800b3a0:	f7fb f9ee 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 f843 	bl	800b430 <WM__GetPrevSibling>
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	b330      	cbz	r0, 800b3fc <WM_BringToBottom+0x80>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ffdc 	bl	800b36c <WM_GetParent>
 800b3b4:	f019 0f02 	tst.w	r9, #2
 800b3b8:	4680      	mov	r8, r0
 800b3ba:	d004      	beq.n	800b3c6 <WM_BringToBottom+0x4a>
 800b3bc:	4601      	mov	r1, r0
 800b3be:	4632      	mov	r2, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f7ff fc89 	bl	800acd8 <WM__InvalidateRectEx>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7fb f9cc 	bl	8006764 <GUI_ALLOC_LockH>
 800b3cc:	9001      	str	r0, [sp, #4]
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	f7fb f9c8 	bl	8006764 <GUI_ALLOC_LockH>
 800b3d4:	9003      	str	r0, [sp, #12]
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	f7fb f9c4 	bl	8006764 <GUI_ALLOC_LockH>
 800b3dc:	9b03      	ldr	r3, [sp, #12]
 800b3de:	9a01      	ldr	r2, [sp, #4]
 800b3e0:	69d9      	ldr	r1, [r3, #28]
 800b3e2:	6206      	str	r6, [r0, #32]
 800b3e4:	9002      	str	r0, [sp, #8]
 800b3e6:	6211      	str	r1, [r2, #32]
 800b3e8:	a801      	add	r0, sp, #4
 800b3ea:	61dc      	str	r4, [r3, #28]
 800b3ec:	f7fb f9c8 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b3f0:	a803      	add	r0, sp, #12
 800b3f2:	f7fb f9c5 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b3f6:	a802      	add	r0, sp, #8
 800b3f8:	f7fb f9c2 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b3fc:	b007      	add	sp, #28
 800b3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b402 <WM_SendToParent>:
 800b402:	b538      	push	{r3, r4, r5, lr}
 800b404:	4605      	mov	r5, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b141      	cbz	r1, 800b41c <WM_SendToParent+0x1a>
 800b40a:	f7ff ffaf 	bl	800b36c <WM_GetParent>
 800b40e:	b128      	cbz	r0, 800b41c <WM_SendToParent+0x1a>
 800b410:	60a5      	str	r5, [r4, #8]
 800b412:	4621      	mov	r1, r4
 800b414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b418:	f000 b81e 	b.w	800b458 <WM__SendMessage>
 800b41c:	bd38      	pop	{r3, r4, r5, pc}

0800b41e <WM__GetFirstSibling>:
 800b41e:	b508      	push	{r3, lr}
 800b420:	f7ff ffa4 	bl	800b36c <WM_GetParent>
 800b424:	b118      	cbz	r0, 800b42e <WM__GetFirstSibling+0x10>
 800b426:	f7fb f993 	bl	8006750 <GUI_ALLOC_h2p>
 800b42a:	69c0      	ldr	r0, [r0, #28]
 800b42c:	bd08      	pop	{r3, pc}
 800b42e:	bd08      	pop	{r3, pc}

0800b430 <WM__GetPrevSibling>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4605      	mov	r5, r0
 800b434:	f7ff fff3 	bl	800b41e <WM__GetFirstSibling>
 800b438:	4604      	mov	r4, r0
 800b43a:	b154      	cbz	r4, 800b452 <WM__GetPrevSibling+0x22>
 800b43c:	42ac      	cmp	r4, r5
 800b43e:	d007      	beq.n	800b450 <WM__GetPrevSibling+0x20>
 800b440:	4620      	mov	r0, r4
 800b442:	f7fb f985 	bl	8006750 <GUI_ALLOC_h2p>
 800b446:	6a03      	ldr	r3, [r0, #32]
 800b448:	429d      	cmp	r5, r3
 800b44a:	d002      	beq.n	800b452 <WM__GetPrevSibling+0x22>
 800b44c:	461c      	mov	r4, r3
 800b44e:	e7f4      	b.n	800b43a <WM__GetPrevSibling+0xa>
 800b450:	2400      	movs	r4, #0
 800b452:	4620      	mov	r0, r4
 800b454:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b458 <WM__SendMessage>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	4c0d      	ldr	r4, [pc, #52]	; (800b490 <WM__SendMessage+0x38>)
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	2b13      	cmp	r3, #19
 800b460:	4606      	mov	r6, r0
 800b462:	460d      	mov	r5, r1
 800b464:	dc12      	bgt.n	800b48c <WM__SendMessage+0x34>
 800b466:	f7fb f973 	bl	8006750 <GUI_ALLOC_h2p>
 800b46a:	6902      	ldr	r2, [r0, #16]
 800b46c:	606e      	str	r6, [r5, #4]
 800b46e:	b142      	cbz	r2, 800b482 <WM__SendMessage+0x2a>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	4628      	mov	r0, r5
 800b474:	3301      	adds	r3, #1
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	4790      	blx	r2
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	bd70      	pop	{r4, r5, r6, pc}
 800b482:	4628      	mov	r0, r5
 800b484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b488:	f7ff be8c 	b.w	800b1a4 <WM_DefaultProc>
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	bf00      	nop
 800b490:	200001ec 	.word	0x200001ec

0800b494 <WM__AddCriticalHandle>:
 800b494:	4b02      	ldr	r3, [pc, #8]	; (800b4a0 <WM__AddCriticalHandle+0xc>)
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	6002      	str	r2, [r0, #0]
 800b49a:	6018      	str	r0, [r3, #0]
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	20008440 	.word	0x20008440

0800b4a4 <WM__GetClientRectEx>:
 800b4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	b158      	cbz	r0, 800b4c2 <WM__GetClientRectEx+0x1e>
 800b4aa:	b151      	cbz	r1, 800b4c2 <WM__GetClientRectEx+0x1e>
 800b4ac:	f7fb f95a 	bl	8006764 <GUI_ALLOC_LockH>
 800b4b0:	ac02      	add	r4, sp, #8
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b4b8:	f7ff fb2e 	bl	800ab18 <WM__GetClientRectWin>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7fb f95f 	bl	8006780 <GUI_ALLOC_UnlockH>
 800b4c2:	b003      	add	sp, #12
 800b4c4:	bd30      	pop	{r4, r5, pc}

0800b4c6 <_GetIndexMask_0>:
 800b4c6:	b508      	push	{r3, lr}
 800b4c8:	f7fc fe3e 	bl	8008148 <LCD_GetNumColors>
 800b4cc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b4d0:	d010      	beq.n	800b4f4 <_GetIndexMask_0+0x2e>
 800b4d2:	287f      	cmp	r0, #127	; 0x7f
 800b4d4:	d810      	bhi.n	800b4f8 <_GetIndexMask_0+0x32>
 800b4d6:	283f      	cmp	r0, #63	; 0x3f
 800b4d8:	d810      	bhi.n	800b4fc <_GetIndexMask_0+0x36>
 800b4da:	281f      	cmp	r0, #31
 800b4dc:	d810      	bhi.n	800b500 <_GetIndexMask_0+0x3a>
 800b4de:	280f      	cmp	r0, #15
 800b4e0:	d810      	bhi.n	800b504 <_GetIndexMask_0+0x3e>
 800b4e2:	2807      	cmp	r0, #7
 800b4e4:	d810      	bhi.n	800b508 <_GetIndexMask_0+0x42>
 800b4e6:	2803      	cmp	r0, #3
 800b4e8:	d810      	bhi.n	800b50c <_GetIndexMask_0+0x46>
 800b4ea:	2801      	cmp	r0, #1
 800b4ec:	bf94      	ite	ls
 800b4ee:	2000      	movls	r0, #0
 800b4f0:	2001      	movhi	r0, #1
 800b4f2:	e00c      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b4f4:	2008      	movs	r0, #8
 800b4f6:	e00a      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b4f8:	2007      	movs	r0, #7
 800b4fa:	e008      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b4fc:	2006      	movs	r0, #6
 800b4fe:	e006      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b500:	2005      	movs	r0, #5
 800b502:	e004      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b504:	2004      	movs	r0, #4
 800b506:	e002      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b508:	2003      	movs	r0, #3
 800b50a:	e000      	b.n	800b50e <_GetIndexMask_0+0x48>
 800b50c:	2002      	movs	r0, #2
 800b50e:	2301      	movs	r3, #1
 800b510:	fa03 f000 	lsl.w	r0, r3, r0
 800b514:	3801      	subs	r0, #1
 800b516:	bd08      	pop	{r3, pc}

0800b518 <_Index2Color_0>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4604      	mov	r4, r0
 800b51c:	f7fc fe14 	bl	8008148 <LCD_GetNumColors>
 800b520:	4605      	mov	r5, r0
 800b522:	f7fc fe2f 	bl	8008184 <LCD_GetPalette>
 800b526:	42a5      	cmp	r5, r4
 800b528:	d903      	bls.n	800b532 <_Index2Color_0+0x1a>
 800b52a:	b118      	cbz	r0, 800b534 <_Index2Color_0+0x1c>
 800b52c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b530:	bd38      	pop	{r3, r4, r5, pc}
 800b532:	2000      	movs	r0, #0
 800b534:	bd38      	pop	{r3, r4, r5, pc}

0800b536 <_Color2Index_0>:
 800b536:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53a:	4681      	mov	r9, r0
 800b53c:	f7fc fe04 	bl	8008148 <LCD_GetNumColors>
 800b540:	4607      	mov	r7, r0
 800b542:	f7fc fe1f 	bl	8008184 <LCD_GetPalette>
 800b546:	4606      	mov	r6, r0
 800b548:	b1e0      	cbz	r0, 800b584 <_Color2Index_0+0x4e>
 800b54a:	2000      	movs	r0, #0
 800b54c:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 800b550:	454b      	cmp	r3, r9
 800b552:	d017      	beq.n	800b584 <_Color2Index_0+0x4e>
 800b554:	3001      	adds	r0, #1
 800b556:	4287      	cmp	r7, r0
 800b558:	dcf8      	bgt.n	800b54c <_Color2Index_0+0x16>
 800b55a:	2400      	movs	r4, #0
 800b55c:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800b560:	4625      	mov	r5, r4
 800b562:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800b566:	4648      	mov	r0, r9
 800b568:	f7fb fb26 	bl	8006bb8 <GUI_CalcColorDist>
 800b56c:	4580      	cmp	r8, r0
 800b56e:	bf88      	it	hi
 800b570:	462c      	movhi	r4, r5
 800b572:	f105 0501 	add.w	r5, r5, #1
 800b576:	bf88      	it	hi
 800b578:	4680      	movhi	r8, r0
 800b57a:	42af      	cmp	r7, r5
 800b57c:	dcf1      	bgt.n	800b562 <_Color2Index_0+0x2c>
 800b57e:	4620      	mov	r0, r4
 800b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b588 <GUI_GetYAdjust>:
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <GUI_GetYAdjust+0x2c>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800b58e:	f003 030c 	and.w	r3, r3, #12
 800b592:	2b08      	cmp	r3, #8
 800b594:	d007      	beq.n	800b5a6 <GUI_GetYAdjust+0x1e>
 800b596:	2b0c      	cmp	r3, #12
 800b598:	d005      	beq.n	800b5a6 <GUI_GetYAdjust+0x1e>
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d107      	bne.n	800b5ae <GUI_GetYAdjust+0x26>
 800b59e:	69d3      	ldr	r3, [r2, #28]
 800b5a0:	7e18      	ldrb	r0, [r3, #24]
 800b5a2:	3801      	subs	r0, #1
 800b5a4:	4770      	bx	lr
 800b5a6:	69d3      	ldr	r3, [r2, #28]
 800b5a8:	7e18      	ldrb	r0, [r3, #24]
 800b5aa:	0840      	lsrs	r0, r0, #1
 800b5ac:	4770      	bx	lr
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000014 	.word	0x20000014

0800b5b8 <GUI_GetFontDistY>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <GUI_GetFontDistY+0xc>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	7e58      	ldrb	r0, [r3, #25]
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	20000014 	.word	0x20000014

0800b5c8 <GUI_DispNextLine>:
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	f7ff fff5 	bl	800b5b8 <GUI_GetFontDistY>
 800b5ce:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <GUI_DispNextLine+0x18>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b5d4:	4410      	add	r0, r2
 800b5d6:	8c1a      	ldrh	r2, [r3, #32]
 800b5d8:	8498      	strh	r0, [r3, #36]	; 0x24
 800b5da:	845a      	strh	r2, [r3, #34]	; 0x22
 800b5dc:	bd08      	pop	{r3, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000014 	.word	0x20000014

0800b5e4 <GL_DispChar>:
 800b5e4:	280a      	cmp	r0, #10
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	d103      	bne.n	800b5f4 <GL_DispChar+0x10>
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f0:	f7ff bfea 	b.w	800b5c8 <GUI_DispNextLine>
 800b5f4:	280d      	cmp	r0, #13
 800b5f6:	d00b      	beq.n	800b610 <GL_DispChar+0x2c>
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <GL_DispChar+0x30>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4798      	blx	r3
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <GL_DispChar+0x34>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	b11b      	cbz	r3, 800b610 <GL_DispChar+0x2c>
 800b608:	4620      	mov	r0, r4
 800b60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b60e:	4718      	bx	r3
 800b610:	bd10      	pop	{r4, pc}
 800b612:	bf00      	nop
 800b614:	20000014 	.word	0x20000014
 800b618:	200083c4 	.word	0x200083c4

0800b61c <GUI_GetCharDistX>:
 800b61c:	4b02      	ldr	r3, [pc, #8]	; (800b628 <GUI_GetCharDistX+0xc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	2100      	movs	r1, #0
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	4718      	bx	r3
 800b628:	20000014 	.word	0x20000014

0800b62c <GUI_GetCharDistXEx>:
 800b62c:	4b02      	ldr	r3, [pc, #8]	; (800b638 <GUI_GetCharDistXEx+0xc>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	4718      	bx	r3
 800b636:	bf00      	nop
 800b638:	20000014 	.word	0x20000014

0800b63c <_Log2VisBuffered>:
 800b63c:	4770      	bx	lr
	...

0800b640 <_DispLine>:
 800b640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b642:	ab02      	add	r3, sp, #8
 800b644:	4615      	mov	r5, r2
 800b646:	f843 1d08 	str.w	r1, [r3, #-8]!
 800b64a:	4a20      	ldr	r2, [pc, #128]	; (800b6cc <_DispLine+0x8c>)
 800b64c:	9001      	str	r0, [sp, #4]
 800b64e:	4619      	mov	r1, r3
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	4c1f      	ldr	r4, [pc, #124]	; (800b6d0 <_DispLine+0x90>)
 800b654:	4790      	blx	r2
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	9001      	str	r0, [sp, #4]
 800b65a:	6958      	ldr	r0, [r3, #20]
 800b65c:	b940      	cbnz	r0, 800b670 <_DispLine+0x30>
 800b65e:	2001      	movs	r0, #1
 800b660:	f000 fbb6 	bl	800bdd0 <GUI__ManageCache>
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	69d3      	ldr	r3, [r2, #28]
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	b93b      	cbnz	r3, 800b67c <_DispLine+0x3c>
 800b66c:	4d19      	ldr	r5, [pc, #100]	; (800b6d4 <_DispLine+0x94>)
 800b66e:	e022      	b.n	800b6b6 <_DispLine+0x76>
 800b670:	4629      	mov	r1, r5
 800b672:	f7fb fb27 	bl	8006cc4 <GUI_RectsIntersect>
 800b676:	2800      	cmp	r0, #0
 800b678:	d1f1      	bne.n	800b65e <_DispLine+0x1e>
 800b67a:	e024      	b.n	800b6c6 <_DispLine+0x86>
 800b67c:	4c16      	ldr	r4, [pc, #88]	; (800b6d8 <_DispLine+0x98>)
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	6821      	ldr	r1, [r4, #0]
 800b682:	b141      	cbz	r1, 800b696 <_DispLine+0x56>
 800b684:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800b688:	9801      	ldr	r0, [sp, #4]
 800b68a:	9900      	ldr	r1, [sp, #0]
 800b68c:	4798      	blx	r3
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	4628      	mov	r0, r5
 800b692:	4798      	blx	r3
 800b694:	e014      	b.n	800b6c0 <_DispLine+0x80>
 800b696:	9900      	ldr	r1, [sp, #0]
 800b698:	9801      	ldr	r0, [sp, #4]
 800b69a:	4798      	blx	r3
 800b69c:	e010      	b.n	800b6c0 <_DispLine+0x80>
 800b69e:	a801      	add	r0, sp, #4
 800b6a0:	f7fb ffb2 	bl	8007608 <GUI_UC__GetCharCodeInc>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	4798      	blx	r3
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	b10b      	cbz	r3, 800b6b6 <_DispLine+0x76>
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4798      	blx	r3
 800b6b6:	9b00      	ldr	r3, [sp, #0]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	daee      	bge.n	800b69e <_DispLine+0x5e>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f000 fb85 	bl	800bdd0 <GUI__ManageCache>
 800b6c6:	b002      	add	sp, #8
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000030 	.word	0x20000030
 800b6d0:	20000014 	.word	0x20000014
 800b6d4:	200083c4 	.word	0x200083c4
 800b6d8:	200083b8 	.word	0x200083b8

0800b6dc <GUI__GetLineNumChars>:
 800b6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6de:	460d      	mov	r5, r1
 800b6e0:	9001      	str	r0, [sp, #4]
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	b188      	cbz	r0, 800b70a <GUI__GetLineNumChars+0x2e>
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <GUI__GetLineNumChars+0x34>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69db      	ldr	r3, [r3, #28]
 800b6ec:	695c      	ldr	r4, [r3, #20]
 800b6ee:	b154      	cbz	r4, 800b706 <GUI__GetLineNumChars+0x2a>
 800b6f0:	6864      	ldr	r4, [r4, #4]
 800b6f2:	b144      	cbz	r4, 800b706 <GUI__GetLineNumChars+0x2a>
 800b6f4:	47a0      	blx	r4
 800b6f6:	e009      	b.n	800b70c <GUI__GetLineNumChars+0x30>
 800b6f8:	a801      	add	r0, sp, #4
 800b6fa:	f7fb ff85 	bl	8007608 <GUI_UC__GetCharCodeInc>
 800b6fe:	b120      	cbz	r0, 800b70a <GUI__GetLineNumChars+0x2e>
 800b700:	280a      	cmp	r0, #10
 800b702:	d002      	beq.n	800b70a <GUI__GetLineNumChars+0x2e>
 800b704:	3401      	adds	r4, #1
 800b706:	42ac      	cmp	r4, r5
 800b708:	dbf6      	blt.n	800b6f8 <GUI__GetLineNumChars+0x1c>
 800b70a:	4620      	mov	r0, r4
 800b70c:	b003      	add	sp, #12
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	20000014 	.word	0x20000014

0800b714 <GUI__GetOverlap>:
 800b714:	b513      	push	{r0, r1, r4, lr}
 800b716:	a902      	add	r1, sp, #8
 800b718:	2400      	movs	r4, #0
 800b71a:	f841 4d04 	str.w	r4, [r1, #-4]!
 800b71e:	f7ff ff85 	bl	800b62c <GUI_GetCharDistXEx>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	4298      	cmp	r0, r3
 800b726:	bfb4      	ite	lt
 800b728:	1a18      	sublt	r0, r3, r0
 800b72a:	4620      	movge	r0, r4
 800b72c:	b002      	add	sp, #8
 800b72e:	bd10      	pop	{r4, pc}

0800b730 <GUI__GetLineDistX>:
 800b730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b732:	ab02      	add	r3, sp, #8
 800b734:	4a14      	ldr	r2, [pc, #80]	; (800b788 <GUI__GetLineDistX+0x58>)
 800b736:	f843 1d08 	str.w	r1, [r3, #-8]!
 800b73a:	9001      	str	r0, [sp, #4]
 800b73c:	6812      	ldr	r2, [r2, #0]
 800b73e:	4619      	mov	r1, r3
 800b740:	4790      	blx	r2
 800b742:	9001      	str	r0, [sp, #4]
 800b744:	b1e8      	cbz	r0, 800b782 <GUI__GetLineDistX+0x52>
 800b746:	4b11      	ldr	r3, [pc, #68]	; (800b78c <GUI__GetLineDistX+0x5c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	695c      	ldr	r4, [r3, #20]
 800b74e:	b10c      	cbz	r4, 800b754 <GUI__GetLineDistX+0x24>
 800b750:	6824      	ldr	r4, [r4, #0]
 800b752:	b90c      	cbnz	r4, 800b758 <GUI__GetLineDistX+0x28>
 800b754:	4625      	mov	r5, r4
 800b756:	e002      	b.n	800b75e <GUI__GetLineDistX+0x2e>
 800b758:	9900      	ldr	r1, [sp, #0]
 800b75a:	47a0      	blx	r4
 800b75c:	e011      	b.n	800b782 <GUI__GetLineDistX+0x52>
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	3b01      	subs	r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	db07      	blt.n	800b778 <GUI__GetLineDistX+0x48>
 800b768:	a801      	add	r0, sp, #4
 800b76a:	f7fb ff4d 	bl	8007608 <GUI_UC__GetCharCodeInc>
 800b76e:	4604      	mov	r4, r0
 800b770:	f7ff ff54 	bl	800b61c <GUI_GetCharDistX>
 800b774:	4405      	add	r5, r0
 800b776:	e7f2      	b.n	800b75e <GUI__GetLineDistX+0x2e>
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff ffcb 	bl	800b714 <GUI__GetOverlap>
 800b77e:	4428      	add	r0, r5
 800b780:	e7ff      	b.n	800b782 <GUI__GetLineDistX+0x52>
 800b782:	b003      	add	sp, #12
 800b784:	bd30      	pop	{r4, r5, pc}
 800b786:	bf00      	nop
 800b788:	20000030 	.word	0x20000030
 800b78c:	20000014 	.word	0x20000014

0800b790 <GUI__DispLine>:
 800b790:	4b27      	ldr	r3, [pc, #156]	; (800b830 <GUI__DispLine+0xa0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b796:	4605      	mov	r5, r0
 800b798:	460e      	mov	r6, r1
 800b79a:	b163      	cbz	r3, 800b7b6 <GUI__DispLine+0x26>
 800b79c:	2000      	movs	r0, #0
 800b79e:	f7ff fc79 	bl	800b094 <WM__InitIVRSearch>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d041      	beq.n	800b82a <GUI__DispLine+0x9a>
 800b7a6:	466a      	mov	r2, sp
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7ff ff48 	bl	800b640 <_DispLine>
 800b7b0:	f7ff fbae 	bl	800af10 <WM__GetNextIVR>
 800b7b4:	e7f5      	b.n	800b7a2 <GUI__DispLine+0x12>
 800b7b6:	6810      	ldr	r0, [r2, #0]
 800b7b8:	6851      	ldr	r1, [r2, #4]
 800b7ba:	4c1e      	ldr	r4, [pc, #120]	; (800b834 <GUI__DispLine+0xa4>)
 800b7bc:	466b      	mov	r3, sp
 800b7be:	c303      	stmia	r3!, {r0, r1}
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7c6:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 800b7ca:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b7ce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800b7d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800b7d6:	443b      	add	r3, r7
 800b7d8:	f8ad 3000 	strh.w	r3, [sp]
 800b7dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b7e0:	4401      	add	r1, r0
 800b7e2:	4403      	add	r3, r0
 800b7e4:	443a      	add	r2, r7
 800b7e6:	4668      	mov	r0, sp
 800b7e8:	f8ad 1002 	strh.w	r1, [sp, #2]
 800b7ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b7f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7f4:	f7ff fc4e 	bl	800b094 <WM__InitIVRSearch>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	b940      	cbnz	r0, 800b80e <GUI__DispLine+0x7e>
 800b7fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b7fe:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b800:	1a52      	subs	r2, r2, r1
 800b802:	845a      	strh	r2, [r3, #34]	; 0x22
 800b804:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b806:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b808:	1a52      	subs	r2, r2, r1
 800b80a:	849a      	strh	r2, [r3, #36]	; 0x24
 800b80c:	e00d      	b.n	800b82a <GUI__DispLine+0x9a>
 800b80e:	f8bd 2000 	ldrh.w	r2, [sp]
 800b812:	845a      	strh	r2, [r3, #34]	; 0x22
 800b814:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b818:	849a      	strh	r2, [r3, #36]	; 0x24
 800b81a:	4631      	mov	r1, r6
 800b81c:	466a      	mov	r2, sp
 800b81e:	4628      	mov	r0, r5
 800b820:	f7ff ff0e 	bl	800b640 <_DispLine>
 800b824:	f7ff fb74 	bl	800af10 <WM__GetNextIVR>
 800b828:	e7e6      	b.n	800b7f8 <GUI__DispLine+0x68>
 800b82a:	b003      	add	sp, #12
 800b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b82e:	bf00      	nop
 800b830:	200083a4 	.word	0x200083a4
 800b834:	20000014 	.word	0x20000014

0800b838 <GUIMONO_DispChar>:
 800b838:	4b4d      	ldr	r3, [pc, #308]	; (800b970 <GUIMONO_DispChar+0x138>)
 800b83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	69d1      	ldr	r1, [r2, #28]
 800b842:	69cc      	ldr	r4, [r1, #28]
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	4283      	cmp	r3, r0
 800b848:	b08b      	sub	sp, #44	; 0x2c
 800b84a:	d808      	bhi.n	800b85e <GUIMONO_DispChar+0x26>
 800b84c:	89e5      	ldrh	r5, [r4, #14]
 800b84e:	4285      	cmp	r5, r0
 800b850:	d305      	bcc.n	800b85e <GUIMONO_DispChar+0x26>
 800b852:	6825      	ldr	r5, [r4, #0]
 800b854:	9506      	str	r5, [sp, #24]
 800b856:	1ac3      	subs	r3, r0, r3
 800b858:	f04f 36ff 	mov.w	r6, #4294967295
 800b85c:	e013      	b.n	800b886 <GUIMONO_DispChar+0x4e>
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d07c      	beq.n	800b95e <GUIMONO_DispChar+0x126>
 800b864:	881d      	ldrh	r5, [r3, #0]
 800b866:	42a8      	cmp	r0, r5
 800b868:	d379      	bcc.n	800b95e <GUIMONO_DispChar+0x126>
 800b86a:	885e      	ldrh	r6, [r3, #2]
 800b86c:	4286      	cmp	r6, r0
 800b86e:	d376      	bcc.n	800b95e <GUIMONO_DispChar+0x126>
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	6866      	ldr	r6, [r4, #4]
 800b874:	9606      	str	r6, [sp, #24]
 800b876:	1b40      	subs	r0, r0, r5
 800b878:	b280      	uxth	r0, r0
 800b87a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800b87e:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 800b882:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	1c58      	adds	r0, r3, #1
 800b88a:	d068      	beq.n	800b95e <GUIMONO_DispChar+0x126>
 800b88c:	f891 b018 	ldrb.w	fp, [r1, #24]
 800b890:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 800b894:	7ca1      	ldrb	r1, [r4, #18]
 800b896:	4d36      	ldr	r5, [pc, #216]	; (800b970 <GUIMONO_DispChar+0x138>)
 800b898:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 800b89c:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 800b8a0:	f894 a010 	ldrb.w	sl, [r4, #16]
 800b8a4:	fb1b f301 	smulbb	r3, fp, r1
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	9307      	str	r3, [sp, #28]
 800b8ac:	f7fb ffe6 	bl	800787c <LCD_SetDrawMode>
 800b8b0:	6829      	ldr	r1, [r5, #0]
 800b8b2:	9b07      	ldr	r3, [sp, #28]
 800b8b4:	69ca      	ldr	r2, [r1, #28]
 800b8b6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800b8b8:	9105      	str	r1, [sp, #20]
 800b8ba:	9008      	str	r0, [sp, #32]
 800b8bc:	9906      	ldr	r1, [sp, #24]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	fb00 1003 	mla	r0, r0, r3, r1
 800b8c6:	9004      	str	r0, [sp, #16]
 800b8c8:	7ca3      	ldrb	r3, [r4, #18]
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	7ed3      	ldrb	r3, [r2, #27]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	7e93      	ldrb	r3, [r2, #26]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	4652      	mov	r2, sl
 800b8da:	465b      	mov	r3, fp
 800b8dc:	4641      	mov	r1, r8
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7fc f96c 	bl	8007bbc <LCD_DrawBitmap>
 800b8e4:	1c73      	adds	r3, r6, #1
 800b8e6:	d01a      	beq.n	800b91e <GUIMONO_DispChar+0xe6>
 800b8e8:	f049 0002 	orr.w	r0, r9, #2
 800b8ec:	f7fb ffc6 	bl	800787c <LCD_SetDrawMode>
 800b8f0:	682a      	ldr	r2, [r5, #0]
 800b8f2:	9906      	ldr	r1, [sp, #24]
 800b8f4:	69d3      	ldr	r3, [r2, #28]
 800b8f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b8f8:	9205      	str	r2, [sp, #20]
 800b8fa:	9a07      	ldr	r2, [sp, #28]
 800b8fc:	fb02 1606 	mla	r6, r2, r6, r1
 800b900:	9604      	str	r6, [sp, #16]
 800b902:	7ca2      	ldrb	r2, [r4, #18]
 800b904:	9203      	str	r2, [sp, #12]
 800b906:	2201      	movs	r2, #1
 800b908:	9202      	str	r2, [sp, #8]
 800b90a:	7eda      	ldrb	r2, [r3, #27]
 800b90c:	9201      	str	r2, [sp, #4]
 800b90e:	7e9b      	ldrb	r3, [r3, #26]
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4652      	mov	r2, sl
 800b914:	465b      	mov	r3, fp
 800b916:	4641      	mov	r1, r8
 800b918:	4638      	mov	r0, r7
 800b91a:	f7fc f94f 	bl	8007bbc <LCD_DrawBitmap>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	7e5a      	ldrb	r2, [r3, #25]
 800b924:	7e1b      	ldrb	r3, [r3, #24]
 800b926:	429a      	cmp	r2, r3
 800b928:	d915      	bls.n	800b956 <GUIMONO_DispChar+0x11e>
 800b92a:	f1b9 0f02 	cmp.w	r9, #2
 800b92e:	d012      	beq.n	800b956 <GUIMONO_DispChar+0x11e>
 800b930:	f089 0004 	eor.w	r0, r9, #4
 800b934:	f7fb ffa2 	bl	800787c <LCD_SetDrawMode>
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <GUIMONO_DispChar+0x138>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	7e18      	ldrb	r0, [r3, #24]
 800b940:	7ed9      	ldrb	r1, [r3, #27]
 800b942:	7e9a      	ldrb	r2, [r3, #26]
 800b944:	7e5b      	ldrb	r3, [r3, #25]
 800b946:	fb00 8101 	mla	r1, r0, r1, r8
 800b94a:	4443      	add	r3, r8
 800b94c:	fb0a 7202 	mla	r2, sl, r2, r7
 800b950:	4638      	mov	r0, r7
 800b952:	f7fc f81b 	bl	800798c <LCD_FillRect>
 800b956:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800b95a:	f7fb ff8f 	bl	800787c <LCD_SetDrawMode>
 800b95e:	4b04      	ldr	r3, [pc, #16]	; (800b970 <GUIMONO_DispChar+0x138>)
 800b960:	7c61      	ldrb	r1, [r4, #17]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800b966:	440b      	add	r3, r1
 800b968:	8453      	strh	r3, [r2, #34]	; 0x22
 800b96a:	b00b      	add	sp, #44	; 0x2c
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	20000014 	.word	0x20000014

0800b974 <GUIMONO_GetCharDistX>:
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <GUIMONO_GetCharDistX+0x14>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	69db      	ldr	r3, [r3, #28]
 800b97c:	b109      	cbz	r1, 800b982 <GUIMONO_GetCharDistX+0xe>
 800b97e:	7c1a      	ldrb	r2, [r3, #16]
 800b980:	600a      	str	r2, [r1, #0]
 800b982:	7c58      	ldrb	r0, [r3, #17]
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	20000014 	.word	0x20000014

0800b98c <GUIMONO_GetFontInfo>:
 800b98c:	2302      	movs	r3, #2
 800b98e:	800b      	strh	r3, [r1, #0]
 800b990:	4770      	bx	lr

0800b992 <GUIMONO_IsInFont>:
 800b992:	69c3      	ldr	r3, [r0, #28]
 800b994:	899a      	ldrh	r2, [r3, #12]
 800b996:	428a      	cmp	r2, r1
 800b998:	d802      	bhi.n	800b9a0 <GUIMONO_IsInFont+0xe>
 800b99a:	89da      	ldrh	r2, [r3, #14]
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d20f      	bcs.n	800b9c0 <GUIMONO_IsInFont+0x2e>
 800b9a0:	6898      	ldr	r0, [r3, #8]
 800b9a2:	b180      	cbz	r0, 800b9c6 <GUIMONO_IsInFont+0x34>
 800b9a4:	8803      	ldrh	r3, [r0, #0]
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	d30c      	bcc.n	800b9c4 <GUIMONO_IsInFont+0x32>
 800b9aa:	8842      	ldrh	r2, [r0, #2]
 800b9ac:	428a      	cmp	r2, r1
 800b9ae:	d309      	bcc.n	800b9c4 <GUIMONO_IsInFont+0x32>
 800b9b0:	1ac9      	subs	r1, r1, r3
 800b9b2:	6843      	ldr	r3, [r0, #4]
 800b9b4:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 800b9b8:	43c0      	mvns	r0, r0
 800b9ba:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800b9be:	4770      	bx	lr
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	4770      	bx	lr
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	4770      	bx	lr

0800b9c8 <GUIPROP__FindChar>:
 800b9c8:	b138      	cbz	r0, 800b9da <GUIPROP__FindChar+0x12>
 800b9ca:	8803      	ldrh	r3, [r0, #0]
 800b9cc:	428b      	cmp	r3, r1
 800b9ce:	d802      	bhi.n	800b9d6 <GUIPROP__FindChar+0xe>
 800b9d0:	8843      	ldrh	r3, [r0, #2]
 800b9d2:	428b      	cmp	r3, r1
 800b9d4:	d201      	bcs.n	800b9da <GUIPROP__FindChar+0x12>
 800b9d6:	6880      	ldr	r0, [r0, #8]
 800b9d8:	e7f6      	b.n	800b9c8 <GUIPROP__FindChar>
 800b9da:	4770      	bx	lr

0800b9dc <GUIPROP_DispChar>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	4c38      	ldr	r4, [pc, #224]	; (800bac4 <GUIPROP_DispChar+0xe8>)
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	b089      	sub	sp, #36	; 0x24
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	4601      	mov	r1, r0
 800b9f0:	69d8      	ldr	r0, [r3, #28]
 800b9f2:	f7ff ffe9 	bl	800b9c8 <GUIPROP__FindChar>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d060      	beq.n	800babc <GUIPROP_DispChar+0xe0>
 800b9fa:	8805      	ldrh	r5, [r0, #0]
 800b9fc:	6847      	ldr	r7, [r0, #4]
 800b9fe:	1b75      	subs	r5, r6, r5
 800ba00:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 800ba04:	4640      	mov	r0, r8
 800ba06:	f896 a002 	ldrb.w	sl, [r6, #2]
 800ba0a:	f7fb ff37 	bl	800787c <LCD_SetDrawMode>
 800ba0e:	f8d4 c000 	ldr.w	ip, [r4]
 800ba12:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 800ba16:	f8dc e01c 	ldr.w	lr, [ip, #28]
 800ba1a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800ba1e:	f89e b018 	ldrb.w	fp, [lr, #24]
 800ba22:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 800ba26:	4681      	mov	r9, r0
 800ba28:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 800ba2c:	9305      	str	r3, [sp, #20]
 800ba2e:	6873      	ldr	r3, [r6, #4]
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	f04f 0c01 	mov.w	ip, #1
 800ba36:	f8cd a00c 	str.w	sl, [sp, #12]
 800ba3a:	f8cd c008 	str.w	ip, [sp, #8]
 800ba3e:	f89e c01b 	ldrb.w	ip, [lr, #27]
 800ba42:	f8cd c004 	str.w	ip, [sp, #4]
 800ba46:	f89e e01a 	ldrb.w	lr, [lr, #26]
 800ba4a:	f8cd e000 	str.w	lr, [sp]
 800ba4e:	465b      	mov	r3, fp
 800ba50:	f7fc f8b4 	bl	8007bbc <LCD_DrawBitmap>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	7e59      	ldrb	r1, [r3, #25]
 800ba5a:	f893 a018 	ldrb.w	sl, [r3, #24]
 800ba5e:	9107      	str	r1, [sp, #28]
 800ba60:	4551      	cmp	r1, sl
 800ba62:	d920      	bls.n	800baa6 <GUIPROP_DispChar+0xca>
 800ba64:	f1b8 0f02 	cmp.w	r8, #2
 800ba68:	d01d      	beq.n	800baa6 <GUIPROP_DispChar+0xca>
 800ba6a:	f893 b01b 	ldrb.w	fp, [r3, #27]
 800ba6e:	f7fb f8cf 	bl	8006c10 <GUI_GetColor>
 800ba72:	4680      	mov	r8, r0
 800ba74:	f7fb f8c5 	bl	8006c02 <GUI_GetBkColor>
 800ba78:	f7fb f965 	bl	8006d46 <GUI_SetColor>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	9907      	ldr	r1, [sp, #28]
 800ba80:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 800ba84:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 800ba8e:	7eda      	ldrb	r2, [r3, #27]
 800ba90:	fb0b e301 	mla	r3, fp, r1, lr
 800ba94:	fb05 0202 	mla	r2, r5, r2, r0
 800ba98:	fb0b e10a 	mla	r1, fp, sl, lr
 800ba9c:	f7fb ff76 	bl	800798c <LCD_FillRect>
 800baa0:	4640      	mov	r0, r8
 800baa2:	f7fb f950 	bl	8006d46 <GUI_SetColor>
 800baa6:	4648      	mov	r0, r9
 800baa8:	f7fb fee8 	bl	800787c <LCD_SetDrawMode>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	7871      	ldrb	r1, [r6, #1]
 800bab0:	69da      	ldr	r2, [r3, #28]
 800bab2:	7e90      	ldrb	r0, [r2, #26]
 800bab4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800bab6:	fb00 2201 	mla	r2, r0, r1, r2
 800baba:	845a      	strh	r2, [r3, #34]	; 0x22
 800babc:	b009      	add	sp, #36	; 0x24
 800babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	bf00      	nop
 800bac4:	20000014 	.word	0x20000014

0800bac8 <GUIPROP_GetCharDistX>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <GUIPROP_GetCharDistX+0x38>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	69dd      	ldr	r5, [r3, #28]
 800bad0:	4602      	mov	r2, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	4601      	mov	r1, r0
 800bad6:	69e8      	ldr	r0, [r5, #28]
 800bad8:	f7ff ff76 	bl	800b9c8 <GUIPROP__FindChar>
 800badc:	b170      	cbz	r0, 800bafc <GUIPROP_GetCharDistX+0x34>
 800bade:	8803      	ldrh	r3, [r0, #0]
 800bae0:	1ad2      	subs	r2, r2, r3
 800bae2:	6843      	ldr	r3, [r0, #4]
 800bae4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800bae8:	7848      	ldrb	r0, [r1, #1]
 800baea:	7ea9      	ldrb	r1, [r5, #26]
 800baec:	fb10 f001 	smulbb	r0, r0, r1
 800baf0:	b124      	cbz	r4, 800bafc <GUIPROP_GetCharDistX+0x34>
 800baf2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 800baf6:	fb11 f303 	smulbb	r3, r1, r3
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	bd38      	pop	{r3, r4, r5, pc}
 800bafe:	bf00      	nop
 800bb00:	20000014 	.word	0x20000014

0800bb04 <GUIPROP_GetFontInfo>:
 800bb04:	2301      	movs	r3, #1
 800bb06:	800b      	strh	r3, [r1, #0]
 800bb08:	4770      	bx	lr

0800bb0a <GUIPROP_IsInFont>:
 800bb0a:	b508      	push	{r3, lr}
 800bb0c:	69c0      	ldr	r0, [r0, #28]
 800bb0e:	f7ff ff5b 	bl	800b9c8 <GUIPROP__FindChar>
 800bb12:	3000      	adds	r0, #0
 800bb14:	bf18      	it	ne
 800bb16:	2001      	movne	r0, #1
 800bb18:	bd08      	pop	{r3, pc}
	...

0800bb1c <GUI_SelectLayer>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	4d08      	ldr	r5, [pc, #32]	; (800bb40 <GUI_SelectLayer+0x24>)
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	2801      	cmp	r0, #1
 800bb24:	4604      	mov	r4, r0
 800bb26:	7c5e      	ldrb	r6, [r3, #17]
 800bb28:	d808      	bhi.n	800bb3c <GUI_SelectLayer+0x20>
 800bb2a:	f7fb fac7 	bl	80070bc <GUI_DEVICE__GetpDriver>
 800bb2e:	b128      	cbz	r0, 800bb3c <GUI_SelectLayer+0x20>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	745c      	strb	r4, [r3, #17]
 800bb34:	f7fb f8fc 	bl	8006d30 <GUI_SelectLCD>
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <GUI_SelectLayer+0x28>)
 800bb3a:	601c      	str	r4, [r3, #0]
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	20000014 	.word	0x20000014
 800bb44:	20008424 	.word	0x20008424

0800bb48 <GUI_DispDecShift>:
 800bb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb4a:	ab04      	add	r3, sp, #16
 800bb4c:	ac01      	add	r4, sp, #4
 800bb4e:	f843 4d10 	str.w	r4, [r3, #-16]!
 800bb52:	f7fa ffdf 	bl	8006b14 <GUI_AddDecShift>
 800bb56:	4620      	mov	r0, r4
 800bb58:	f7fb fba4 	bl	80072a4 <GUI_DispString>
 800bb5c:	b004      	add	sp, #16
 800bb5e:	bd10      	pop	{r4, pc}

0800bb60 <GUI_DispSDecShift>:
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	b085      	sub	sp, #20
 800bb64:	ad04      	add	r5, sp, #16
 800bb66:	ae01      	add	r6, sp, #4
 800bb68:	f845 6d10 	str.w	r6, [r5, #-16]!
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4617      	mov	r7, r2
 800bb72:	f7fa ffc3 	bl	8006afc <GUI_AddSign>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	bfc4      	itt	gt
 800bb7a:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800bb7e:	b2e4      	uxtbgt	r4, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	463a      	mov	r2, r7
 800bb84:	4621      	mov	r1, r4
 800bb86:	f7fa ffc5 	bl	8006b14 <GUI_AddDecShift>
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f7fb fb8a 	bl	80072a4 <GUI_DispString>
 800bb90:	b005      	add	sp, #20
 800bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb94 <GUI__CompactPixelIndices>:
 800bb94:	2a08      	cmp	r2, #8
 800bb96:	b510      	push	{r4, lr}
 800bb98:	dd0e      	ble.n	800bbb8 <GUI__CompactPixelIndices+0x24>
 800bb9a:	2a10      	cmp	r2, #16
 800bb9c:	dc0a      	bgt.n	800bbb4 <GUI__CompactPixelIndices+0x20>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800bba4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bba8:	f823 2b02 	strh.w	r2, [r3], #2
 800bbac:	428b      	cmp	r3, r1
 800bbae:	d1f9      	bne.n	800bba4 <GUI__CompactPixelIndices+0x10>
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	bd10      	pop	{r4, pc}
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	bd10      	pop	{r4, pc}
 800bbb8:	2a02      	cmp	r2, #2
 800bbba:	d128      	bne.n	800bc0e <GUI__CompactPixelIndices+0x7a>
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	6803      	ldr	r3, [r0, #0]
 800bbc0:	2901      	cmp	r1, #1
 800bbc2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	d01e      	beq.n	800bc08 <GUI__CompactPixelIndices+0x74>
 800bbca:	6842      	ldr	r2, [r0, #4]
 800bbcc:	0112      	lsls	r2, r2, #4
 800bbce:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800bbd2:	2902      	cmp	r1, #2
 800bbd4:	ea43 0302 	orr.w	r3, r3, r2
 800bbd8:	d101      	bne.n	800bbde <GUI__CompactPixelIndices+0x4a>
 800bbda:	3008      	adds	r0, #8
 800bbdc:	e015      	b.n	800bc0a <GUI__CompactPixelIndices+0x76>
 800bbde:	6882      	ldr	r2, [r0, #8]
 800bbe0:	0092      	lsls	r2, r2, #2
 800bbe2:	f002 020c 	and.w	r2, r2, #12
 800bbe6:	2903      	cmp	r1, #3
 800bbe8:	ea43 0302 	orr.w	r3, r3, r2
 800bbec:	d101      	bne.n	800bbf2 <GUI__CompactPixelIndices+0x5e>
 800bbee:	300c      	adds	r0, #12
 800bbf0:	e00b      	b.n	800bc0a <GUI__CompactPixelIndices+0x76>
 800bbf2:	68c2      	ldr	r2, [r0, #12]
 800bbf4:	f002 0203 	and.w	r2, r2, #3
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	3904      	subs	r1, #4
 800bbfc:	3010      	adds	r0, #16
 800bbfe:	f804 3b01 	strb.w	r3, [r4], #1
 800bc02:	2900      	cmp	r1, #0
 800bc04:	d1db      	bne.n	800bbbe <GUI__CompactPixelIndices+0x2a>
 800bc06:	e7d3      	b.n	800bbb0 <GUI__CompactPixelIndices+0x1c>
 800bc08:	3004      	adds	r0, #4
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	e7f7      	b.n	800bbfe <GUI__CompactPixelIndices+0x6a>
 800bc0e:	2a04      	cmp	r2, #4
 800bc10:	d115      	bne.n	800bc3e <GUI__CompactPixelIndices+0xaa>
 800bc12:	4604      	mov	r4, r0
 800bc14:	2901      	cmp	r1, #1
 800bc16:	6803      	ldr	r3, [r0, #0]
 800bc18:	bf18      	it	ne
 800bc1a:	6842      	ldrne	r2, [r0, #4]
 800bc1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	bf1b      	ittet	ne
 800bc24:	f002 020f 	andne.w	r2, r2, #15
 800bc28:	4313      	orrne	r3, r2
 800bc2a:	2100      	moveq	r1, #0
 800bc2c:	3902      	subne	r1, #2
 800bc2e:	bf0c      	ite	eq
 800bc30:	3004      	addeq	r0, #4
 800bc32:	3008      	addne	r0, #8
 800bc34:	f804 3b01 	strb.w	r3, [r4], #1
 800bc38:	2900      	cmp	r1, #0
 800bc3a:	d1eb      	bne.n	800bc14 <GUI__CompactPixelIndices+0x80>
 800bc3c:	e7b8      	b.n	800bbb0 <GUI__CompactPixelIndices+0x1c>
 800bc3e:	2a01      	cmp	r2, #1
 800bc40:	4603      	mov	r3, r0
 800bc42:	d14e      	bne.n	800bce2 <GUI__CompactPixelIndices+0x14e>
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	2901      	cmp	r1, #1
 800bc48:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	d045      	beq.n	800bcdc <GUI__CompactPixelIndices+0x148>
 800bc50:	685c      	ldr	r4, [r3, #4]
 800bc52:	01a4      	lsls	r4, r4, #6
 800bc54:	f004 0440 	and.w	r4, r4, #64	; 0x40
 800bc58:	2902      	cmp	r1, #2
 800bc5a:	ea42 0204 	orr.w	r2, r2, r4
 800bc5e:	d101      	bne.n	800bc64 <GUI__CompactPixelIndices+0xd0>
 800bc60:	3308      	adds	r3, #8
 800bc62:	e03c      	b.n	800bcde <GUI__CompactPixelIndices+0x14a>
 800bc64:	689c      	ldr	r4, [r3, #8]
 800bc66:	0164      	lsls	r4, r4, #5
 800bc68:	f004 0420 	and.w	r4, r4, #32
 800bc6c:	2903      	cmp	r1, #3
 800bc6e:	ea42 0204 	orr.w	r2, r2, r4
 800bc72:	d101      	bne.n	800bc78 <GUI__CompactPixelIndices+0xe4>
 800bc74:	330c      	adds	r3, #12
 800bc76:	e032      	b.n	800bcde <GUI__CompactPixelIndices+0x14a>
 800bc78:	68dc      	ldr	r4, [r3, #12]
 800bc7a:	0124      	lsls	r4, r4, #4
 800bc7c:	f004 0410 	and.w	r4, r4, #16
 800bc80:	2904      	cmp	r1, #4
 800bc82:	ea42 0204 	orr.w	r2, r2, r4
 800bc86:	d101      	bne.n	800bc8c <GUI__CompactPixelIndices+0xf8>
 800bc88:	3310      	adds	r3, #16
 800bc8a:	e028      	b.n	800bcde <GUI__CompactPixelIndices+0x14a>
 800bc8c:	691c      	ldr	r4, [r3, #16]
 800bc8e:	00e4      	lsls	r4, r4, #3
 800bc90:	f004 0408 	and.w	r4, r4, #8
 800bc94:	2905      	cmp	r1, #5
 800bc96:	ea42 0204 	orr.w	r2, r2, r4
 800bc9a:	d101      	bne.n	800bca0 <GUI__CompactPixelIndices+0x10c>
 800bc9c:	3314      	adds	r3, #20
 800bc9e:	e01e      	b.n	800bcde <GUI__CompactPixelIndices+0x14a>
 800bca0:	695c      	ldr	r4, [r3, #20]
 800bca2:	00a4      	lsls	r4, r4, #2
 800bca4:	f004 0404 	and.w	r4, r4, #4
 800bca8:	2906      	cmp	r1, #6
 800bcaa:	ea42 0204 	orr.w	r2, r2, r4
 800bcae:	d101      	bne.n	800bcb4 <GUI__CompactPixelIndices+0x120>
 800bcb0:	3318      	adds	r3, #24
 800bcb2:	e014      	b.n	800bcde <GUI__CompactPixelIndices+0x14a>
 800bcb4:	699c      	ldr	r4, [r3, #24]
 800bcb6:	0064      	lsls	r4, r4, #1
 800bcb8:	3907      	subs	r1, #7
 800bcba:	f004 0402 	and.w	r4, r4, #2
 800bcbe:	ea42 0204 	orr.w	r2, r2, r4
 800bcc2:	bf1b      	ittet	ne
 800bcc4:	69dc      	ldrne	r4, [r3, #28]
 800bcc6:	f004 0401 	andne.w	r4, r4, #1
 800bcca:	331c      	addeq	r3, #28
 800bccc:	4322      	orrne	r2, r4
 800bcce:	bf18      	it	ne
 800bcd0:	3320      	addne	r3, #32
 800bcd2:	f800 2b01 	strb.w	r2, [r0], #1
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d1b4      	bne.n	800bc44 <GUI__CompactPixelIndices+0xb0>
 800bcda:	e769      	b.n	800bbb0 <GUI__CompactPixelIndices+0x1c>
 800bcdc:	3304      	adds	r3, #4
 800bcde:	2100      	movs	r1, #0
 800bce0:	e7f7      	b.n	800bcd2 <GUI__CompactPixelIndices+0x13e>
 800bce2:	4401      	add	r1, r0
 800bce4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bce8:	f803 2b01 	strb.w	r2, [r3], #1
 800bcec:	4299      	cmp	r1, r3
 800bcee:	d1f9      	bne.n	800bce4 <GUI__CompactPixelIndices+0x150>
 800bcf0:	e75e      	b.n	800bbb0 <GUI__CompactPixelIndices+0x1c>
	...

0800bcf4 <GUI__ManageCacheEx>:
 800bcf4:	2801      	cmp	r0, #1
 800bcf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	dc62      	bgt.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bcfe:	4d33      	ldr	r5, [pc, #204]	; (800bdcc <GUI__ManageCacheEx+0xd8>)
 800bd00:	686b      	ldr	r3, [r5, #4]
 800bd02:	b103      	cbz	r3, 800bd06 <GUI__ManageCacheEx+0x12>
 800bd04:	4798      	blx	r3
 800bd06:	2c01      	cmp	r4, #1
 800bd08:	d004      	beq.n	800bd14 <GUI__ManageCacheEx+0x20>
 800bd0a:	2c02      	cmp	r4, #2
 800bd0c:	d020      	beq.n	800bd50 <GUI__ManageCacheEx+0x5c>
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	d158      	bne.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bd12:	e033      	b.n	800bd7c <GUI__ManageCacheEx+0x88>
 800bd14:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800bd18:	68af      	ldr	r7, [r5, #8]
 800bd1a:	b9af      	cbnz	r7, 800bd48 <GUI__ManageCacheEx+0x54>
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7fb f9cd 	bl	80070bc <GUI_DEVICE__GetpDriver>
 800bd22:	9001      	str	r0, [sp, #4]
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d04d      	beq.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bd28:	68c3      	ldr	r3, [r0, #12]
 800bd2a:	210d      	movs	r1, #13
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	a801      	add	r0, sp, #4
 800bd30:	4798      	blx	r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d045      	beq.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	9801      	ldr	r0, [sp, #4]
 800bd3c:	4798      	blx	r3
 800bd3e:	68ab      	ldr	r3, [r5, #8]
 800bd40:	3301      	adds	r3, #1
 800bd42:	60ab      	str	r3, [r5, #8]
 800bd44:	4638      	mov	r0, r7
 800bd46:	e03e      	b.n	800bdc6 <GUI__ManageCacheEx+0xd2>
 800bd48:	1c78      	adds	r0, r7, #1
 800bd4a:	60a8      	str	r0, [r5, #8]
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	e03a      	b.n	800bdc6 <GUI__ManageCacheEx+0xd2>
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7fb f9b3 	bl	80070bc <GUI_DEVICE__GetpDriver>
 800bd56:	9001      	str	r0, [sp, #4]
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d033      	beq.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bd5c:	68c3      	ldr	r3, [r0, #12]
 800bd5e:	210d      	movs	r1, #13
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	a801      	add	r0, sp, #4
 800bd64:	4798      	blx	r3
 800bd66:	4604      	mov	r4, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d02b      	beq.n	800bdc4 <GUI__ManageCacheEx+0xd0>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <GUI__ManageCacheEx+0x7e>
 800bd70:	4798      	blx	r3
 800bd72:	2102      	movs	r1, #2
 800bd74:	9801      	ldr	r0, [sp, #4]
 800bd76:	47a0      	blx	r4
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e024      	b.n	800bdc6 <GUI__ManageCacheEx+0xd2>
 800bd7c:	00b4      	lsls	r4, r6, #2
 800bd7e:	192b      	adds	r3, r5, r4
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d001      	beq.n	800bd8a <GUI__ManageCacheEx+0x96>
 800bd86:	2001      	movs	r0, #1
 800bd88:	e015      	b.n	800bdb6 <GUI__ManageCacheEx+0xc2>
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f7fb f996 	bl	80070bc <GUI_DEVICE__GetpDriver>
 800bd90:	9001      	str	r0, [sp, #4]
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d0f7      	beq.n	800bd86 <GUI__ManageCacheEx+0x92>
 800bd96:	68c3      	ldr	r3, [r0, #12]
 800bd98:	210d      	movs	r1, #13
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	a801      	add	r0, sp, #4
 800bd9e:	4798      	blx	r3
 800bda0:	4606      	mov	r6, r0
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d0ef      	beq.n	800bd86 <GUI__ManageCacheEx+0x92>
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <GUI__ManageCacheEx+0xd8>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <GUI__ManageCacheEx+0xba>
 800bdac:	4798      	blx	r3
 800bdae:	2100      	movs	r1, #0
 800bdb0:	9801      	ldr	r0, [sp, #4]
 800bdb2:	47b0      	blx	r6
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	4425      	add	r5, r4
 800bdb8:	68ab      	ldr	r3, [r5, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bf18      	it	ne
 800bdbe:	3b01      	subne	r3, #1
 800bdc0:	60ab      	str	r3, [r5, #8]
 800bdc2:	e000      	b.n	800bdc6 <GUI__ManageCacheEx+0xd2>
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	b003      	add	sp, #12
 800bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200001f0 	.word	0x200001f0

0800bdd0 <GUI__ManageCache>:
 800bdd0:	4b02      	ldr	r3, [pc, #8]	; (800bddc <GUI__ManageCache+0xc>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	7c58      	ldrb	r0, [r3, #17]
 800bdd8:	f7ff bf8c 	b.w	800bcf4 <GUI__ManageCacheEx>
 800bddc:	20000014 	.word	0x20000014

0800bde0 <LCD_SetClipRectEx>:
 800bde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bde2:	4c09      	ldr	r4, [pc, #36]	; (800be08 <LCD_SetClipRectEx+0x28>)
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	7c5a      	ldrb	r2, [r3, #17]
 800bde8:	4b08      	ldr	r3, [pc, #32]	; (800be0c <LCD_SetClipRectEx+0x2c>)
 800bdea:	4605      	mov	r5, r0
 800bdec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bdf0:	68c3      	ldr	r3, [r0, #12]
 800bdf2:	4669      	mov	r1, sp
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf6:	4798      	blx	r3
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	466a      	mov	r2, sp
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	3008      	adds	r0, #8
 800be00:	f7fb fccb 	bl	800779a <GUI__IntersectRects>
 800be04:	b003      	add	sp, #12
 800be06:	bd30      	pop	{r4, r5, pc}
 800be08:	20000014 	.word	0x20000014
 800be0c:	200083e8 	.word	0x200083e8

0800be10 <GUI_MEMDEV_GetBitsPerPixel>:
 800be10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be12:	4604      	mov	r4, r0
 800be14:	b170      	cbz	r0, 800be34 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800be16:	f7fa fca5 	bl	8006764 <GUI_ALLOC_LockH>
 800be1a:	6803      	ldr	r3, [r0, #0]
 800be1c:	ad02      	add	r5, sp, #8
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	f845 0d04 	str.w	r0, [r5, #-4]!
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	4798      	blx	r3
 800be28:	f7fc fa1b 	bl	8008262 <LCD__GetBPPDevice>
 800be2c:	4604      	mov	r4, r0
 800be2e:	4628      	mov	r0, r5
 800be30:	f7fa fca6 	bl	8006780 <GUI_ALLOC_UnlockH>
 800be34:	4620      	mov	r0, r4
 800be36:	b003      	add	sp, #12
 800be38:	bd30      	pop	{r4, r5, pc}
	...

0800be3c <GUI_MEMDEV_Delete>:
 800be3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be3e:	4604      	mov	r4, r0
 800be40:	b1d0      	cbz	r0, 800be78 <GUI_MEMDEV_Delete+0x3c>
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <GUI_MEMDEV_Delete+0x40>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be48:	4298      	cmp	r0, r3
 800be4a:	d101      	bne.n	800be50 <GUI_MEMDEV_Delete+0x14>
 800be4c:	f7fa ff70 	bl	8006d30 <GUI_SelectLCD>
 800be50:	4620      	mov	r0, r4
 800be52:	f7fa fc87 	bl	8006764 <GUI_ALLOC_LockH>
 800be56:	9001      	str	r0, [sp, #4]
 800be58:	6940      	ldr	r0, [r0, #20]
 800be5a:	b108      	cbz	r0, 800be60 <GUI_MEMDEV_Delete+0x24>
 800be5c:	f7fe f816 	bl	8009e8c <GUI_USAGE_DecUseCnt>
 800be60:	ad02      	add	r5, sp, #8
 800be62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	f7fb f938 	bl	80070dc <GUI_DEVICE_Delete>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f7fa fc87 	bl	8006780 <GUI_ALLOC_UnlockH>
 800be72:	4620      	mov	r0, r4
 800be74:	f7fa fca4 	bl	80067c0 <GUI_ALLOC_Free>
 800be78:	b003      	add	sp, #12
 800be7a:	bd30      	pop	{r4, r5, pc}
 800be7c:	20000014 	.word	0x20000014

0800be80 <GUI_MEMDEV_GetDataPtr>:
 800be80:	b513      	push	{r0, r1, r4, lr}
 800be82:	b158      	cbz	r0, 800be9c <GUI_MEMDEV_GetDataPtr+0x1c>
 800be84:	f7fa fc6e 	bl	8006764 <GUI_ALLOC_LockH>
 800be88:	ab02      	add	r3, sp, #8
 800be8a:	f100 0418 	add.w	r4, r0, #24
 800be8e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800be92:	4618      	mov	r0, r3
 800be94:	f7fa fc74 	bl	8006780 <GUI_ALLOC_UnlockH>
 800be98:	4620      	mov	r0, r4
 800be9a:	e7ff      	b.n	800be9c <GUI_MEMDEV_GetDataPtr+0x1c>
 800be9c:	b002      	add	sp, #8
 800be9e:	bd10      	pop	{r4, pc}

0800bea0 <__libc_init_array>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	4d0d      	ldr	r5, [pc, #52]	; (800bed8 <__libc_init_array+0x38>)
 800bea4:	4c0d      	ldr	r4, [pc, #52]	; (800bedc <__libc_init_array+0x3c>)
 800bea6:	1b64      	subs	r4, r4, r5
 800bea8:	10a4      	asrs	r4, r4, #2
 800beaa:	2600      	movs	r6, #0
 800beac:	42a6      	cmp	r6, r4
 800beae:	d109      	bne.n	800bec4 <__libc_init_array+0x24>
 800beb0:	4d0b      	ldr	r5, [pc, #44]	; (800bee0 <__libc_init_array+0x40>)
 800beb2:	4c0c      	ldr	r4, [pc, #48]	; (800bee4 <__libc_init_array+0x44>)
 800beb4:	f000 f9a8 	bl	800c208 <_init>
 800beb8:	1b64      	subs	r4, r4, r5
 800beba:	10a4      	asrs	r4, r4, #2
 800bebc:	2600      	movs	r6, #0
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	d105      	bne.n	800bece <__libc_init_array+0x2e>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec8:	4798      	blx	r3
 800beca:	3601      	adds	r6, #1
 800becc:	e7ee      	b.n	800beac <__libc_init_array+0xc>
 800bece:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed2:	4798      	blx	r3
 800bed4:	3601      	adds	r6, #1
 800bed6:	e7f2      	b.n	800bebe <__libc_init_array+0x1e>
 800bed8:	08010ee4 	.word	0x08010ee4
 800bedc:	08010ee4 	.word	0x08010ee4
 800bee0:	08010ee4 	.word	0x08010ee4
 800bee4:	08010ee8 	.word	0x08010ee8

0800bee8 <__itoa>:
 800bee8:	1e93      	subs	r3, r2, #2
 800beea:	2b22      	cmp	r3, #34	; 0x22
 800beec:	b510      	push	{r4, lr}
 800beee:	460c      	mov	r4, r1
 800bef0:	d904      	bls.n	800befc <__itoa+0x14>
 800bef2:	2300      	movs	r3, #0
 800bef4:	700b      	strb	r3, [r1, #0]
 800bef6:	461c      	mov	r4, r3
 800bef8:	4620      	mov	r0, r4
 800befa:	bd10      	pop	{r4, pc}
 800befc:	2a0a      	cmp	r2, #10
 800befe:	d109      	bne.n	800bf14 <__itoa+0x2c>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	da07      	bge.n	800bf14 <__itoa+0x2c>
 800bf04:	232d      	movs	r3, #45	; 0x2d
 800bf06:	700b      	strb	r3, [r1, #0]
 800bf08:	4240      	negs	r0, r0
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	4421      	add	r1, r4
 800bf0e:	f000 f835 	bl	800bf7c <__utoa>
 800bf12:	e7f1      	b.n	800bef8 <__itoa+0x10>
 800bf14:	2100      	movs	r1, #0
 800bf16:	e7f9      	b.n	800bf0c <__itoa+0x24>

0800bf18 <itoa>:
 800bf18:	f7ff bfe6 	b.w	800bee8 <__itoa>

0800bf1c <memcpy>:
 800bf1c:	440a      	add	r2, r1
 800bf1e:	4291      	cmp	r1, r2
 800bf20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf24:	d100      	bne.n	800bf28 <memcpy+0xc>
 800bf26:	4770      	bx	lr
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf32:	4291      	cmp	r1, r2
 800bf34:	d1f9      	bne.n	800bf2a <memcpy+0xe>
 800bf36:	bd10      	pop	{r4, pc}

0800bf38 <memmove>:
 800bf38:	4288      	cmp	r0, r1
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	eb01 0402 	add.w	r4, r1, r2
 800bf40:	d902      	bls.n	800bf48 <memmove+0x10>
 800bf42:	4284      	cmp	r4, r0
 800bf44:	4623      	mov	r3, r4
 800bf46:	d807      	bhi.n	800bf58 <memmove+0x20>
 800bf48:	1e43      	subs	r3, r0, #1
 800bf4a:	42a1      	cmp	r1, r4
 800bf4c:	d008      	beq.n	800bf60 <memmove+0x28>
 800bf4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf56:	e7f8      	b.n	800bf4a <memmove+0x12>
 800bf58:	4402      	add	r2, r0
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	428a      	cmp	r2, r1
 800bf5e:	d100      	bne.n	800bf62 <memmove+0x2a>
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf6a:	e7f7      	b.n	800bf5c <memmove+0x24>

0800bf6c <memset>:
 800bf6c:	4402      	add	r2, r0
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d100      	bne.n	800bf76 <memset+0xa>
 800bf74:	4770      	bx	lr
 800bf76:	f803 1b01 	strb.w	r1, [r3], #1
 800bf7a:	e7f9      	b.n	800bf70 <memset+0x4>

0800bf7c <__utoa>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	4c1f      	ldr	r4, [pc, #124]	; (800bffc <__utoa+0x80>)
 800bf80:	b08b      	sub	sp, #44	; 0x2c
 800bf82:	4605      	mov	r5, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	466e      	mov	r6, sp
 800bf88:	f104 0c20 	add.w	ip, r4, #32
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	6861      	ldr	r1, [r4, #4]
 800bf90:	4637      	mov	r7, r6
 800bf92:	c703      	stmia	r7!, {r0, r1}
 800bf94:	3408      	adds	r4, #8
 800bf96:	4564      	cmp	r4, ip
 800bf98:	463e      	mov	r6, r7
 800bf9a:	d1f7      	bne.n	800bf8c <__utoa+0x10>
 800bf9c:	7921      	ldrb	r1, [r4, #4]
 800bf9e:	7139      	strb	r1, [r7, #4]
 800bfa0:	1e91      	subs	r1, r2, #2
 800bfa2:	6820      	ldr	r0, [r4, #0]
 800bfa4:	6038      	str	r0, [r7, #0]
 800bfa6:	2922      	cmp	r1, #34	; 0x22
 800bfa8:	f04f 0100 	mov.w	r1, #0
 800bfac:	d904      	bls.n	800bfb8 <__utoa+0x3c>
 800bfae:	7019      	strb	r1, [r3, #0]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	b00b      	add	sp, #44	; 0x2c
 800bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb8:	1e58      	subs	r0, r3, #1
 800bfba:	4684      	mov	ip, r0
 800bfbc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bfc0:	fb02 5617 	mls	r6, r2, r7, r5
 800bfc4:	3628      	adds	r6, #40	; 0x28
 800bfc6:	446e      	add	r6, sp
 800bfc8:	460c      	mov	r4, r1
 800bfca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bfce:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bfd2:	462e      	mov	r6, r5
 800bfd4:	42b2      	cmp	r2, r6
 800bfd6:	f101 0101 	add.w	r1, r1, #1
 800bfda:	463d      	mov	r5, r7
 800bfdc:	d9ee      	bls.n	800bfbc <__utoa+0x40>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	545a      	strb	r2, [r3, r1]
 800bfe2:	1919      	adds	r1, r3, r4
 800bfe4:	1aa5      	subs	r5, r4, r2
 800bfe6:	42aa      	cmp	r2, r5
 800bfe8:	dae3      	bge.n	800bfb2 <__utoa+0x36>
 800bfea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bfee:	780e      	ldrb	r6, [r1, #0]
 800bff0:	7006      	strb	r6, [r0, #0]
 800bff2:	3201      	adds	r2, #1
 800bff4:	f801 5901 	strb.w	r5, [r1], #-1
 800bff8:	e7f4      	b.n	800bfe4 <__utoa+0x68>
 800bffa:	bf00      	nop
 800bffc:	08010eb4 	.word	0x08010eb4

0800c000 <ceil>:
 800c000:	ec51 0b10 	vmov	r0, r1, d0
 800c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c008:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c00c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c010:	2e13      	cmp	r6, #19
 800c012:	ee10 5a10 	vmov	r5, s0
 800c016:	ee10 8a10 	vmov	r8, s0
 800c01a:	460c      	mov	r4, r1
 800c01c:	dc30      	bgt.n	800c080 <ceil+0x80>
 800c01e:	2e00      	cmp	r6, #0
 800c020:	da12      	bge.n	800c048 <ceil+0x48>
 800c022:	a335      	add	r3, pc, #212	; (adr r3, 800c0f8 <ceil+0xf8>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f9fe 	bl	8000428 <__adddf3>
 800c02c:	2200      	movs	r2, #0
 800c02e:	2300      	movs	r3, #0
 800c030:	f7f4 fc2e 	bl	8000890 <__aeabi_dcmpgt>
 800c034:	b128      	cbz	r0, 800c042 <ceil+0x42>
 800c036:	2c00      	cmp	r4, #0
 800c038:	db55      	blt.n	800c0e6 <ceil+0xe6>
 800c03a:	432c      	orrs	r4, r5
 800c03c:	d057      	beq.n	800c0ee <ceil+0xee>
 800c03e:	4c30      	ldr	r4, [pc, #192]	; (800c100 <ceil+0x100>)
 800c040:	2500      	movs	r5, #0
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	e025      	b.n	800c094 <ceil+0x94>
 800c048:	4f2e      	ldr	r7, [pc, #184]	; (800c104 <ceil+0x104>)
 800c04a:	4137      	asrs	r7, r6
 800c04c:	ea01 0307 	and.w	r3, r1, r7
 800c050:	4303      	orrs	r3, r0
 800c052:	d01f      	beq.n	800c094 <ceil+0x94>
 800c054:	a328      	add	r3, pc, #160	; (adr r3, 800c0f8 <ceil+0xf8>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 f9e5 	bl	8000428 <__adddf3>
 800c05e:	2200      	movs	r2, #0
 800c060:	2300      	movs	r3, #0
 800c062:	f7f4 fc15 	bl	8000890 <__aeabi_dcmpgt>
 800c066:	2800      	cmp	r0, #0
 800c068:	d0eb      	beq.n	800c042 <ceil+0x42>
 800c06a:	2c00      	cmp	r4, #0
 800c06c:	bfc2      	ittt	gt
 800c06e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800c072:	fa43 f606 	asrgt.w	r6, r3, r6
 800c076:	19a4      	addgt	r4, r4, r6
 800c078:	ea24 0407 	bic.w	r4, r4, r7
 800c07c:	2500      	movs	r5, #0
 800c07e:	e7e0      	b.n	800c042 <ceil+0x42>
 800c080:	2e33      	cmp	r6, #51	; 0x33
 800c082:	dd0b      	ble.n	800c09c <ceil+0x9c>
 800c084:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c088:	d104      	bne.n	800c094 <ceil+0x94>
 800c08a:	ee10 2a10 	vmov	r2, s0
 800c08e:	460b      	mov	r3, r1
 800c090:	f7f4 f9ca 	bl	8000428 <__adddf3>
 800c094:	ec41 0b10 	vmov	d0, r0, r1
 800c098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a4:	fa23 f707 	lsr.w	r7, r3, r7
 800c0a8:	4207      	tst	r7, r0
 800c0aa:	d0f3      	beq.n	800c094 <ceil+0x94>
 800c0ac:	a312      	add	r3, pc, #72	; (adr r3, 800c0f8 <ceil+0xf8>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 f9b9 	bl	8000428 <__adddf3>
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f7f4 fbe9 	bl	8000890 <__aeabi_dcmpgt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0bf      	beq.n	800c042 <ceil+0x42>
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	dd02      	ble.n	800c0cc <ceil+0xcc>
 800c0c6:	2e14      	cmp	r6, #20
 800c0c8:	d103      	bne.n	800c0d2 <ceil+0xd2>
 800c0ca:	3401      	adds	r4, #1
 800c0cc:	ea25 0507 	bic.w	r5, r5, r7
 800c0d0:	e7b7      	b.n	800c042 <ceil+0x42>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c0d8:	fa03 f606 	lsl.w	r6, r3, r6
 800c0dc:	4435      	add	r5, r6
 800c0de:	4545      	cmp	r5, r8
 800c0e0:	bf38      	it	cc
 800c0e2:	18e4      	addcc	r4, r4, r3
 800c0e4:	e7f2      	b.n	800c0cc <ceil+0xcc>
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c0ec:	e7a9      	b.n	800c042 <ceil+0x42>
 800c0ee:	4625      	mov	r5, r4
 800c0f0:	e7a7      	b.n	800c042 <ceil+0x42>
 800c0f2:	bf00      	nop
 800c0f4:	f3af 8000 	nop.w
 800c0f8:	8800759c 	.word	0x8800759c
 800c0fc:	7e37e43c 	.word	0x7e37e43c
 800c100:	3ff00000 	.word	0x3ff00000
 800c104:	000fffff 	.word	0x000fffff

0800c108 <floor>:
 800c108:	ec51 0b10 	vmov	r0, r1, d0
 800c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c110:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c114:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c118:	2e13      	cmp	r6, #19
 800c11a:	ee10 5a10 	vmov	r5, s0
 800c11e:	ee10 8a10 	vmov	r8, s0
 800c122:	460c      	mov	r4, r1
 800c124:	dc32      	bgt.n	800c18c <floor+0x84>
 800c126:	2e00      	cmp	r6, #0
 800c128:	da14      	bge.n	800c154 <floor+0x4c>
 800c12a:	a333      	add	r3, pc, #204	; (adr r3, 800c1f8 <floor+0xf0>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f97a 	bl	8000428 <__adddf3>
 800c134:	2200      	movs	r2, #0
 800c136:	2300      	movs	r3, #0
 800c138:	f7f4 fbaa 	bl	8000890 <__aeabi_dcmpgt>
 800c13c:	b138      	cbz	r0, 800c14e <floor+0x46>
 800c13e:	2c00      	cmp	r4, #0
 800c140:	da57      	bge.n	800c1f2 <floor+0xea>
 800c142:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c146:	431d      	orrs	r5, r3
 800c148:	d001      	beq.n	800c14e <floor+0x46>
 800c14a:	4c2d      	ldr	r4, [pc, #180]	; (800c200 <floor+0xf8>)
 800c14c:	2500      	movs	r5, #0
 800c14e:	4621      	mov	r1, r4
 800c150:	4628      	mov	r0, r5
 800c152:	e025      	b.n	800c1a0 <floor+0x98>
 800c154:	4f2b      	ldr	r7, [pc, #172]	; (800c204 <floor+0xfc>)
 800c156:	4137      	asrs	r7, r6
 800c158:	ea01 0307 	and.w	r3, r1, r7
 800c15c:	4303      	orrs	r3, r0
 800c15e:	d01f      	beq.n	800c1a0 <floor+0x98>
 800c160:	a325      	add	r3, pc, #148	; (adr r3, 800c1f8 <floor+0xf0>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 f95f 	bl	8000428 <__adddf3>
 800c16a:	2200      	movs	r2, #0
 800c16c:	2300      	movs	r3, #0
 800c16e:	f7f4 fb8f 	bl	8000890 <__aeabi_dcmpgt>
 800c172:	2800      	cmp	r0, #0
 800c174:	d0eb      	beq.n	800c14e <floor+0x46>
 800c176:	2c00      	cmp	r4, #0
 800c178:	bfbe      	ittt	lt
 800c17a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c17e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c182:	19a4      	addlt	r4, r4, r6
 800c184:	ea24 0407 	bic.w	r4, r4, r7
 800c188:	2500      	movs	r5, #0
 800c18a:	e7e0      	b.n	800c14e <floor+0x46>
 800c18c:	2e33      	cmp	r6, #51	; 0x33
 800c18e:	dd0b      	ble.n	800c1a8 <floor+0xa0>
 800c190:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c194:	d104      	bne.n	800c1a0 <floor+0x98>
 800c196:	ee10 2a10 	vmov	r2, s0
 800c19a:	460b      	mov	r3, r1
 800c19c:	f7f4 f944 	bl	8000428 <__adddf3>
 800c1a0:	ec41 0b10 	vmov	d0, r0, r1
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b0:	fa23 f707 	lsr.w	r7, r3, r7
 800c1b4:	4207      	tst	r7, r0
 800c1b6:	d0f3      	beq.n	800c1a0 <floor+0x98>
 800c1b8:	a30f      	add	r3, pc, #60	; (adr r3, 800c1f8 <floor+0xf0>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 f933 	bl	8000428 <__adddf3>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f7f4 fb63 	bl	8000890 <__aeabi_dcmpgt>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d0bf      	beq.n	800c14e <floor+0x46>
 800c1ce:	2c00      	cmp	r4, #0
 800c1d0:	da02      	bge.n	800c1d8 <floor+0xd0>
 800c1d2:	2e14      	cmp	r6, #20
 800c1d4:	d103      	bne.n	800c1de <floor+0xd6>
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	ea25 0507 	bic.w	r5, r5, r7
 800c1dc:	e7b7      	b.n	800c14e <floor+0x46>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c1e4:	fa03 f606 	lsl.w	r6, r3, r6
 800c1e8:	4435      	add	r5, r6
 800c1ea:	4545      	cmp	r5, r8
 800c1ec:	bf38      	it	cc
 800c1ee:	18e4      	addcc	r4, r4, r3
 800c1f0:	e7f2      	b.n	800c1d8 <floor+0xd0>
 800c1f2:	2500      	movs	r5, #0
 800c1f4:	462c      	mov	r4, r5
 800c1f6:	e7aa      	b.n	800c14e <floor+0x46>
 800c1f8:	8800759c 	.word	0x8800759c
 800c1fc:	7e37e43c 	.word	0x7e37e43c
 800c200:	bff00000 	.word	0xbff00000
 800c204:	000fffff 	.word	0x000fffff

0800c208 <_init>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	bf00      	nop
 800c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20e:	bc08      	pop	{r3}
 800c210:	469e      	mov	lr, r3
 800c212:	4770      	bx	lr

0800c214 <_fini>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr
